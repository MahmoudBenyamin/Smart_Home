
Smart_Home.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000172  00800060  00005ace  00005b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000568  008001d2  008001d2  00005cd4  2**0
                  ALLOC
  3 .stab         000075a8  00000000  00000000  00005cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000039be  00000000  00000000  0000d27c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00010c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00010dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00010fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  000133d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001475d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00015934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00015af4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00015dea  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00016758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d0 15 	jmp	0x2ba0	; 0x2ba0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 ec 28 	jmp	0x51d8	; 0x51d8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	fa e5       	ldi	r31, 0x5A	; 90
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3d       	cpi	r26, 0xD2	; 210
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a2 ed       	ldi	r26, 0xD2	; 210
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1f 29 	call	0x523e	; 0x523e <main>
      8a:	0c 94 65 2d 	jmp	0x5aca	; 0x5aca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e0 2c 	jmp	0x59c0	; 0x59c0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e9       	ldi	r26, 0x9D	; 157
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fc 2c 	jmp	0x59f8	; 0x59f8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e0 2c 	jmp	0x59c0	; 0x59c0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e9       	ldi	r24, 0x9D	; 157
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fc 2c 	jmp	0x59f8	; 0x59f8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d e9       	ldi	r22, 0x9D	; 157
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ec 2c 	jmp	0x59d8	; 0x59d8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 08 2d 	jmp	0x5a10	; 0x5a10 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f0 2c 	jmp	0x59e0	; 0x59e0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0c 2d 	jmp	0x5a18	; 0x5a18 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e8 2c 	jmp	0x59d0	; 0x59d0 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 04 2d 	jmp	0x5a08	; 0x5a08 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	eb 55       	subi	r30, 0x5B	; 91
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <LCD_enuInit>:

#include <util\delay.h>


ES_t LCD_enuInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	ab 97       	sbiw	r28, 0x2b	; 43
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_enuErrorState = ES_NOK;
     e42:	1b a6       	std	Y+43, r1	; 0x2b
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	ac e0       	ldi	r26, 0x0C	; 12
     e4a:	b2 e4       	ldi	r27, 0x42	; 66
     e4c:	8f a3       	std	Y+39, r24	; 0x27
     e4e:	98 a7       	std	Y+40, r25	; 0x28
     e50:	a9 a7       	std	Y+41, r26	; 0x29
     e52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e54:	6f a1       	ldd	r22, Y+39	; 0x27
     e56:	78 a5       	ldd	r23, Y+40	; 0x28
     e58:	89 a5       	ldd	r24, Y+41	; 0x29
     e5a:	9a a5       	ldd	r25, Y+42	; 0x2a
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	4a ef       	ldi	r20, 0xFA	; 250
     e62:	54 e4       	ldi	r21, 0x44	; 68
     e64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e68:	dc 01       	movw	r26, r24
     e6a:	cb 01       	movw	r24, r22
     e6c:	8b a3       	std	Y+35, r24	; 0x23
     e6e:	9c a3       	std	Y+36, r25	; 0x24
     e70:	ad a3       	std	Y+37, r26	; 0x25
     e72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e74:	6b a1       	ldd	r22, Y+35	; 0x23
     e76:	7c a1       	ldd	r23, Y+36	; 0x24
     e78:	8d a1       	ldd	r24, Y+37	; 0x25
     e7a:	9e a1       	ldd	r25, Y+38	; 0x26
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e88:	88 23       	and	r24, r24
     e8a:	2c f4       	brge	.+10     	; 0xe96 <LCD_enuInit+0x68>
		__ticks = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9a a3       	std	Y+34, r25	; 0x22
     e92:	89 a3       	std	Y+33, r24	; 0x21
     e94:	3f c0       	rjmp	.+126    	; 0xf14 <LCD_enuInit+0xe6>
	else if (__tmp > 65535)
     e96:	6b a1       	ldd	r22, Y+35	; 0x23
     e98:	7c a1       	ldd	r23, Y+36	; 0x24
     e9a:	8d a1       	ldd	r24, Y+37	; 0x25
     e9c:	9e a1       	ldd	r25, Y+38	; 0x26
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	3f ef       	ldi	r19, 0xFF	; 255
     ea2:	4f e7       	ldi	r20, 0x7F	; 127
     ea4:	57 e4       	ldi	r21, 0x47	; 71
     ea6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eaa:	18 16       	cp	r1, r24
     eac:	4c f5       	brge	.+82     	; 0xf00 <LCD_enuInit+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eae:	6f a1       	ldd	r22, Y+39	; 0x27
     eb0:	78 a5       	ldd	r23, Y+40	; 0x28
     eb2:	89 a5       	ldd	r24, Y+41	; 0x29
     eb4:	9a a5       	ldd	r25, Y+42	; 0x2a
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e2       	ldi	r20, 0x20	; 32
     ebc:	51 e4       	ldi	r21, 0x41	; 65
     ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec2:	dc 01       	movw	r26, r24
     ec4:	cb 01       	movw	r24, r22
     ec6:	bc 01       	movw	r22, r24
     ec8:	cd 01       	movw	r24, r26
     eca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ece:	dc 01       	movw	r26, r24
     ed0:	cb 01       	movw	r24, r22
     ed2:	9a a3       	std	Y+34, r25	; 0x22
     ed4:	89 a3       	std	Y+33, r24	; 0x21
     ed6:	0f c0       	rjmp	.+30     	; 0xef6 <LCD_enuInit+0xc8>
     ed8:	88 ec       	ldi	r24, 0xC8	; 200
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	98 a3       	std	Y+32, r25	; 0x20
     ede:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ee0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ee2:	98 a1       	ldd	r25, Y+32	; 0x20
     ee4:	01 97       	sbiw	r24, 0x01	; 1
     ee6:	f1 f7       	brne	.-4      	; 0xee4 <LCD_enuInit+0xb6>
     ee8:	98 a3       	std	Y+32, r25	; 0x20
     eea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eec:	89 a1       	ldd	r24, Y+33	; 0x21
     eee:	9a a1       	ldd	r25, Y+34	; 0x22
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	9a a3       	std	Y+34, r25	; 0x22
     ef4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef6:	89 a1       	ldd	r24, Y+33	; 0x21
     ef8:	9a a1       	ldd	r25, Y+34	; 0x22
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	69 f7       	brne	.-38     	; 0xed8 <LCD_enuInit+0xaa>
     efe:	14 c0       	rjmp	.+40     	; 0xf28 <LCD_enuInit+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f00:	6b a1       	ldd	r22, Y+35	; 0x23
     f02:	7c a1       	ldd	r23, Y+36	; 0x24
     f04:	8d a1       	ldd	r24, Y+37	; 0x25
     f06:	9e a1       	ldd	r25, Y+38	; 0x26
     f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0c:	dc 01       	movw	r26, r24
     f0e:	cb 01       	movw	r24, r22
     f10:	9a a3       	std	Y+34, r25	; 0x22
     f12:	89 a3       	std	Y+33, r24	; 0x21
     f14:	89 a1       	ldd	r24, Y+33	; 0x21
     f16:	9a a1       	ldd	r25, Y+34	; 0x22
     f18:	9e 8f       	std	Y+30, r25	; 0x1e
     f1a:	8d 8f       	std	Y+29, r24	; 0x1d
     f1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <LCD_enuInit+0xf2>
     f24:	9e 8f       	std	Y+30, r25	; 0x1e
     f26:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(35);

	DIO_enuSetPinDirection(RS_GRP, RS_PIN, DIO_u8OUTPUT);
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	66 e0       	ldi	r22, 0x06	; 6
     f2c:	41 e0       	ldi	r20, 0x01	; 1
     f2e:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(RW_GRP, RW_PIN, DIO_u8OUTPUT);
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(EN_GRP, EN_PIN, DIO_u8OUTPUT);
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	62 e0       	ldi	r22, 0x02	; 2
     f40:	41 e0       	ldi	r20, 0x01	; 1
     f42:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(D7_GRP, D7_PIN, DIO_u8OUTPUT);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	66 e0       	ldi	r22, 0x06	; 6
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D6_GRP, D6_PIN, DIO_u8OUTPUT);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	65 e0       	ldi	r22, 0x05	; 5
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D5_GRP, D5_PIN, DIO_u8OUTPUT);
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	64 e0       	ldi	r22, 0x04	; 4
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(D4_GRP, D4_PIN, DIO_u8OUTPUT);
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	63 e0       	ldi	r22, 0x03	; 3
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(0x38);

#elif LCD_MODE == FOUR_BIT

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	66 e0       	ldi	r22, 0x06	; 6
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(D7_GRP, D7_PIN,  0  );
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	66 e0       	ldi	r22, 0x06	; 6
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  0  );
     f82:	80 e0       	ldi	r24, 0x00	; 0
     f84:	65 e0       	ldi	r22, 0x05	; 5
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  1  );
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	64 e0       	ldi	r22, 0x04	; 4
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  0  );
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	63 e0       	ldi	r22, 0x03	; 3
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	62 e0       	ldi	r22, 0x02	; 2
     fa4:	41 e0       	ldi	r20, 0x01	; 1
     fa6:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e2       	ldi	r26, 0x20	; 32
     fb0:	b1 e4       	ldi	r27, 0x41	; 65
     fb2:	89 8f       	std	Y+25, r24	; 0x19
     fb4:	9a 8f       	std	Y+26, r25	; 0x1a
     fb6:	ab 8f       	std	Y+27, r26	; 0x1b
     fb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fba:	69 8d       	ldd	r22, Y+25	; 0x19
     fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	4a ef       	ldi	r20, 0xFA	; 250
     fc8:	54 e4       	ldi	r21, 0x44	; 68
     fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fce:	dc 01       	movw	r26, r24
     fd0:	cb 01       	movw	r24, r22
     fd2:	8d 8b       	std	Y+21, r24	; 0x15
     fd4:	9e 8b       	std	Y+22, r25	; 0x16
     fd6:	af 8b       	std	Y+23, r26	; 0x17
     fd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fda:	6d 89       	ldd	r22, Y+21	; 0x15
     fdc:	7e 89       	ldd	r23, Y+22	; 0x16
     fde:	8f 89       	ldd	r24, Y+23	; 0x17
     fe0:	98 8d       	ldd	r25, Y+24	; 0x18
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	40 e8       	ldi	r20, 0x80	; 128
     fe8:	5f e3       	ldi	r21, 0x3F	; 63
     fea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     fee:	88 23       	and	r24, r24
     ff0:	2c f4       	brge	.+10     	; 0xffc <LCD_enuInit+0x1ce>
		__ticks = 1;
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	9c 8b       	std	Y+20, r25	; 0x14
     ff8:	8b 8b       	std	Y+19, r24	; 0x13
     ffa:	3f c0       	rjmp	.+126    	; 0x107a <LCD_enuInit+0x24c>
	else if (__tmp > 65535)
     ffc:	6d 89       	ldd	r22, Y+21	; 0x15
     ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    1000:	8f 89       	ldd	r24, Y+23	; 0x17
    1002:	98 8d       	ldd	r25, Y+24	; 0x18
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	3f ef       	ldi	r19, 0xFF	; 255
    1008:	4f e7       	ldi	r20, 0x7F	; 127
    100a:	57 e4       	ldi	r21, 0x47	; 71
    100c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1010:	18 16       	cp	r1, r24
    1012:	4c f5       	brge	.+82     	; 0x1066 <LCD_enuInit+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1014:	69 8d       	ldd	r22, Y+25	; 0x19
    1016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	40 e2       	ldi	r20, 0x20	; 32
    1022:	51 e4       	ldi	r21, 0x41	; 65
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	bc 01       	movw	r22, r24
    102e:	cd 01       	movw	r24, r26
    1030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1034:	dc 01       	movw	r26, r24
    1036:	cb 01       	movw	r24, r22
    1038:	9c 8b       	std	Y+20, r25	; 0x14
    103a:	8b 8b       	std	Y+19, r24	; 0x13
    103c:	0f c0       	rjmp	.+30     	; 0x105c <LCD_enuInit+0x22e>
    103e:	88 ec       	ldi	r24, 0xC8	; 200
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9a 8b       	std	Y+18, r25	; 0x12
    1044:	89 8b       	std	Y+17, r24	; 0x11
    1046:	89 89       	ldd	r24, Y+17	; 0x11
    1048:	9a 89       	ldd	r25, Y+18	; 0x12
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	f1 f7       	brne	.-4      	; 0x104a <LCD_enuInit+0x21c>
    104e:	9a 8b       	std	Y+18, r25	; 0x12
    1050:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1052:	8b 89       	ldd	r24, Y+19	; 0x13
    1054:	9c 89       	ldd	r25, Y+20	; 0x14
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	9c 8b       	std	Y+20, r25	; 0x14
    105a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    105c:	8b 89       	ldd	r24, Y+19	; 0x13
    105e:	9c 89       	ldd	r25, Y+20	; 0x14
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	69 f7       	brne	.-38     	; 0x103e <LCD_enuInit+0x210>
    1064:	14 c0       	rjmp	.+40     	; 0x108e <LCD_enuInit+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1066:	6d 89       	ldd	r22, Y+21	; 0x15
    1068:	7e 89       	ldd	r23, Y+22	; 0x16
    106a:	8f 89       	ldd	r24, Y+23	; 0x17
    106c:	98 8d       	ldd	r25, Y+24	; 0x18
    106e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	9c 8b       	std	Y+20, r25	; 0x14
    1078:	8b 8b       	std	Y+19, r24	; 0x13
    107a:	8b 89       	ldd	r24, Y+19	; 0x13
    107c:	9c 89       	ldd	r25, Y+20	; 0x14
    107e:	98 8b       	std	Y+16, r25	; 0x10
    1080:	8f 87       	std	Y+15, r24	; 0x0f
    1082:	8f 85       	ldd	r24, Y+15	; 0x0f
    1084:	98 89       	ldd	r25, Y+16	; 0x10
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	f1 f7       	brne	.-4      	; 0x1086 <LCD_enuInit+0x258>
    108a:	98 8b       	std	Y+16, r25	; 0x10
    108c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	62 e0       	ldi	r22, 0x02	; 2
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	a0 e2       	ldi	r26, 0x20	; 32
    109e:	b1 e4       	ldi	r27, 0x41	; 65
    10a0:	8b 87       	std	Y+11, r24	; 0x0b
    10a2:	9c 87       	std	Y+12, r25	; 0x0c
    10a4:	ad 87       	std	Y+13, r26	; 0x0d
    10a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    10aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    10b0:	20 e0       	ldi	r18, 0x00	; 0
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	4a ef       	ldi	r20, 0xFA	; 250
    10b6:	54 e4       	ldi	r21, 0x44	; 68
    10b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10bc:	dc 01       	movw	r26, r24
    10be:	cb 01       	movw	r24, r22
    10c0:	8f 83       	std	Y+7, r24	; 0x07
    10c2:	98 87       	std	Y+8, r25	; 0x08
    10c4:	a9 87       	std	Y+9, r26	; 0x09
    10c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c8:	6f 81       	ldd	r22, Y+7	; 0x07
    10ca:	78 85       	ldd	r23, Y+8	; 0x08
    10cc:	89 85       	ldd	r24, Y+9	; 0x09
    10ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d0:	20 e0       	ldi	r18, 0x00	; 0
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	40 e8       	ldi	r20, 0x80	; 128
    10d6:	5f e3       	ldi	r21, 0x3F	; 63
    10d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10dc:	88 23       	and	r24, r24
    10de:	2c f4       	brge	.+10     	; 0x10ea <LCD_enuInit+0x2bc>
		__ticks = 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	3f c0       	rjmp	.+126    	; 0x1168 <LCD_enuInit+0x33a>
	else if (__tmp > 65535)
    10ea:	6f 81       	ldd	r22, Y+7	; 0x07
    10ec:	78 85       	ldd	r23, Y+8	; 0x08
    10ee:	89 85       	ldd	r24, Y+9	; 0x09
    10f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	3f ef       	ldi	r19, 0xFF	; 255
    10f6:	4f e7       	ldi	r20, 0x7F	; 127
    10f8:	57 e4       	ldi	r21, 0x47	; 71
    10fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10fe:	18 16       	cp	r1, r24
    1100:	4c f5       	brge	.+82     	; 0x1154 <LCD_enuInit+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1102:	6b 85       	ldd	r22, Y+11	; 0x0b
    1104:	7c 85       	ldd	r23, Y+12	; 0x0c
    1106:	8d 85       	ldd	r24, Y+13	; 0x0d
    1108:	9e 85       	ldd	r25, Y+14	; 0x0e
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e2       	ldi	r20, 0x20	; 32
    1110:	51 e4       	ldi	r21, 0x41	; 65
    1112:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	bc 01       	movw	r22, r24
    111c:	cd 01       	movw	r24, r26
    111e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1122:	dc 01       	movw	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	9e 83       	std	Y+6, r25	; 0x06
    1128:	8d 83       	std	Y+5, r24	; 0x05
    112a:	0f c0       	rjmp	.+30     	; 0x114a <LCD_enuInit+0x31c>
    112c:	88 ec       	ldi	r24, 0xC8	; 200
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9c 83       	std	Y+4, r25	; 0x04
    1132:	8b 83       	std	Y+3, r24	; 0x03
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <LCD_enuInit+0x30a>
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	9e 83       	std	Y+6, r25	; 0x06
    1148:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    114a:	8d 81       	ldd	r24, Y+5	; 0x05
    114c:	9e 81       	ldd	r25, Y+6	; 0x06
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	69 f7       	brne	.-38     	; 0x112c <LCD_enuInit+0x2fe>
    1152:	14 c0       	rjmp	.+40     	; 0x117c <LCD_enuInit+0x34e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1154:	6f 81       	ldd	r22, Y+7	; 0x07
    1156:	78 85       	ldd	r23, Y+8	; 0x08
    1158:	89 85       	ldd	r24, Y+9	; 0x09
    115a:	9a 85       	ldd	r25, Y+10	; 0x0a
    115c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	9e 83       	std	Y+6, r25	; 0x06
    1166:	8d 83       	std	Y+5, r24	; 0x05
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	9a 81       	ldd	r25, Y+2	; 0x02
    1174:	01 97       	sbiw	r24, 0x01	; 1
    1176:	f1 f7       	brne	.-4      	; 0x1174 <LCD_enuInit+0x346>
    1178:	9a 83       	std	Y+2, r25	; 0x02
    117a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	LCD_enuWriteNLatch(0x28);
    117c:	88 e2       	ldi	r24, 0x28	; 40
    117e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>
#else
#error "LCD Mode Configuration is wrong\n it must be EIGHT_BIT or FOUR_BIT"
#endif

	//display on/off
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	66 e0       	ldi	r22, 0x06	; 6
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x0F);
    118c:	8f e0       	ldi	r24, 0x0F	; 15
    118e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>

	//clear display
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	66 e0       	ldi	r22, 0x06	; 6
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x01);
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>

	//Entry set mode
	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	66 e0       	ldi	r22, 0x06	; 6
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(0x06);
    11ac:	86 e0       	ldi	r24, 0x06	; 6
    11ae:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    11b2:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    11b4:	ab 96       	adiw	r28, 0x2b	; 43
    11b6:	0f b6       	in	r0, 0x3f	; 63
    11b8:	f8 94       	cli
    11ba:	de bf       	out	0x3e, r29	; 62
    11bc:	0f be       	out	0x3f, r0	; 63
    11be:	cd bf       	out	0x3d, r28	; 61
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <LCD_enuWriteData>:

ES_t LCD_enuWriteData(u8 Copy_u8Data)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <LCD_enuWriteData+0x6>
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    11d2:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	66 e0       	ldi	r22, 0x06	; 6
    11d8:	41 e0       	ldi	r20, 0x01	; 1
    11da:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch (Copy_u8Data);
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11e6:	0f 90       	pop	r0
    11e8:	0f 90       	pop	r0
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <LCD_enuWriteCommand>:

ES_t LCD_enuWriteCommand(u8 Copy_u8Command)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <LCD_enuWriteCommand+0x6>
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
    11fa:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    11fc:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    11fe:	81 e0       	ldi	r24, 0x01	; 1
    1200:	66 e0       	ldi	r22, 0x06	; 6
    1202:	40 e0       	ldi	r20, 0x00	; 0
    1204:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	LCD_enuWriteNLatch(Copy_u8Command);
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>

	return Local_enuErrorState;
    120e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <LCD_enuWriteString>:

ES_t LCD_enuWriteString(const char * Copy_pcString )
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <LCD_enuWriteString+0x6>
    1220:	0f 92       	push	r0
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
    1226:	9b 83       	std	Y+3, r25	; 0x03
    1228:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    122a:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pcString != NULL)
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	9b 81       	ldd	r25, Y+3	; 0x03
    1230:	00 97       	sbiw	r24, 0x00	; 0
    1232:	b9 f0       	breq	.+46     	; 0x1262 <LCD_enuWriteString+0x48>
    1234:	10 c0       	rjmp	.+32     	; 0x1256 <LCD_enuWriteString+0x3c>
	{
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	66 e0       	ldi	r22, 0x06	; 6
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
			LCD_enuWriteNLatch (*Copy_pcString++);
    1240:	ea 81       	ldd	r30, Y+2	; 0x02
    1242:	fb 81       	ldd	r31, Y+3	; 0x03
    1244:	20 81       	ld	r18, Z
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	9b 81       	ldd	r25, Y+3	; 0x03
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	9b 83       	std	Y+3, r25	; 0x03
    124e:	8a 83       	std	Y+2, r24	; 0x02
    1250:	82 2f       	mov	r24, r18
    1252:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>
ES_t LCD_enuWriteString(const char * Copy_pcString )
{
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    1256:	ea 81       	ldd	r30, Y+2	; 0x02
    1258:	fb 81       	ldd	r31, Y+3	; 0x03
    125a:	80 81       	ld	r24, Z
    125c:	88 23       	and	r24, r24
    125e:	59 f7       	brne	.-42     	; 0x1236 <LCD_enuWriteString+0x1c>
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <LCD_enuWriteString+0x4c>
			LCD_enuWriteNLatch (*Copy_pcString++);
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1262:	83 e0       	ldi	r24, 0x03	; 3
    1264:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    1266:	89 81       	ldd	r24, Y+1	; 0x01
}
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <LCD_enuWriteIntegerNum>:

ES_t LCD_enuWriteIntegerNum(s32 Copy_s32Num)
{
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	62 97       	sbiw	r28, 0x12	; 18
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	6f 87       	std	Y+15, r22	; 0x0f
    128e:	78 8b       	std	Y+16, r23	; 0x10
    1290:	89 8b       	std	Y+17, r24	; 0x11
    1292:	9a 8b       	std	Y+18, r25	; 0x12
	ES_t Local_enuErrorState = ES_NOK;
    1294:	1a 82       	std	Y+2, r1	; 0x02

	u8 Local_Au8Digits[12]={0}, Local_u8Digit = 0;
    1296:	8c e0       	ldi	r24, 0x0C	; 12
    1298:	fe 01       	movw	r30, r28
    129a:	33 96       	adiw	r30, 0x03	; 3
    129c:	df 01       	movw	r26, r30
    129e:	98 2f       	mov	r25, r24
    12a0:	1d 92       	st	X+, r1
    12a2:	9a 95       	dec	r25
    12a4:	e9 f7       	brne	.-6      	; 0x12a0 <LCD_enuWriteIntegerNum+0x2c>
    12a6:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_s32Num==0)
    12a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12aa:	98 89       	ldd	r25, Y+16	; 0x10
    12ac:	a9 89       	ldd	r26, Y+17	; 0x11
    12ae:	ba 89       	ldd	r27, Y+18	; 0x12
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	a1 05       	cpc	r26, r1
    12b4:	b1 05       	cpc	r27, r1
    12b6:	41 f4       	brne	.+16     	; 0x12c8 <LCD_enuWriteIntegerNum+0x54>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	66 e0       	ldi	r22, 0x06	; 6
    12bc:	41 e0       	ldi	r20, 0x01	; 1
    12be:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch ('0');
    12c2:	80 e3       	ldi	r24, 0x30	; 48
    12c4:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>
	}
	if (Copy_s32Num <0)
    12c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    12ca:	98 89       	ldd	r25, Y+16	; 0x10
    12cc:	a9 89       	ldd	r26, Y+17	; 0x11
    12ce:	ba 89       	ldd	r27, Y+18	; 0x12
    12d0:	bb 23       	and	r27, r27
    12d2:	0c f0       	brlt	.+2      	; 0x12d6 <LCD_enuWriteIntegerNum+0x62>
    12d4:	46 c0       	rjmp	.+140    	; 0x1362 <LCD_enuWriteIntegerNum+0xee>
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	66 e0       	ldi	r22, 0x06	; 6
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch ('-');
    12e0:	8d e2       	ldi	r24, 0x2D	; 45
    12e2:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>
		Copy_s32Num *= -1;
    12e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12e8:	98 89       	ldd	r25, Y+16	; 0x10
    12ea:	a9 89       	ldd	r26, Y+17	; 0x11
    12ec:	ba 89       	ldd	r27, Y+18	; 0x12
    12ee:	b0 95       	com	r27
    12f0:	a0 95       	com	r26
    12f2:	90 95       	com	r25
    12f4:	81 95       	neg	r24
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	af 4f       	sbci	r26, 0xFF	; 255
    12fa:	bf 4f       	sbci	r27, 0xFF	; 255
    12fc:	8f 87       	std	Y+15, r24	; 0x0f
    12fe:	98 8b       	std	Y+16, r25	; 0x10
    1300:	a9 8b       	std	Y+17, r26	; 0x11
    1302:	ba 8b       	std	Y+18, r27	; 0x12
    1304:	2e c0       	rjmp	.+92     	; 0x1362 <LCD_enuWriteIntegerNum+0xee>
	}
	while (Copy_s32Num)
	{
		Local_u8Digit ++;
    1306:	89 81       	ldd	r24, Y+1	; 0x01
    1308:	8f 5f       	subi	r24, 0xFF	; 255
    130a:	89 83       	std	Y+1, r24	; 0x01
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
    130c:	89 81       	ldd	r24, Y+1	; 0x01
    130e:	08 2f       	mov	r16, r24
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	8f 85       	ldd	r24, Y+15	; 0x0f
    1314:	98 89       	ldd	r25, Y+16	; 0x10
    1316:	a9 89       	ldd	r26, Y+17	; 0x11
    1318:	ba 89       	ldd	r27, Y+18	; 0x12
    131a:	2a e0       	ldi	r18, 0x0A	; 10
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	40 e0       	ldi	r20, 0x00	; 0
    1320:	50 e0       	ldi	r21, 0x00	; 0
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__divmodsi4>
    132a:	dc 01       	movw	r26, r24
    132c:	cb 01       	movw	r24, r22
    132e:	28 2f       	mov	r18, r24
    1330:	20 5d       	subi	r18, 0xD0	; 208
    1332:	ce 01       	movw	r24, r28
    1334:	03 96       	adiw	r24, 0x03	; 3
    1336:	fc 01       	movw	r30, r24
    1338:	e0 0f       	add	r30, r16
    133a:	f1 1f       	adc	r31, r17
    133c:	20 83       	st	Z, r18
		Copy_s32Num /=10;
    133e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1340:	98 89       	ldd	r25, Y+16	; 0x10
    1342:	a9 89       	ldd	r26, Y+17	; 0x11
    1344:	ba 89       	ldd	r27, Y+18	; 0x12
    1346:	2a e0       	ldi	r18, 0x0A	; 10
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e0       	ldi	r20, 0x00	; 0
    134c:	50 e0       	ldi	r21, 0x00	; 0
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 a3 2c 	call	0x5946	; 0x5946 <__divmodsi4>
    1356:	da 01       	movw	r26, r20
    1358:	c9 01       	movw	r24, r18
    135a:	8f 87       	std	Y+15, r24	; 0x0f
    135c:	98 8b       	std	Y+16, r25	; 0x10
    135e:	a9 8b       	std	Y+17, r26	; 0x11
    1360:	ba 8b       	std	Y+18, r27	; 0x12
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch ('-');
		Copy_s32Num *= -1;
	}
	while (Copy_s32Num)
    1362:	8f 85       	ldd	r24, Y+15	; 0x0f
    1364:	98 89       	ldd	r25, Y+16	; 0x10
    1366:	a9 89       	ldd	r26, Y+17	; 0x11
    1368:	ba 89       	ldd	r27, Y+18	; 0x12
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	a1 05       	cpc	r26, r1
    136e:	b1 05       	cpc	r27, r1
    1370:	51 f6       	brne	.-108    	; 0x1306 <LCD_enuWriteIntegerNum+0x92>
    1372:	14 c0       	rjmp	.+40     	; 0x139c <LCD_enuWriteIntegerNum+0x128>
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
		Copy_s32Num /=10;
	}
	while (Local_u8Digit)
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	66 e0       	ldi	r22, 0x06	; 6
    1378:	41 e0       	ldi	r20, 0x01	; 1
    137a:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch (Local_Au8Digits[Local_u8Digit--]);
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	ce 01       	movw	r24, r28
    1386:	03 96       	adiw	r24, 0x03	; 3
    1388:	fc 01       	movw	r30, r24
    138a:	e2 0f       	add	r30, r18
    138c:	f3 1f       	adc	r31, r19
    138e:	90 81       	ld	r25, Z
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	81 50       	subi	r24, 0x01	; 1
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	89 2f       	mov	r24, r25
    1398:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>
	{
		Local_u8Digit ++;
		Local_Au8Digits[Local_u8Digit] = Copy_s32Num%10 + '0';
		Copy_s32Num /=10;
	}
	while (Local_u8Digit)
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	88 23       	and	r24, r24
    13a0:	49 f7       	brne	.-46     	; 0x1374 <LCD_enuWriteIntegerNum+0x100>
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8HIGH);
		LCD_enuWriteNLatch (Local_Au8Digits[Local_u8Digit--]);
	}


	return Local_enuErrorState;
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    13a4:	62 96       	adiw	r28, 0x12	; 18
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	08 95       	ret

000013ba <LCD_enuGoToPosition>:
ES_t LCD_enuGoToPosition(u8 Copy_u8Row, u8 Copy_u8Col)
{
    13ba:	df 93       	push	r29
    13bc:	cf 93       	push	r28
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <LCD_enuGoToPosition+0x6>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <LCD_enuGoToPosition+0x8>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <LCD_enuGoToPosition+0xa>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	8b 83       	std	Y+3, r24	; 0x03
    13ca:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    13cc:	1a 82       	std	Y+2, r1	; 0x02

	if (Copy_u8Row >=1 && Copy_u8Row <=4 &&
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	88 23       	and	r24, r24
    13d2:	09 f4       	brne	.+2      	; 0x13d6 <LCD_enuGoToPosition+0x1c>
    13d4:	43 c0       	rjmp	.+134    	; 0x145c <LCD_enuGoToPosition+0xa2>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	85 30       	cpi	r24, 0x05	; 5
    13da:	08 f0       	brcs	.+2      	; 0x13de <LCD_enuGoToPosition+0x24>
    13dc:	3f c0       	rjmp	.+126    	; 0x145c <LCD_enuGoToPosition+0xa2>
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	88 23       	and	r24, r24
    13e2:	e1 f1       	breq	.+120    	; 0x145c <LCD_enuGoToPosition+0xa2>
    13e4:	8c 81       	ldd	r24, Y+4	; 0x04
    13e6:	81 31       	cpi	r24, 0x11	; 17
    13e8:	c8 f5       	brcc	.+114    	; 0x145c <LCD_enuGoToPosition+0xa2>
			Copy_u8Col >=1 && Copy_u8Col <=16 )
	{
		DIO_enuSetPinValue(RS_GRP , RS_PIN , DIO_u8LOW);
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	66 e0       	ldi	r22, 0x06	; 6
    13ee:	40 e0       	ldi	r20, 0x00	; 0
    13f0:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
		u8 Address;
		switch(Copy_u8Row)
    13f4:	8b 81       	ldd	r24, Y+3	; 0x03
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3e 83       	std	Y+6, r19	; 0x06
    13fc:	2d 83       	std	Y+5, r18	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	82 30       	cpi	r24, 0x02	; 2
    1404:	91 05       	cpc	r25, r1
    1406:	d1 f0       	breq	.+52     	; 0x143c <LCD_enuGoToPosition+0x82>
    1408:	2d 81       	ldd	r18, Y+5	; 0x05
    140a:	3e 81       	ldd	r19, Y+6	; 0x06
    140c:	23 30       	cpi	r18, 0x03	; 3
    140e:	31 05       	cpc	r19, r1
    1410:	34 f4       	brge	.+12     	; 0x141e <LCD_enuGoToPosition+0x64>
    1412:	8d 81       	ldd	r24, Y+5	; 0x05
    1414:	9e 81       	ldd	r25, Y+6	; 0x06
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	91 05       	cpc	r25, r1
    141a:	61 f0       	breq	.+24     	; 0x1434 <LCD_enuGoToPosition+0x7a>
    141c:	1a c0       	rjmp	.+52     	; 0x1452 <LCD_enuGoToPosition+0x98>
    141e:	2d 81       	ldd	r18, Y+5	; 0x05
    1420:	3e 81       	ldd	r19, Y+6	; 0x06
    1422:	23 30       	cpi	r18, 0x03	; 3
    1424:	31 05       	cpc	r19, r1
    1426:	71 f0       	breq	.+28     	; 0x1444 <LCD_enuGoToPosition+0x8a>
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	84 30       	cpi	r24, 0x04	; 4
    142e:	91 05       	cpc	r25, r1
    1430:	69 f0       	breq	.+26     	; 0x144c <LCD_enuGoToPosition+0x92>
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <LCD_enuGoToPosition+0x98>
		{
			case 1:
				Address=(Copy_u8Col - 1);
    1434:	8c 81       	ldd	r24, Y+4	; 0x04
    1436:	81 50       	subi	r24, 0x01	; 1
    1438:	89 83       	std	Y+1, r24	; 0x01
    143a:	0b c0       	rjmp	.+22     	; 0x1452 <LCD_enuGoToPosition+0x98>
				break;
			case 2:
				Address=(Copy_u8Col - 1)+0x40;
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	81 5c       	subi	r24, 0xC1	; 193
    1440:	89 83       	std	Y+1, r24	; 0x01
    1442:	07 c0       	rjmp	.+14     	; 0x1452 <LCD_enuGoToPosition+0x98>
				break;
			case 3:
				Address=(Copy_u8Col - 1)+0x10;
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	81 5f       	subi	r24, 0xF1	; 241
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	03 c0       	rjmp	.+6      	; 0x1452 <LCD_enuGoToPosition+0x98>
				break;
			case 4:
				Address=(Copy_u8Col - 1)+0x50;
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	81 5b       	subi	r24, 0xB1	; 177
    1450:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
		LCD_enuWriteNLatch(0x80 + Address);
    1452:	89 81       	ldd	r24, Y+1	; 0x01
    1454:	80 58       	subi	r24, 0x80	; 128
    1456:	0e 94 3a 0a 	call	0x1474	; 0x1474 <LCD_enuWriteNLatch>
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <LCD_enuGoToPosition+0xa6>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    145c:	82 e0       	ldi	r24, 0x02	; 2
    145e:	8a 83       	std	Y+2, r24	; 0x02
	}

	return Local_enuErrorState;
    1460:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1462:	26 96       	adiw	r28, 0x06	; 6
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
    146e:	cf 91       	pop	r28
    1470:	df 91       	pop	r29
    1472:	08 95       	ret

00001474 <LCD_enuWriteNLatch>:

static ES_t LCD_enuWriteNLatch (u8 Copy_u8Byte)
{
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	ea 97       	sbiw	r28, 0x3a	; 58
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	8a af       	std	Y+58, r24	; 0x3a
	ES_t Local_enuErrorState = ES_NOK;
    148a:	19 ae       	std	Y+57, r1	; 0x39

	DIO_enuSetPinValue(RW_GRP , RW_PIN , DIO_u8LOW);
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	61 e0       	ldi	r22, 0x01	; 1
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(EN_GRP , EN_PIN , DIO_u8LOW);
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	62 e0       	ldi	r22, 0x02	; 2
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
	_delay_ms(10);

#elif LCD_MODE == FOUR_BIT
	DIO_enuSetPinValue(D7_GRP, D7_PIN,  ((Copy_u8Byte>>7)&1)  );
    14a0:	8a ad       	ldd	r24, Y+58	; 0x3a
    14a2:	98 2f       	mov	r25, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	99 27       	eor	r25, r25
    14a8:	99 1f       	adc	r25, r25
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	66 e0       	ldi	r22, 0x06	; 6
    14ae:	49 2f       	mov	r20, r25
    14b0:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  ((Copy_u8Byte>>6)&1)  );
    14b4:	8a ad       	ldd	r24, Y+58	; 0x3a
    14b6:	82 95       	swap	r24
    14b8:	86 95       	lsr	r24
    14ba:	86 95       	lsr	r24
    14bc:	83 70       	andi	r24, 0x03	; 3
    14be:	98 2f       	mov	r25, r24
    14c0:	91 70       	andi	r25, 0x01	; 1
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	65 e0       	ldi	r22, 0x05	; 5
    14c6:	49 2f       	mov	r20, r25
    14c8:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  ((Copy_u8Byte>>5)&1)  );
    14cc:	8a ad       	ldd	r24, Y+58	; 0x3a
    14ce:	82 95       	swap	r24
    14d0:	86 95       	lsr	r24
    14d2:	87 70       	andi	r24, 0x07	; 7
    14d4:	98 2f       	mov	r25, r24
    14d6:	91 70       	andi	r25, 0x01	; 1
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	64 e0       	ldi	r22, 0x04	; 4
    14dc:	49 2f       	mov	r20, r25
    14de:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  ((Copy_u8Byte>>4)&1)  );
    14e2:	8a ad       	ldd	r24, Y+58	; 0x3a
    14e4:	82 95       	swap	r24
    14e6:	8f 70       	andi	r24, 0x0F	; 15
    14e8:	98 2f       	mov	r25, r24
    14ea:	91 70       	andi	r25, 0x01	; 1
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	63 e0       	ldi	r22, 0x03	; 3
    14f0:	49 2f       	mov	r20, r25
    14f2:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	62 e0       	ldi	r22, 0x02	; 2
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a0 e2       	ldi	r26, 0x20	; 32
    1506:	b1 e4       	ldi	r27, 0x41	; 65
    1508:	8d ab       	std	Y+53, r24	; 0x35
    150a:	9e ab       	std	Y+54, r25	; 0x36
    150c:	af ab       	std	Y+55, r26	; 0x37
    150e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1510:	6d a9       	ldd	r22, Y+53	; 0x35
    1512:	7e a9       	ldd	r23, Y+54	; 0x36
    1514:	8f a9       	ldd	r24, Y+55	; 0x37
    1516:	98 ad       	ldd	r25, Y+56	; 0x38
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	4a ef       	ldi	r20, 0xFA	; 250
    151e:	54 e4       	ldi	r21, 0x44	; 68
    1520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	89 ab       	std	Y+49, r24	; 0x31
    152a:	9a ab       	std	Y+50, r25	; 0x32
    152c:	ab ab       	std	Y+51, r26	; 0x33
    152e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1530:	69 a9       	ldd	r22, Y+49	; 0x31
    1532:	7a a9       	ldd	r23, Y+50	; 0x32
    1534:	8b a9       	ldd	r24, Y+51	; 0x33
    1536:	9c a9       	ldd	r25, Y+52	; 0x34
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e8       	ldi	r20, 0x80	; 128
    153e:	5f e3       	ldi	r21, 0x3F	; 63
    1540:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1544:	88 23       	and	r24, r24
    1546:	2c f4       	brge	.+10     	; 0x1552 <LCD_enuWriteNLatch+0xde>
		__ticks = 1;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	98 ab       	std	Y+48, r25	; 0x30
    154e:	8f a7       	std	Y+47, r24	; 0x2f
    1550:	3f c0       	rjmp	.+126    	; 0x15d0 <LCD_enuWriteNLatch+0x15c>
	else if (__tmp > 65535)
    1552:	69 a9       	ldd	r22, Y+49	; 0x31
    1554:	7a a9       	ldd	r23, Y+50	; 0x32
    1556:	8b a9       	ldd	r24, Y+51	; 0x33
    1558:	9c a9       	ldd	r25, Y+52	; 0x34
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	3f ef       	ldi	r19, 0xFF	; 255
    155e:	4f e7       	ldi	r20, 0x7F	; 127
    1560:	57 e4       	ldi	r21, 0x47	; 71
    1562:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1566:	18 16       	cp	r1, r24
    1568:	4c f5       	brge	.+82     	; 0x15bc <LCD_enuWriteNLatch+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    156a:	6d a9       	ldd	r22, Y+53	; 0x35
    156c:	7e a9       	ldd	r23, Y+54	; 0x36
    156e:	8f a9       	ldd	r24, Y+55	; 0x37
    1570:	98 ad       	ldd	r25, Y+56	; 0x38
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e2       	ldi	r20, 0x20	; 32
    1578:	51 e4       	ldi	r21, 0x41	; 65
    157a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157e:	dc 01       	movw	r26, r24
    1580:	cb 01       	movw	r24, r22
    1582:	bc 01       	movw	r22, r24
    1584:	cd 01       	movw	r24, r26
    1586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	98 ab       	std	Y+48, r25	; 0x30
    1590:	8f a7       	std	Y+47, r24	; 0x2f
    1592:	0f c0       	rjmp	.+30     	; 0x15b2 <LCD_enuWriteNLatch+0x13e>
    1594:	88 ec       	ldi	r24, 0xC8	; 200
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	9e a7       	std	Y+46, r25	; 0x2e
    159a:	8d a7       	std	Y+45, r24	; 0x2d
    159c:	8d a5       	ldd	r24, Y+45	; 0x2d
    159e:	9e a5       	ldd	r25, Y+46	; 0x2e
    15a0:	01 97       	sbiw	r24, 0x01	; 1
    15a2:	f1 f7       	brne	.-4      	; 0x15a0 <LCD_enuWriteNLatch+0x12c>
    15a4:	9e a7       	std	Y+46, r25	; 0x2e
    15a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15aa:	98 a9       	ldd	r25, Y+48	; 0x30
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	98 ab       	std	Y+48, r25	; 0x30
    15b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b4:	98 a9       	ldd	r25, Y+48	; 0x30
    15b6:	00 97       	sbiw	r24, 0x00	; 0
    15b8:	69 f7       	brne	.-38     	; 0x1594 <LCD_enuWriteNLatch+0x120>
    15ba:	14 c0       	rjmp	.+40     	; 0x15e4 <LCD_enuWriteNLatch+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15bc:	69 a9       	ldd	r22, Y+49	; 0x31
    15be:	7a a9       	ldd	r23, Y+50	; 0x32
    15c0:	8b a9       	ldd	r24, Y+51	; 0x33
    15c2:	9c a9       	ldd	r25, Y+52	; 0x34
    15c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	98 ab       	std	Y+48, r25	; 0x30
    15ce:	8f a7       	std	Y+47, r24	; 0x2f
    15d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    15d2:	98 a9       	ldd	r25, Y+48	; 0x30
    15d4:	9c a7       	std	Y+44, r25	; 0x2c
    15d6:	8b a7       	std	Y+43, r24	; 0x2b
    15d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    15da:	9c a5       	ldd	r25, Y+44	; 0x2c
    15dc:	01 97       	sbiw	r24, 0x01	; 1
    15de:	f1 f7       	brne	.-4      	; 0x15dc <LCD_enuWriteNLatch+0x168>
    15e0:	9c a7       	std	Y+44, r25	; 0x2c
    15e2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	62 e0       	ldi	r22, 0x02	; 2
    15e8:	40 e0       	ldi	r20, 0x00	; 0
    15ea:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a0 e2       	ldi	r26, 0x20	; 32
    15f4:	b1 e4       	ldi	r27, 0x41	; 65
    15f6:	8f a3       	std	Y+39, r24	; 0x27
    15f8:	98 a7       	std	Y+40, r25	; 0x28
    15fa:	a9 a7       	std	Y+41, r26	; 0x29
    15fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1600:	78 a5       	ldd	r23, Y+40	; 0x28
    1602:	89 a5       	ldd	r24, Y+41	; 0x29
    1604:	9a a5       	ldd	r25, Y+42	; 0x2a
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	4a ef       	ldi	r20, 0xFA	; 250
    160c:	54 e4       	ldi	r21, 0x44	; 68
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	8b a3       	std	Y+35, r24	; 0x23
    1618:	9c a3       	std	Y+36, r25	; 0x24
    161a:	ad a3       	std	Y+37, r26	; 0x25
    161c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    161e:	6b a1       	ldd	r22, Y+35	; 0x23
    1620:	7c a1       	ldd	r23, Y+36	; 0x24
    1622:	8d a1       	ldd	r24, Y+37	; 0x25
    1624:	9e a1       	ldd	r25, Y+38	; 0x26
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	40 e8       	ldi	r20, 0x80	; 128
    162c:	5f e3       	ldi	r21, 0x3F	; 63
    162e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1632:	88 23       	and	r24, r24
    1634:	2c f4       	brge	.+10     	; 0x1640 <LCD_enuWriteNLatch+0x1cc>
		__ticks = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9a a3       	std	Y+34, r25	; 0x22
    163c:	89 a3       	std	Y+33, r24	; 0x21
    163e:	3f c0       	rjmp	.+126    	; 0x16be <LCD_enuWriteNLatch+0x24a>
	else if (__tmp > 65535)
    1640:	6b a1       	ldd	r22, Y+35	; 0x23
    1642:	7c a1       	ldd	r23, Y+36	; 0x24
    1644:	8d a1       	ldd	r24, Y+37	; 0x25
    1646:	9e a1       	ldd	r25, Y+38	; 0x26
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	3f ef       	ldi	r19, 0xFF	; 255
    164c:	4f e7       	ldi	r20, 0x7F	; 127
    164e:	57 e4       	ldi	r21, 0x47	; 71
    1650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1654:	18 16       	cp	r1, r24
    1656:	4c f5       	brge	.+82     	; 0x16aa <LCD_enuWriteNLatch+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1658:	6f a1       	ldd	r22, Y+39	; 0x27
    165a:	78 a5       	ldd	r23, Y+40	; 0x28
    165c:	89 a5       	ldd	r24, Y+41	; 0x29
    165e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	40 e2       	ldi	r20, 0x20	; 32
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    166c:	dc 01       	movw	r26, r24
    166e:	cb 01       	movw	r24, r22
    1670:	bc 01       	movw	r22, r24
    1672:	cd 01       	movw	r24, r26
    1674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1678:	dc 01       	movw	r26, r24
    167a:	cb 01       	movw	r24, r22
    167c:	9a a3       	std	Y+34, r25	; 0x22
    167e:	89 a3       	std	Y+33, r24	; 0x21
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <LCD_enuWriteNLatch+0x22c>
    1682:	88 ec       	ldi	r24, 0xC8	; 200
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	98 a3       	std	Y+32, r25	; 0x20
    1688:	8f 8f       	std	Y+31, r24	; 0x1f
    168a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    168c:	98 a1       	ldd	r25, Y+32	; 0x20
    168e:	01 97       	sbiw	r24, 0x01	; 1
    1690:	f1 f7       	brne	.-4      	; 0x168e <LCD_enuWriteNLatch+0x21a>
    1692:	98 a3       	std	Y+32, r25	; 0x20
    1694:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1696:	89 a1       	ldd	r24, Y+33	; 0x21
    1698:	9a a1       	ldd	r25, Y+34	; 0x22
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	9a a3       	std	Y+34, r25	; 0x22
    169e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a0:	89 a1       	ldd	r24, Y+33	; 0x21
    16a2:	9a a1       	ldd	r25, Y+34	; 0x22
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	69 f7       	brne	.-38     	; 0x1682 <LCD_enuWriteNLatch+0x20e>
    16a8:	14 c0       	rjmp	.+40     	; 0x16d2 <LCD_enuWriteNLatch+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16aa:	6b a1       	ldd	r22, Y+35	; 0x23
    16ac:	7c a1       	ldd	r23, Y+36	; 0x24
    16ae:	8d a1       	ldd	r24, Y+37	; 0x25
    16b0:	9e a1       	ldd	r25, Y+38	; 0x26
    16b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	9a a3       	std	Y+34, r25	; 0x22
    16bc:	89 a3       	std	Y+33, r24	; 0x21
    16be:	89 a1       	ldd	r24, Y+33	; 0x21
    16c0:	9a a1       	ldd	r25, Y+34	; 0x22
    16c2:	9e 8f       	std	Y+30, r25	; 0x1e
    16c4:	8d 8f       	std	Y+29, r24	; 0x1d
    16c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16ca:	01 97       	sbiw	r24, 0x01	; 1
    16cc:	f1 f7       	brne	.-4      	; 0x16ca <LCD_enuWriteNLatch+0x256>
    16ce:	9e 8f       	std	Y+30, r25	; 0x1e
    16d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);

	DIO_enuSetPinValue(D7_GRP, D7_PIN,  ((Copy_u8Byte>>3)&1)  );
    16d2:	8a ad       	ldd	r24, Y+58	; 0x3a
    16d4:	86 95       	lsr	r24
    16d6:	86 95       	lsr	r24
    16d8:	86 95       	lsr	r24
    16da:	98 2f       	mov	r25, r24
    16dc:	91 70       	andi	r25, 0x01	; 1
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	66 e0       	ldi	r22, 0x06	; 6
    16e2:	49 2f       	mov	r20, r25
    16e4:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D6_GRP, D6_PIN,  ((Copy_u8Byte>>2)&1)  );
    16e8:	8a ad       	ldd	r24, Y+58	; 0x3a
    16ea:	86 95       	lsr	r24
    16ec:	86 95       	lsr	r24
    16ee:	98 2f       	mov	r25, r24
    16f0:	91 70       	andi	r25, 0x01	; 1
    16f2:	80 e0       	ldi	r24, 0x00	; 0
    16f4:	65 e0       	ldi	r22, 0x05	; 5
    16f6:	49 2f       	mov	r20, r25
    16f8:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D5_GRP, D5_PIN,  ((Copy_u8Byte>>1)&1)  );
    16fc:	8a ad       	ldd	r24, Y+58	; 0x3a
    16fe:	86 95       	lsr	r24
    1700:	98 2f       	mov	r25, r24
    1702:	91 70       	andi	r25, 0x01	; 1
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	64 e0       	ldi	r22, 0x04	; 4
    1708:	49 2f       	mov	r20, r25
    170a:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(D4_GRP, D4_PIN,  ((Copy_u8Byte>>0)&1)  );
    170e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1710:	98 2f       	mov	r25, r24
    1712:	91 70       	andi	r25, 0x01	; 1
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	63 e0       	ldi	r22, 0x03	; 3
    1718:	49 2f       	mov	r20, r25
    171a:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8HIGH);
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	62 e0       	ldi	r22, 0x02	; 2
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a0 e2       	ldi	r26, 0x20	; 32
    172e:	b1 e4       	ldi	r27, 0x41	; 65
    1730:	89 8f       	std	Y+25, r24	; 0x19
    1732:	9a 8f       	std	Y+26, r25	; 0x1a
    1734:	ab 8f       	std	Y+27, r26	; 0x1b
    1736:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1738:	69 8d       	ldd	r22, Y+25	; 0x19
    173a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    173c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    173e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	4a ef       	ldi	r20, 0xFA	; 250
    1746:	54 e4       	ldi	r21, 0x44	; 68
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8d 8b       	std	Y+21, r24	; 0x15
    1752:	9e 8b       	std	Y+22, r25	; 0x16
    1754:	af 8b       	std	Y+23, r26	; 0x17
    1756:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1758:	6d 89       	ldd	r22, Y+21	; 0x15
    175a:	7e 89       	ldd	r23, Y+22	; 0x16
    175c:	8f 89       	ldd	r24, Y+23	; 0x17
    175e:	98 8d       	ldd	r25, Y+24	; 0x18
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	40 e8       	ldi	r20, 0x80	; 128
    1766:	5f e3       	ldi	r21, 0x3F	; 63
    1768:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    176c:	88 23       	and	r24, r24
    176e:	2c f4       	brge	.+10     	; 0x177a <LCD_enuWriteNLatch+0x306>
		__ticks = 1;
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9c 8b       	std	Y+20, r25	; 0x14
    1776:	8b 8b       	std	Y+19, r24	; 0x13
    1778:	3f c0       	rjmp	.+126    	; 0x17f8 <LCD_enuWriteNLatch+0x384>
	else if (__tmp > 65535)
    177a:	6d 89       	ldd	r22, Y+21	; 0x15
    177c:	7e 89       	ldd	r23, Y+22	; 0x16
    177e:	8f 89       	ldd	r24, Y+23	; 0x17
    1780:	98 8d       	ldd	r25, Y+24	; 0x18
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	3f ef       	ldi	r19, 0xFF	; 255
    1786:	4f e7       	ldi	r20, 0x7F	; 127
    1788:	57 e4       	ldi	r21, 0x47	; 71
    178a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    178e:	18 16       	cp	r1, r24
    1790:	4c f5       	brge	.+82     	; 0x17e4 <LCD_enuWriteNLatch+0x370>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1792:	69 8d       	ldd	r22, Y+25	; 0x19
    1794:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1796:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1798:	9c 8d       	ldd	r25, Y+28	; 0x1c
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e2       	ldi	r20, 0x20	; 32
    17a0:	51 e4       	ldi	r21, 0x41	; 65
    17a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	bc 01       	movw	r22, r24
    17ac:	cd 01       	movw	r24, r26
    17ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	9c 8b       	std	Y+20, r25	; 0x14
    17b8:	8b 8b       	std	Y+19, r24	; 0x13
    17ba:	0f c0       	rjmp	.+30     	; 0x17da <LCD_enuWriteNLatch+0x366>
    17bc:	88 ec       	ldi	r24, 0xC8	; 200
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9a 8b       	std	Y+18, r25	; 0x12
    17c2:	89 8b       	std	Y+17, r24	; 0x11
    17c4:	89 89       	ldd	r24, Y+17	; 0x11
    17c6:	9a 89       	ldd	r25, Y+18	; 0x12
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	f1 f7       	brne	.-4      	; 0x17c8 <LCD_enuWriteNLatch+0x354>
    17cc:	9a 8b       	std	Y+18, r25	; 0x12
    17ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17d0:	8b 89       	ldd	r24, Y+19	; 0x13
    17d2:	9c 89       	ldd	r25, Y+20	; 0x14
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	9c 8b       	std	Y+20, r25	; 0x14
    17d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17da:	8b 89       	ldd	r24, Y+19	; 0x13
    17dc:	9c 89       	ldd	r25, Y+20	; 0x14
    17de:	00 97       	sbiw	r24, 0x00	; 0
    17e0:	69 f7       	brne	.-38     	; 0x17bc <LCD_enuWriteNLatch+0x348>
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <LCD_enuWriteNLatch+0x398>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17e4:	6d 89       	ldd	r22, Y+21	; 0x15
    17e6:	7e 89       	ldd	r23, Y+22	; 0x16
    17e8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ea:	98 8d       	ldd	r25, Y+24	; 0x18
    17ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	9c 8b       	std	Y+20, r25	; 0x14
    17f6:	8b 8b       	std	Y+19, r24	; 0x13
    17f8:	8b 89       	ldd	r24, Y+19	; 0x13
    17fa:	9c 89       	ldd	r25, Y+20	; 0x14
    17fc:	98 8b       	std	Y+16, r25	; 0x10
    17fe:	8f 87       	std	Y+15, r24	; 0x0f
    1800:	8f 85       	ldd	r24, Y+15	; 0x0f
    1802:	98 89       	ldd	r25, Y+16	; 0x10
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	f1 f7       	brne	.-4      	; 0x1804 <LCD_enuWriteNLatch+0x390>
    1808:	98 8b       	std	Y+16, r25	; 0x10
    180a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	DIO_enuSetPinValue(EN_GRP, EN_PIN, DIO_u8LOW);
    180c:	80 e0       	ldi	r24, 0x00	; 0
    180e:	62 e0       	ldi	r22, 0x02	; 2
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e2       	ldi	r26, 0x20	; 32
    181c:	b1 e4       	ldi	r27, 0x41	; 65
    181e:	8b 87       	std	Y+11, r24	; 0x0b
    1820:	9c 87       	std	Y+12, r25	; 0x0c
    1822:	ad 87       	std	Y+13, r26	; 0x0d
    1824:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	6b 85       	ldd	r22, Y+11	; 0x0b
    1828:	7c 85       	ldd	r23, Y+12	; 0x0c
    182a:	8d 85       	ldd	r24, Y+13	; 0x0d
    182c:	9e 85       	ldd	r25, Y+14	; 0x0e
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	4a ef       	ldi	r20, 0xFA	; 250
    1834:	54 e4       	ldi	r21, 0x44	; 68
    1836:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	8f 83       	std	Y+7, r24	; 0x07
    1840:	98 87       	std	Y+8, r25	; 0x08
    1842:	a9 87       	std	Y+9, r26	; 0x09
    1844:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1846:	6f 81       	ldd	r22, Y+7	; 0x07
    1848:	78 85       	ldd	r23, Y+8	; 0x08
    184a:	89 85       	ldd	r24, Y+9	; 0x09
    184c:	9a 85       	ldd	r25, Y+10	; 0x0a
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e8       	ldi	r20, 0x80	; 128
    1854:	5f e3       	ldi	r21, 0x3F	; 63
    1856:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    185a:	88 23       	and	r24, r24
    185c:	2c f4       	brge	.+10     	; 0x1868 <LCD_enuWriteNLatch+0x3f4>
		__ticks = 1;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	9e 83       	std	Y+6, r25	; 0x06
    1864:	8d 83       	std	Y+5, r24	; 0x05
    1866:	3f c0       	rjmp	.+126    	; 0x18e6 <LCD_enuWriteNLatch+0x472>
	else if (__tmp > 65535)
    1868:	6f 81       	ldd	r22, Y+7	; 0x07
    186a:	78 85       	ldd	r23, Y+8	; 0x08
    186c:	89 85       	ldd	r24, Y+9	; 0x09
    186e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	3f ef       	ldi	r19, 0xFF	; 255
    1874:	4f e7       	ldi	r20, 0x7F	; 127
    1876:	57 e4       	ldi	r21, 0x47	; 71
    1878:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    187c:	18 16       	cp	r1, r24
    187e:	4c f5       	brge	.+82     	; 0x18d2 <LCD_enuWriteNLatch+0x45e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1880:	6b 85       	ldd	r22, Y+11	; 0x0b
    1882:	7c 85       	ldd	r23, Y+12	; 0x0c
    1884:	8d 85       	ldd	r24, Y+13	; 0x0d
    1886:	9e 85       	ldd	r25, Y+14	; 0x0e
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	40 e2       	ldi	r20, 0x20	; 32
    188e:	51 e4       	ldi	r21, 0x41	; 65
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	bc 01       	movw	r22, r24
    189a:	cd 01       	movw	r24, r26
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	0f c0       	rjmp	.+30     	; 0x18c8 <LCD_enuWriteNLatch+0x454>
    18aa:	88 ec       	ldi	r24, 0xC8	; 200
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 83       	std	Y+4, r25	; 0x04
    18b0:	8b 83       	std	Y+3, r24	; 0x03
    18b2:	8b 81       	ldd	r24, Y+3	; 0x03
    18b4:	9c 81       	ldd	r25, Y+4	; 0x04
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <LCD_enuWriteNLatch+0x442>
    18ba:	9c 83       	std	Y+4, r25	; 0x04
    18bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18be:	8d 81       	ldd	r24, Y+5	; 0x05
    18c0:	9e 81       	ldd	r25, Y+6	; 0x06
    18c2:	01 97       	sbiw	r24, 0x01	; 1
    18c4:	9e 83       	std	Y+6, r25	; 0x06
    18c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ca:	9e 81       	ldd	r25, Y+6	; 0x06
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	69 f7       	brne	.-38     	; 0x18aa <LCD_enuWriteNLatch+0x436>
    18d0:	14 c0       	rjmp	.+40     	; 0x18fa <LCD_enuWriteNLatch+0x486>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	6f 81       	ldd	r22, Y+7	; 0x07
    18d4:	78 85       	ldd	r23, Y+8	; 0x08
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9e 83       	std	Y+6, r25	; 0x06
    18e4:	8d 83       	std	Y+5, r24	; 0x05
    18e6:	8d 81       	ldd	r24, Y+5	; 0x05
    18e8:	9e 81       	ldd	r25, Y+6	; 0x06
    18ea:	9a 83       	std	Y+2, r25	; 0x02
    18ec:	89 83       	std	Y+1, r24	; 0x01
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	9a 81       	ldd	r25, Y+2	; 0x02
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_enuWriteNLatch+0x47e>
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

#else
#error "LCD Mode Configuration is wrong\n it must be EIGHT_BIT or FOUR_BIT"
#endif
	return Local_enuErrorState;
    18fa:	89 ad       	ldd	r24, Y+57	; 0x39
}
    18fc:	ea 96       	adiw	r28, 0x3a	; 58
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <Keypad_enuInit>:
#include "Keypad_priv.h"

#include <util/delay.h>

ES_t Keypad_enuInit(void)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState =ES_NOK;
    1918:	19 82       	std	Y+1, r1	; 0x01

	DIO_enuSetPinDirection(C1_GRP , C1_PIN , DIO_u8OUTPUT);
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	64 e0       	ldi	r22, 0x04	; 4
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_GRP , C2_PIN , DIO_u8OUTPUT);
    1924:	83 e0       	ldi	r24, 0x03	; 3
    1926:	65 e0       	ldi	r22, 0x05	; 5
    1928:	41 e0       	ldi	r20, 0x01	; 1
    192a:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_GRP , C3_PIN , DIO_u8OUTPUT);
    192e:	83 e0       	ldi	r24, 0x03	; 3
    1930:	66 e0       	ldi	r22, 0x06	; 6
    1932:	41 e0       	ldi	r20, 0x01	; 1
    1934:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_GRP , C4_PIN , DIO_u8OUTPUT);
    1938:	83 e0       	ldi	r24, 0x03	; 3
    193a:	67 e0       	ldi	r22, 0x07	; 7
    193c:	41 e0       	ldi	r20, 0x01	; 1
    193e:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_GRP , C1_PIN , DIO_u8HIGH);
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	64 e0       	ldi	r22, 0x04	; 4
    1946:	41 e0       	ldi	r20, 0x01	; 1
    1948:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_GRP , C2_PIN , DIO_u8HIGH);
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	65 e0       	ldi	r22, 0x05	; 5
    1950:	41 e0       	ldi	r20, 0x01	; 1
    1952:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_GRP , C3_PIN , DIO_u8HIGH);
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	66 e0       	ldi	r22, 0x06	; 6
    195a:	41 e0       	ldi	r20, 0x01	; 1
    195c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_GRP , C4_PIN , DIO_u8HIGH);
    1960:	83 e0       	ldi	r24, 0x03	; 3
    1962:	67 e0       	ldi	r22, 0x07	; 7
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>

	DIO_enuSetPinDirection(R1_GRP , R1_PIN , DIO_u8INPUT);
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_GRP , R2_PIN , DIO_u8INPUT);
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_GRP , R3_PIN , DIO_u8INPUT);
    197e:	81 e0       	ldi	r24, 0x01	; 1
    1980:	62 e0       	ldi	r22, 0x02	; 2
    1982:	40 e0       	ldi	r20, 0x00	; 0
    1984:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_GRP , R4_PIN , DIO_u8INPUT);
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	63 e0       	ldi	r22, 0x03	; 3
    198c:	40 e0       	ldi	r20, 0x00	; 0
    198e:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(R1_GRP , R1_PIN , DIO_u8PULL_UP);
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	60 e0       	ldi	r22, 0x00	; 0
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_GRP , R2_PIN , DIO_u8PULL_UP);
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	61 e0       	ldi	r22, 0x01	; 1
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_GRP , R3_PIN , DIO_u8PULL_UP);
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	62 e0       	ldi	r22, 0x02	; 2
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_GRP , R4_PIN , DIO_u8PULL_UP);
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	63 e0       	ldi	r22, 0x03	; 3
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>

	return Local_enuErrorState;
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    19bc:	0f 90       	pop	r0
    19be:	cf 91       	pop	r28
    19c0:	df 91       	pop	r29
    19c2:	08 95       	ret

000019c4 <Keypad_GetPressedKey>:

ES_t Keypad_GetPressedKey(u8 * Copy_pu8KeyValue)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	ea 97       	sbiw	r28, 0x3a	; 58
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	9d ab       	std	Y+53, r25	; 0x35
    19da:	8c ab       	std	Y+52, r24	; 0x34
	ES_t Local_enuErrorState =ES_NOK;
    19dc:	1a 8a       	std	Y+18, r1	; 0x12

	u8 Local_u8RowIter = 0;
    19de:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_u8ColIter = 0;
    19e0:	18 8a       	std	Y+16, r1	; 0x10

	u8 Local_Au8RowGrp[]={R1_GRP, R2_GRP, R3_GRP, R4_GRP};
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	8b 8b       	std	Y+19, r24	; 0x13
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	8c 8b       	std	Y+20, r24	; 0x14
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8d 8b       	std	Y+21, r24	; 0x15
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	8e 8b       	std	Y+22, r24	; 0x16
	u8 Local_Au8RowPin[]={R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    19f2:	1f 8a       	std	Y+23, r1	; 0x17
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	88 8f       	std	Y+24, r24	; 0x18
    19f8:	82 e0       	ldi	r24, 0x02	; 2
    19fa:	89 8f       	std	Y+25, r24	; 0x19
    19fc:	83 e0       	ldi	r24, 0x03	; 3
    19fe:	8a 8f       	std	Y+26, r24	; 0x1a

	u8 Local_Au8ColGrp[]={C1_GRP, C2_GRP, C3_GRP, C4_GRP};
    1a00:	83 e0       	ldi	r24, 0x03	; 3
    1a02:	8b 8f       	std	Y+27, r24	; 0x1b
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	8c 8f       	std	Y+28, r24	; 0x1c
    1a08:	83 e0       	ldi	r24, 0x03	; 3
    1a0a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a0c:	83 e0       	ldi	r24, 0x03	; 3
    1a0e:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_Au8ColPin[]={C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    1a10:	84 e0       	ldi	r24, 0x04	; 4
    1a12:	8f 8f       	std	Y+31, r24	; 0x1f
    1a14:	85 e0       	ldi	r24, 0x05	; 5
    1a16:	88 a3       	std	Y+32, r24	; 0x20
    1a18:	86 e0       	ldi	r24, 0x06	; 6
    1a1a:	89 a3       	std	Y+33, r24	; 0x21
    1a1c:	87 e0       	ldi	r24, 0x07	; 7
    1a1e:	8a a3       	std	Y+34, r24	; 0x22

	u8 Local_u8RowValue=96 , Local_u8Flag=0;
    1a20:	80 e6       	ldi	r24, 0x60	; 96
    1a22:	8b a3       	std	Y+35, r24	; 0x23
    1a24:	1f 86       	std	Y+15, r1	; 0x0f
    1a26:	3e c1       	rjmp	.+636    	; 0x1ca4 <Keypad_GetPressedKey+0x2e0>

	for (;Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
    1a28:	88 89       	ldd	r24, Y+16	; 0x10
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	ce 01       	movw	r24, r28
    1a30:	4b 96       	adiw	r24, 0x1b	; 27
    1a32:	fc 01       	movw	r30, r24
    1a34:	e2 0f       	add	r30, r18
    1a36:	f3 1f       	adc	r31, r19
    1a38:	40 81       	ld	r20, Z
    1a3a:	88 89       	ldd	r24, Y+16	; 0x10
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	ce 01       	movw	r24, r28
    1a42:	4f 96       	adiw	r24, 0x1f	; 31
    1a44:	fc 01       	movw	r30, r24
    1a46:	e2 0f       	add	r30, r18
    1a48:	f3 1f       	adc	r31, r19
    1a4a:	90 81       	ld	r25, Z
    1a4c:	84 2f       	mov	r24, r20
    1a4e:	69 2f       	mov	r22, r25
    1a50:	40 e0       	ldi	r20, 0x00	; 0
    1a52:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
			Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW   );

		for (Local_u8RowIter=0; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    1a56:	19 8a       	std	Y+17, r1	; 0x11
    1a58:	07 c1       	rjmp	.+526    	; 0x1c68 <Keypad_GetPressedKey+0x2a4>
		{
			DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
    1a5a:	89 89       	ldd	r24, Y+17	; 0x11
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	30 e0       	ldi	r19, 0x00	; 0
    1a60:	ce 01       	movw	r24, r28
    1a62:	43 96       	adiw	r24, 0x13	; 19
    1a64:	fc 01       	movw	r30, r24
    1a66:	e2 0f       	add	r30, r18
    1a68:	f3 1f       	adc	r31, r19
    1a6a:	40 81       	ld	r20, Z
    1a6c:	89 89       	ldd	r24, Y+17	; 0x11
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	ce 01       	movw	r24, r28
    1a74:	47 96       	adiw	r24, 0x17	; 23
    1a76:	fc 01       	movw	r30, r24
    1a78:	e2 0f       	add	r30, r18
    1a7a:	f3 1f       	adc	r31, r19
    1a7c:	90 81       	ld	r25, Z
    1a7e:	9e 01       	movw	r18, r28
    1a80:	2d 5d       	subi	r18, 0xDD	; 221
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	84 2f       	mov	r24, r20
    1a86:	69 2f       	mov	r22, r25
    1a88:	a9 01       	movw	r20, r18
    1a8a:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <DIO_enuGetPinValue>
					Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);
			if (! Local_u8RowValue)
    1a8e:	8b a1       	ldd	r24, Y+35	; 0x23
    1a90:	88 23       	and	r24, r24
    1a92:	09 f0       	breq	.+2      	; 0x1a96 <Keypad_GetPressedKey+0xd2>
    1a94:	e6 c0       	rjmp	.+460    	; 0x1c62 <Keypad_GetPressedKey+0x29e>
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a0 e8       	ldi	r26, 0x80	; 128
    1a9c:	bf e3       	ldi	r27, 0x3F	; 63
    1a9e:	8b 87       	std	Y+11, r24	; 0x0b
    1aa0:	9c 87       	std	Y+12, r25	; 0x0c
    1aa2:	ad 87       	std	Y+13, r26	; 0x0d
    1aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8f 83       	std	Y+7, r24	; 0x07
    1ac0:	98 87       	std	Y+8, r25	; 0x08
    1ac2:	a9 87       	std	Y+9, r26	; 0x09
    1ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac8:	78 85       	ldd	r23, Y+8	; 0x08
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <Keypad_GetPressedKey+0x124>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <Keypad_GetPressedKey+0x1a2>
	else if (__tmp > 65535)
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <Keypad_GetPressedKey+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <Keypad_GetPressedKey+0x184>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <Keypad_GetPressedKey+0x172>
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <Keypad_GetPressedKey+0x166>
    1b50:	14 c0       	rjmp	.+40     	; 0x1b7a <Keypad_GetPressedKey+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <Keypad_GetPressedKey+0x1ae>
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(1);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
    1b7a:	89 89       	ldd	r24, Y+17	; 0x11
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	ce 01       	movw	r24, r28
    1b82:	43 96       	adiw	r24, 0x13	; 19
    1b84:	fc 01       	movw	r30, r24
    1b86:	e2 0f       	add	r30, r18
    1b88:	f3 1f       	adc	r31, r19
    1b8a:	40 81       	ld	r20, Z
    1b8c:	89 89       	ldd	r24, Y+17	; 0x11
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	ce 01       	movw	r24, r28
    1b94:	47 96       	adiw	r24, 0x17	; 23
    1b96:	fc 01       	movw	r30, r24
    1b98:	e2 0f       	add	r30, r18
    1b9a:	f3 1f       	adc	r31, r19
    1b9c:	90 81       	ld	r25, Z
    1b9e:	9e 01       	movw	r18, r28
    1ba0:	2d 5d       	subi	r18, 0xDD	; 221
    1ba2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba4:	84 2f       	mov	r24, r20
    1ba6:	69 2f       	mov	r22, r25
    1ba8:	a9 01       	movw	r20, r18
    1baa:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <DIO_enuGetPinValue>
					Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);
				if (! Local_u8RowValue)
    1bae:	8b a1       	ldd	r24, Y+35	; 0x23
    1bb0:	88 23       	and	r24, r24
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <Keypad_GetPressedKey+0x1f2>
    1bb4:	56 c0       	rjmp	.+172    	; 0x1c62 <Keypad_GetPressedKey+0x29e>
    1bb6:	1a c0       	rjmp	.+52     	; 0x1bec <Keypad_GetPressedKey+0x228>
				{
					while (! Local_u8RowValue)
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
    1bb8:	89 89       	ldd	r24, Y+17	; 0x11
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	43 96       	adiw	r24, 0x13	; 19
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	e2 0f       	add	r30, r18
    1bc6:	f3 1f       	adc	r31, r19
    1bc8:	40 81       	ld	r20, Z
    1bca:	89 89       	ldd	r24, Y+17	; 0x11
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	47 96       	adiw	r24, 0x17	; 23
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	e2 0f       	add	r30, r18
    1bd8:	f3 1f       	adc	r31, r19
    1bda:	90 81       	ld	r25, Z
    1bdc:	9e 01       	movw	r18, r28
    1bde:	2d 5d       	subi	r18, 0xDD	; 221
    1be0:	3f 4f       	sbci	r19, 0xFF	; 255
    1be2:	84 2f       	mov	r24, r20
    1be4:	69 2f       	mov	r22, r25
    1be6:	a9 01       	movw	r20, r18
    1be8:	0e 94 c5 26 	call	0x4d8a	; 0x4d8a <DIO_enuGetPinValue>
				_delay_ms(1);
				DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
					Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);
				if (! Local_u8RowValue)
				{
					while (! Local_u8RowValue)
    1bec:	8b a1       	ldd	r24, Y+35	; 0x23
    1bee:	88 23       	and	r24, r24
    1bf0:	19 f3       	breq	.-58     	; 0x1bb8 <Keypad_GetPressedKey+0x1f4>
						DIO_enuGetPinValue(Local_Au8RowGrp[Local_u8RowIter],
							Local_Au8RowPin[Local_u8RowIter], &Local_u8RowValue);

					u8 Local_Au8KeyValues[ROW_NUM][COL_NUM] =KEYS_VALUES;
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	84 96       	adiw	r24, 0x24	; 36
    1bf6:	9f ab       	std	Y+55, r25	; 0x37
    1bf8:	8e ab       	std	Y+54, r24	; 0x36
    1bfa:	e1 ec       	ldi	r30, 0xC1	; 193
    1bfc:	f1 e0       	ldi	r31, 0x01	; 1
    1bfe:	f9 af       	std	Y+57, r31	; 0x39
    1c00:	e8 af       	std	Y+56, r30	; 0x38
    1c02:	f0 e1       	ldi	r31, 0x10	; 16
    1c04:	fa af       	std	Y+58, r31	; 0x3a
    1c06:	e8 ad       	ldd	r30, Y+56	; 0x38
    1c08:	f9 ad       	ldd	r31, Y+57	; 0x39
    1c0a:	00 80       	ld	r0, Z
    1c0c:	88 ad       	ldd	r24, Y+56	; 0x38
    1c0e:	99 ad       	ldd	r25, Y+57	; 0x39
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	99 af       	std	Y+57, r25	; 0x39
    1c14:	88 af       	std	Y+56, r24	; 0x38
    1c16:	ee a9       	ldd	r30, Y+54	; 0x36
    1c18:	ff a9       	ldd	r31, Y+55	; 0x37
    1c1a:	00 82       	st	Z, r0
    1c1c:	8e a9       	ldd	r24, Y+54	; 0x36
    1c1e:	9f a9       	ldd	r25, Y+55	; 0x37
    1c20:	01 96       	adiw	r24, 0x01	; 1
    1c22:	9f ab       	std	Y+55, r25	; 0x37
    1c24:	8e ab       	std	Y+54, r24	; 0x36
    1c26:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c28:	91 50       	subi	r25, 0x01	; 1
    1c2a:	9a af       	std	Y+58, r25	; 0x3a
    1c2c:	ea ad       	ldd	r30, Y+58	; 0x3a
    1c2e:	ee 23       	and	r30, r30
    1c30:	51 f7       	brne	.-44     	; 0x1c06 <Keypad_GetPressedKey+0x242>
					*Copy_pu8KeyValue = Local_Au8KeyValues[Local_u8RowIter][Local_u8ColIter];
    1c32:	89 89       	ldd	r24, Y+17	; 0x11
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	88 89       	ldd	r24, Y+16	; 0x10
    1c3a:	48 2f       	mov	r20, r24
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	22 0f       	add	r18, r18
    1c40:	33 1f       	adc	r19, r19
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	ce 01       	movw	r24, r28
    1c48:	01 96       	adiw	r24, 0x01	; 1
    1c4a:	82 0f       	add	r24, r18
    1c4c:	93 1f       	adc	r25, r19
    1c4e:	84 0f       	add	r24, r20
    1c50:	95 1f       	adc	r25, r21
    1c52:	fc 01       	movw	r30, r24
    1c54:	b3 96       	adiw	r30, 0x23	; 35
    1c56:	80 81       	ld	r24, Z
    1c58:	ec a9       	ldd	r30, Y+52	; 0x34
    1c5a:	fd a9       	ldd	r31, Y+53	; 0x35
    1c5c:	80 83       	st	Z, r24
					Local_u8Flag =1;
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	8f 87       	std	Y+15, r24	; 0x0f
	for (;Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
			Local_Au8ColPin[Local_u8ColIter], DIO_u8LOW   );

		for (Local_u8RowIter=0; Local_u8RowIter<ROW_NUM; Local_u8RowIter++)
    1c62:	89 89       	ldd	r24, Y+17	; 0x11
    1c64:	8f 5f       	subi	r24, 0xFF	; 255
    1c66:	89 8b       	std	Y+17, r24	; 0x11
    1c68:	89 89       	ldd	r24, Y+17	; 0x11
    1c6a:	84 30       	cpi	r24, 0x04	; 4
    1c6c:	08 f4       	brcc	.+2      	; 0x1c70 <Keypad_GetPressedKey+0x2ac>
    1c6e:	f5 ce       	rjmp	.-534    	; 0x1a5a <Keypad_GetPressedKey+0x96>
					Local_u8Flag =1;
				}
			}
		}

		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
    1c70:	88 89       	ldd	r24, Y+16	; 0x10
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	ce 01       	movw	r24, r28
    1c78:	4b 96       	adiw	r24, 0x1b	; 27
    1c7a:	fc 01       	movw	r30, r24
    1c7c:	e2 0f       	add	r30, r18
    1c7e:	f3 1f       	adc	r31, r19
    1c80:	40 81       	ld	r20, Z
    1c82:	88 89       	ldd	r24, Y+16	; 0x10
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	ce 01       	movw	r24, r28
    1c8a:	4f 96       	adiw	r24, 0x1f	; 31
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	e2 0f       	add	r30, r18
    1c90:	f3 1f       	adc	r31, r19
    1c92:	90 81       	ld	r25, Z
    1c94:	84 2f       	mov	r24, r20
    1c96:	69 2f       	mov	r22, r25
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	u8 Local_Au8ColGrp[]={C1_GRP, C2_GRP, C3_GRP, C4_GRP};
	u8 Local_Au8ColPin[]={C1_PIN, C2_PIN, C3_PIN, C4_PIN};

	u8 Local_u8RowValue=96 , Local_u8Flag=0;

	for (;Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    1c9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ca0:	8f 5f       	subi	r24, 0xFF	; 255
    1ca2:	88 8b       	std	Y+16, r24	; 0x10
    1ca4:	88 89       	ldd	r24, Y+16	; 0x10
    1ca6:	84 30       	cpi	r24, 0x04	; 4
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <Keypad_GetPressedKey+0x2e8>
    1caa:	be ce       	rjmp	.-644    	; 0x1a28 <Keypad_GetPressedKey+0x64>

		DIO_enuSetPinValue(Local_Au8ColGrp[Local_u8ColIter],
			Local_Au8ColPin[Local_u8ColIter], DIO_u8HIGH   );

	}
	if (! Local_u8Flag)
    1cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cae:	88 23       	and	r24, r24
    1cb0:	21 f4       	brne	.+8      	; 0x1cba <Keypad_GetPressedKey+0x2f6>
	{
		*Copy_pu8KeyValue = 0xff;
    1cb2:	ec a9       	ldd	r30, Y+52	; 0x34
    1cb4:	fd a9       	ldd	r31, Y+53	; 0x35
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	80 83       	st	Z, r24
	}


	return Local_enuErrorState;
    1cba:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1cbc:	ea 96       	adiw	r28, 0x3a	; 58
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	cf 91       	pop	r28
    1cca:	df 91       	pop	r29
    1ccc:	08 95       	ret

00001cce <GIE_enuInit>:
#include "../errorState.h"

#include "GIE_priv.h"

ES_t GIE_enuInit(void)
{
    1cce:	df 93       	push	r29
    1cd0:	cf 93       	push	r28
    1cd2:	cd b7       	in	r28, 0x3d	; 61
    1cd4:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    1cd6:	f8 94       	cli
	//SREG &=~ (1<<7);
	return ES_OK;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
}
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <GIE_enuEnable>:

ES_t GIE_enuEnable(void)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	asm("SEI");
    1ce8:	78 94       	sei
	//SREG |=  (1<<7);
	return ES_OK;
    1cea:	81 e0       	ldi	r24, 0x01	; 1
}
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	08 95       	ret

00001cf2 <GIE_enuDisable>:

ES_t GIE_enuDisable(void)
{
    1cf2:	df 93       	push	r29
    1cf4:	cf 93       	push	r28
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
	asm("CLI");
    1cfa:	f8 94       	cli
	//SREG &=~ (1<<7);
	return ES_OK;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	27 97       	sbiw	r28, 0x07	; 7
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	9d 83       	std	Y+5, r25	; 0x05
    1d1a:	8c 83       	std	Y+4, r24	; 0x04
    1d1c:	6e 83       	std	Y+6, r22	; 0x06
    1d1e:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    1d20:	8a e1       	ldi	r24, 0x1A	; 26
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pvPortMalloc>
    1d28:	9a 83       	std	Y+2, r25	; 0x02
    1d2a:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <xCoRoutineCreate+0x32>
    1d34:	6f c0       	rjmp	.+222    	; 0x1e14 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    1d36:	80 91 d2 01 	lds	r24, 0x01D2
    1d3a:	90 91 d3 01 	lds	r25, 0x01D3
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	41 f4       	brne	.+16     	; 0x1d52 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	90 93 d3 01 	sts	0x01D3, r25
    1d4a:	80 93 d2 01 	sts	0x01D2, r24
			prvInitialiseCoRoutineLists();
    1d4e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    1d52:	8e 81       	ldd	r24, Y+6	; 0x06
    1d54:	82 30       	cpi	r24, 0x02	; 2
    1d56:	10 f0       	brcs	.+4      	; 0x1d5c <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    1d5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d60:	11 8e       	std	Z+25, r1	; 0x19
    1d62:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    1d64:	e9 81       	ldd	r30, Y+1	; 0x01
    1d66:	fa 81       	ldd	r31, Y+2	; 0x02
    1d68:	8e 81       	ldd	r24, Y+6	; 0x06
    1d6a:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    1d6c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d6e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d70:	8f 81       	ldd	r24, Y+7	; 0x07
    1d72:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    1d74:	e9 81       	ldd	r30, Y+1	; 0x01
    1d76:	fa 81       	ldd	r31, Y+2	; 0x02
    1d78:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	02 96       	adiw	r24, 0x02	; 2
    1d86:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	0c 96       	adiw	r24, 0x0c	; 12
    1d90:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    1d94:	e9 81       	ldd	r30, Y+1	; 0x01
    1d96:	fa 81       	ldd	r31, Y+2	; 0x02
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	91 87       	std	Z+9, r25	; 0x09
    1d9e:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    1da0:	e9 81       	ldd	r30, Y+1	; 0x01
    1da2:	fa 81       	ldd	r31, Y+2	; 0x02
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	93 8b       	std	Z+19, r25	; 0x13
    1daa:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    1dac:	8e 81       	ldd	r24, Y+6	; 0x06
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	85 e0       	ldi	r24, 0x05	; 5
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	82 1b       	sub	r24, r18
    1db8:	93 0b       	sbc	r25, r19
    1dba:	e9 81       	ldd	r30, Y+1	; 0x01
    1dbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dbe:	95 87       	std	Z+13, r25	; 0x0d
    1dc0:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    1dc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dc6:	96 89       	ldd	r25, Z+22	; 0x16
    1dc8:	80 91 d4 01 	lds	r24, 0x01D4
    1dcc:	89 17       	cp	r24, r25
    1dce:	28 f4       	brcc	.+10     	; 0x1dda <xCoRoutineCreate+0xd6>
    1dd0:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd2:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd4:	86 89       	ldd	r24, Z+22	; 0x16
    1dd6:	80 93 d4 01 	sts	0x01D4, r24
    1dda:	e9 81       	ldd	r30, Y+1	; 0x01
    1ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dde:	86 89       	ldd	r24, Z+22	; 0x16
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	c9 01       	movw	r24, r18
    1de6:	88 0f       	add	r24, r24
    1de8:	99 1f       	adc	r25, r25
    1dea:	88 0f       	add	r24, r24
    1dec:	99 1f       	adc	r25, r25
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	82 0f       	add	r24, r18
    1df4:	93 1f       	adc	r25, r19
    1df6:	ac 01       	movw	r20, r24
    1df8:	45 52       	subi	r20, 0x25	; 37
    1dfa:	5e 4f       	sbci	r21, 0xFE	; 254
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	9c 01       	movw	r18, r24
    1e02:	2e 5f       	subi	r18, 0xFE	; 254
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	ca 01       	movw	r24, r20
    1e08:	b9 01       	movw	r22, r18
    1e0a:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>

		xReturn = pdPASS;
    1e0e:	81 e0       	ldi	r24, 0x01	; 1
    1e10:	8b 83       	std	Y+3, r24	; 0x03
    1e12:	02 c0       	rjmp	.+4      	; 0x1e18 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    1e14:	8f ef       	ldi	r24, 0xFF	; 255
    1e16:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1e1a:	27 96       	adiw	r28, 0x07	; 7
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <vCoRoutineAddToDelayedList+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <vCoRoutineAddToDelayedList+0x8>
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <vCoRoutineAddToDelayedList+0xa>
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	9c 83       	std	Y+4, r25	; 0x04
    1e3c:	8b 83       	std	Y+3, r24	; 0x03
    1e3e:	7e 83       	std	Y+6, r23	; 0x06
    1e40:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    1e42:	20 91 d5 01 	lds	r18, 0x01D5
    1e46:	30 91 d6 01 	lds	r19, 0x01D6
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	82 0f       	add	r24, r18
    1e50:	93 1f       	adc	r25, r19
    1e52:	9a 83       	std	Y+2, r25	; 0x02
    1e54:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1e56:	80 91 d2 01 	lds	r24, 0x01D2
    1e5a:	90 91 d3 01 	lds	r25, 0x01D3
    1e5e:	02 96       	adiw	r24, 0x02	; 2
    1e60:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    1e64:	e0 91 d2 01 	lds	r30, 0x01D2
    1e68:	f0 91 d3 01 	lds	r31, 0x01D3
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e70:	93 83       	std	Z+3, r25	; 0x03
    1e72:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    1e74:	20 91 d5 01 	lds	r18, 0x01D5
    1e78:	30 91 d6 01 	lds	r19, 0x01D6
    1e7c:	89 81       	ldd	r24, Y+1	; 0x01
    1e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e80:	82 17       	cp	r24, r18
    1e82:	93 07       	cpc	r25, r19
    1e84:	70 f4       	brcc	.+28     	; 0x1ea2 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1e86:	80 91 01 02 	lds	r24, 0x0201
    1e8a:	90 91 02 02 	lds	r25, 0x0202
    1e8e:	20 91 d2 01 	lds	r18, 0x01D2
    1e92:	30 91 d3 01 	lds	r19, 0x01D3
    1e96:	2e 5f       	subi	r18, 0xFE	; 254
    1e98:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	0e 94 4c 12 	call	0x2498	; 0x2498 <vListInsert>
    1ea0:	0d c0       	rjmp	.+26     	; 0x1ebc <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    1ea2:	80 91 ff 01 	lds	r24, 0x01FF
    1ea6:	90 91 00 02 	lds	r25, 0x0200
    1eaa:	20 91 d2 01 	lds	r18, 0x01D2
    1eae:	30 91 d3 01 	lds	r19, 0x01D3
    1eb2:	2e 5f       	subi	r18, 0xFE	; 254
    1eb4:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb6:	b9 01       	movw	r22, r18
    1eb8:	0e 94 4c 12 	call	0x2498	; 0x2498 <vListInsert>
	}

	if( pxEventList )
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	00 97       	sbiw	r24, 0x00	; 0
    1ec2:	61 f0       	breq	.+24     	; 0x1edc <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    1ec4:	80 91 d2 01 	lds	r24, 0x01D2
    1ec8:	90 91 d3 01 	lds	r25, 0x01D3
    1ecc:	9c 01       	movw	r18, r24
    1ece:	24 5f       	subi	r18, 0xF4	; 244
    1ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ed6:	b9 01       	movw	r22, r18
    1ed8:	0e 94 4c 12 	call	0x2498	; 0x2498 <vListInsert>
	}
}
    1edc:	26 96       	adiw	r28, 0x06	; 6
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <prvCheckPendingReadyList+0x6>
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
    1ef8:	3a c0       	rjmp	.+116    	; 0x1f6e <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    1efa:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    1efc:	e0 91 08 02 	lds	r30, 0x0208
    1f00:	f0 91 09 02 	lds	r31, 0x0209
    1f04:	86 81       	ldd	r24, Z+6	; 0x06
    1f06:	97 81       	ldd	r25, Z+7	; 0x07
    1f08:	9a 83       	std	Y+2, r25	; 0x02
    1f0a:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	0c 96       	adiw	r24, 0x0c	; 12
    1f12:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    1f16:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1c:	02 96       	adiw	r24, 0x02	; 2
    1f1e:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    1f22:	e9 81       	ldd	r30, Y+1	; 0x01
    1f24:	fa 81       	ldd	r31, Y+2	; 0x02
    1f26:	96 89       	ldd	r25, Z+22	; 0x16
    1f28:	80 91 d4 01 	lds	r24, 0x01D4
    1f2c:	89 17       	cp	r24, r25
    1f2e:	28 f4       	brcc	.+10     	; 0x1f3a <prvCheckPendingReadyList+0x4c>
    1f30:	e9 81       	ldd	r30, Y+1	; 0x01
    1f32:	fa 81       	ldd	r31, Y+2	; 0x02
    1f34:	86 89       	ldd	r24, Z+22	; 0x16
    1f36:	80 93 d4 01 	sts	0x01D4, r24
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	86 89       	ldd	r24, Z+22	; 0x16
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	c9 01       	movw	r24, r18
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	88 0f       	add	r24, r24
    1f4c:	99 1f       	adc	r25, r25
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	82 0f       	add	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	ac 01       	movw	r20, r24
    1f58:	45 52       	subi	r20, 0x25	; 37
    1f5a:	5e 4f       	sbci	r21, 0xFE	; 254
    1f5c:	89 81       	ldd	r24, Y+1	; 0x01
    1f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f60:	9c 01       	movw	r18, r24
    1f62:	2e 5f       	subi	r18, 0xFE	; 254
    1f64:	3f 4f       	sbci	r19, 0xFF	; 255
    1f66:	ca 01       	movw	r24, r20
    1f68:	b9 01       	movw	r22, r18
    1f6a:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    1f6e:	80 91 03 02 	lds	r24, 0x0203
    1f72:	88 23       	and	r24, r24
    1f74:	09 f0       	breq	.+2      	; 0x1f78 <prvCheckPendingReadyList+0x8a>
    1f76:	c1 cf       	rjmp	.-126    	; 0x1efa <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    1f78:	0f 90       	pop	r0
    1f7a:	0f 90       	pop	r0
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	00 d0       	rcall	.+0      	; 0x1f88 <prvCheckDelayedList+0x6>
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <prvCheckDelayedList+0x8>
    1f8a:	cd b7       	in	r28, 0x3d	; 61
    1f8c:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    1f8e:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <xTaskGetTickCount>
    1f92:	20 91 d7 01 	lds	r18, 0x01D7
    1f96:	30 91 d8 01 	lds	r19, 0x01D8
    1f9a:	82 1b       	sub	r24, r18
    1f9c:	93 0b       	sbc	r25, r19
    1f9e:	90 93 da 01 	sts	0x01DA, r25
    1fa2:	80 93 d9 01 	sts	0x01D9, r24
    1fa6:	85 c0       	rjmp	.+266    	; 0x20b2 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1fa8:	80 91 d5 01 	lds	r24, 0x01D5
    1fac:	90 91 d6 01 	lds	r25, 0x01D6
    1fb0:	01 96       	adiw	r24, 0x01	; 1
    1fb2:	90 93 d6 01 	sts	0x01D6, r25
    1fb6:	80 93 d5 01 	sts	0x01D5, r24
		xPassedTicks--;
    1fba:	80 91 d9 01 	lds	r24, 0x01D9
    1fbe:	90 91 da 01 	lds	r25, 0x01DA
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	90 93 da 01 	sts	0x01DA, r25
    1fc8:	80 93 d9 01 	sts	0x01D9, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    1fcc:	80 91 d5 01 	lds	r24, 0x01D5
    1fd0:	90 91 d6 01 	lds	r25, 0x01D6
    1fd4:	00 97       	sbiw	r24, 0x00	; 0
    1fd6:	09 f0       	breq	.+2      	; 0x1fda <prvCheckDelayedList+0x58>
    1fd8:	64 c0       	rjmp	.+200    	; 0x20a2 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1fda:	80 91 ff 01 	lds	r24, 0x01FF
    1fde:	90 91 00 02 	lds	r25, 0x0200
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1fe6:	80 91 01 02 	lds	r24, 0x0201
    1fea:	90 91 02 02 	lds	r25, 0x0202
    1fee:	90 93 00 02 	sts	0x0200, r25
    1ff2:	80 93 ff 01 	sts	0x01FF, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1ff6:	89 81       	ldd	r24, Y+1	; 0x01
    1ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffa:	90 93 02 02 	sts	0x0202, r25
    1ffe:	80 93 01 02 	sts	0x0201, r24
    2002:	4f c0       	rjmp	.+158    	; 0x20a2 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    2004:	e0 91 ff 01 	lds	r30, 0x01FF
    2008:	f0 91 00 02 	lds	r31, 0x0200
    200c:	05 80       	ldd	r0, Z+5	; 0x05
    200e:	f6 81       	ldd	r31, Z+6	; 0x06
    2010:	e0 2d       	mov	r30, r0
    2012:	86 81       	ldd	r24, Z+6	; 0x06
    2014:	97 81       	ldd	r25, Z+7	; 0x07
    2016:	9c 83       	std	Y+4, r25	; 0x04
    2018:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    201a:	eb 81       	ldd	r30, Y+3	; 0x03
    201c:	fc 81       	ldd	r31, Y+4	; 0x04
    201e:	22 81       	ldd	r18, Z+2	; 0x02
    2020:	33 81       	ldd	r19, Z+3	; 0x03
    2022:	80 91 d5 01 	lds	r24, 0x01D5
    2026:	90 91 d6 01 	lds	r25, 0x01D6
    202a:	82 17       	cp	r24, r18
    202c:	93 07       	cpc	r25, r19
    202e:	08 f4       	brcc	.+2      	; 0x2032 <prvCheckDelayedList+0xb0>
    2030:	40 c0       	rjmp	.+128    	; 0x20b2 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    2032:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	9c 81       	ldd	r25, Y+4	; 0x04
    2038:	02 96       	adiw	r24, 0x02	; 2
    203a:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    203e:	eb 81       	ldd	r30, Y+3	; 0x03
    2040:	fc 81       	ldd	r31, Y+4	; 0x04
    2042:	84 89       	ldd	r24, Z+20	; 0x14
    2044:	95 89       	ldd	r25, Z+21	; 0x15
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	29 f0       	breq	.+10     	; 0x2054 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    204a:	8b 81       	ldd	r24, Y+3	; 0x03
    204c:	9c 81       	ldd	r25, Y+4	; 0x04
    204e:	0c 96       	adiw	r24, 0x0c	; 12
    2050:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    2054:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    2056:	eb 81       	ldd	r30, Y+3	; 0x03
    2058:	fc 81       	ldd	r31, Y+4	; 0x04
    205a:	96 89       	ldd	r25, Z+22	; 0x16
    205c:	80 91 d4 01 	lds	r24, 0x01D4
    2060:	89 17       	cp	r24, r25
    2062:	28 f4       	brcc	.+10     	; 0x206e <prvCheckDelayedList+0xec>
    2064:	eb 81       	ldd	r30, Y+3	; 0x03
    2066:	fc 81       	ldd	r31, Y+4	; 0x04
    2068:	86 89       	ldd	r24, Z+22	; 0x16
    206a:	80 93 d4 01 	sts	0x01D4, r24
    206e:	eb 81       	ldd	r30, Y+3	; 0x03
    2070:	fc 81       	ldd	r31, Y+4	; 0x04
    2072:	86 89       	ldd	r24, Z+22	; 0x16
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	c9 01       	movw	r24, r18
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	82 0f       	add	r24, r18
    2088:	93 1f       	adc	r25, r19
    208a:	ac 01       	movw	r20, r24
    208c:	45 52       	subi	r20, 0x25	; 37
    208e:	5e 4f       	sbci	r21, 0xFE	; 254
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	9c 01       	movw	r18, r24
    2096:	2e 5f       	subi	r18, 0xFE	; 254
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	ca 01       	movw	r24, r20
    209c:	b9 01       	movw	r22, r18
    209e:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    20a2:	e0 91 ff 01 	lds	r30, 0x01FF
    20a6:	f0 91 00 02 	lds	r31, 0x0200
    20aa:	80 81       	ld	r24, Z
    20ac:	88 23       	and	r24, r24
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <prvCheckDelayedList+0x130>
    20b0:	a9 cf       	rjmp	.-174    	; 0x2004 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    20b2:	80 91 d9 01 	lds	r24, 0x01D9
    20b6:	90 91 da 01 	lds	r25, 0x01DA
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <prvCheckDelayedList+0x13e>
    20be:	74 cf       	rjmp	.-280    	; 0x1fa8 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    20c0:	80 91 d5 01 	lds	r24, 0x01D5
    20c4:	90 91 d6 01 	lds	r25, 0x01D6
    20c8:	90 93 d8 01 	sts	0x01D8, r25
    20cc:	80 93 d7 01 	sts	0x01D7, r24
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	cf 91       	pop	r28
    20da:	df 91       	pop	r29
    20dc:	08 95       	ret

000020de <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    20de:	df 93       	push	r29
    20e0:	cf 93       	push	r28
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <vCoRoutineSchedule+0x6>
    20e4:	cd b7       	in	r28, 0x3d	; 61
    20e6:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    20e8:	0e 94 77 0f 	call	0x1eee	; 0x1eee <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    20ec:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <prvCheckDelayedList>
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    20f2:	80 91 d4 01 	lds	r24, 0x01D4
    20f6:	88 23       	and	r24, r24
    20f8:	09 f4       	brne	.+2      	; 0x20fc <vCoRoutineSchedule+0x1e>
    20fa:	66 c0       	rjmp	.+204    	; 0x21c8 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    20fc:	80 91 d4 01 	lds	r24, 0x01D4
    2100:	81 50       	subi	r24, 0x01	; 1
    2102:	80 93 d4 01 	sts	0x01D4, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2106:	80 91 d4 01 	lds	r24, 0x01D4
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	c9 01       	movw	r24, r18
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	88 0f       	add	r24, r24
    2116:	99 1f       	adc	r25, r25
    2118:	88 0f       	add	r24, r24
    211a:	99 1f       	adc	r25, r25
    211c:	82 0f       	add	r24, r18
    211e:	93 1f       	adc	r25, r19
    2120:	fc 01       	movw	r30, r24
    2122:	e5 52       	subi	r30, 0x25	; 37
    2124:	fe 4f       	sbci	r31, 0xFE	; 254
    2126:	80 81       	ld	r24, Z
    2128:	88 23       	and	r24, r24
    212a:	19 f3       	breq	.-58     	; 0x20f2 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    212c:	80 91 d4 01 	lds	r24, 0x01D4
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	c9 01       	movw	r24, r18
    2136:	88 0f       	add	r24, r24
    2138:	99 1f       	adc	r25, r25
    213a:	88 0f       	add	r24, r24
    213c:	99 1f       	adc	r25, r25
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	82 0f       	add	r24, r18
    2144:	93 1f       	adc	r25, r19
    2146:	85 52       	subi	r24, 0x25	; 37
    2148:	9e 4f       	sbci	r25, 0xFE	; 254
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	e9 81       	ldd	r30, Y+1	; 0x01
    2150:	fa 81       	ldd	r31, Y+2	; 0x02
    2152:	01 80       	ldd	r0, Z+1	; 0x01
    2154:	f2 81       	ldd	r31, Z+2	; 0x02
    2156:	e0 2d       	mov	r30, r0
    2158:	82 81       	ldd	r24, Z+2	; 0x02
    215a:	93 81       	ldd	r25, Z+3	; 0x03
    215c:	e9 81       	ldd	r30, Y+1	; 0x01
    215e:	fa 81       	ldd	r31, Y+2	; 0x02
    2160:	92 83       	std	Z+2, r25	; 0x02
    2162:	81 83       	std	Z+1, r24	; 0x01
    2164:	e9 81       	ldd	r30, Y+1	; 0x01
    2166:	fa 81       	ldd	r31, Y+2	; 0x02
    2168:	21 81       	ldd	r18, Z+1	; 0x01
    216a:	32 81       	ldd	r19, Z+2	; 0x02
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	03 96       	adiw	r24, 0x03	; 3
    2172:	28 17       	cp	r18, r24
    2174:	39 07       	cpc	r19, r25
    2176:	59 f4       	brne	.+22     	; 0x218e <vCoRoutineSchedule+0xb0>
    2178:	e9 81       	ldd	r30, Y+1	; 0x01
    217a:	fa 81       	ldd	r31, Y+2	; 0x02
    217c:	01 80       	ldd	r0, Z+1	; 0x01
    217e:	f2 81       	ldd	r31, Z+2	; 0x02
    2180:	e0 2d       	mov	r30, r0
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	e9 81       	ldd	r30, Y+1	; 0x01
    2188:	fa 81       	ldd	r31, Y+2	; 0x02
    218a:	92 83       	std	Z+2, r25	; 0x02
    218c:	81 83       	std	Z+1, r24	; 0x01
    218e:	e9 81       	ldd	r30, Y+1	; 0x01
    2190:	fa 81       	ldd	r31, Y+2	; 0x02
    2192:	01 80       	ldd	r0, Z+1	; 0x01
    2194:	f2 81       	ldd	r31, Z+2	; 0x02
    2196:	e0 2d       	mov	r30, r0
    2198:	86 81       	ldd	r24, Z+6	; 0x06
    219a:	97 81       	ldd	r25, Z+7	; 0x07
    219c:	90 93 d3 01 	sts	0x01D3, r25
    21a0:	80 93 d2 01 	sts	0x01D2, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    21a4:	e0 91 d2 01 	lds	r30, 0x01D2
    21a8:	f0 91 d3 01 	lds	r31, 0x01D3
    21ac:	40 81       	ld	r20, Z
    21ae:	51 81       	ldd	r21, Z+1	; 0x01
    21b0:	80 91 d2 01 	lds	r24, 0x01D2
    21b4:	90 91 d3 01 	lds	r25, 0x01D3
    21b8:	e0 91 d2 01 	lds	r30, 0x01D2
    21bc:	f0 91 d3 01 	lds	r31, 0x01D3
    21c0:	27 89       	ldd	r18, Z+23	; 0x17
    21c2:	62 2f       	mov	r22, r18
    21c4:	fa 01       	movw	r30, r20
    21c6:	09 95       	icall

	return;
}
    21c8:	0f 90       	pop	r0
    21ca:	0f 90       	pop	r0
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	0f 92       	push	r0
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	13 c0       	rjmp	.+38     	; 0x2206 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    21e0:	89 81       	ldd	r24, Y+1	; 0x01
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	c9 01       	movw	r24, r18
    21e8:	88 0f       	add	r24, r24
    21ea:	99 1f       	adc	r25, r25
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	82 0f       	add	r24, r18
    21f6:	93 1f       	adc	r25, r19
    21f8:	85 52       	subi	r24, 0x25	; 37
    21fa:	9e 4f       	sbci	r25, 0xFE	; 254
    21fc:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	8f 5f       	subi	r24, 0xFF	; 255
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	89 81       	ldd	r24, Y+1	; 0x01
    2208:	82 30       	cpi	r24, 0x02	; 2
    220a:	50 f3       	brcs	.-44     	; 0x21e0 <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    220c:	8d ee       	ldi	r24, 0xED	; 237
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2214:	86 ef       	ldi	r24, 0xF6	; 246
    2216:	91 e0       	ldi	r25, 0x01	; 1
    2218:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    221c:	83 e0       	ldi	r24, 0x03	; 3
    221e:	92 e0       	ldi	r25, 0x02	; 2
    2220:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2224:	8d ee       	ldi	r24, 0xED	; 237
    2226:	91 e0       	ldi	r25, 0x01	; 1
    2228:	90 93 00 02 	sts	0x0200, r25
    222c:	80 93 ff 01 	sts	0x01FF, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2230:	86 ef       	ldi	r24, 0xF6	; 246
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	90 93 02 02 	sts	0x0202, r25
    2238:	80 93 01 02 	sts	0x0201, r24
}
    223c:	0f 90       	pop	r0
    223e:	cf 91       	pop	r28
    2240:	df 91       	pop	r29
    2242:	08 95       	ret

00002244 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2244:	df 93       	push	r29
    2246:	cf 93       	push	r28
    2248:	00 d0       	rcall	.+0      	; 0x224a <xCoRoutineRemoveFromEventList+0x6>
    224a:	00 d0       	rcall	.+0      	; 0x224c <xCoRoutineRemoveFromEventList+0x8>
    224c:	0f 92       	push	r0
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	9d 83       	std	Y+5, r25	; 0x05
    2254:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2256:	ec 81       	ldd	r30, Y+4	; 0x04
    2258:	fd 81       	ldd	r31, Y+5	; 0x05
    225a:	05 80       	ldd	r0, Z+5	; 0x05
    225c:	f6 81       	ldd	r31, Z+6	; 0x06
    225e:	e0 2d       	mov	r30, r0
    2260:	86 81       	ldd	r24, Z+6	; 0x06
    2262:	97 81       	ldd	r25, Z+7	; 0x07
    2264:	9b 83       	std	Y+3, r25	; 0x03
    2266:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2268:	8a 81       	ldd	r24, Y+2	; 0x02
    226a:	9b 81       	ldd	r25, Y+3	; 0x03
    226c:	0c 96       	adiw	r24, 0x0c	; 12
    226e:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2272:	8a 81       	ldd	r24, Y+2	; 0x02
    2274:	9b 81       	ldd	r25, Y+3	; 0x03
    2276:	9c 01       	movw	r18, r24
    2278:	24 5f       	subi	r18, 0xF4	; 244
    227a:	3f 4f       	sbci	r19, 0xFF	; 255
    227c:	83 e0       	ldi	r24, 0x03	; 3
    227e:	92 e0       	ldi	r25, 0x02	; 2
    2280:	b9 01       	movw	r22, r18
    2282:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2286:	ea 81       	ldd	r30, Y+2	; 0x02
    2288:	fb 81       	ldd	r31, Y+3	; 0x03
    228a:	96 89       	ldd	r25, Z+22	; 0x16
    228c:	e0 91 d2 01 	lds	r30, 0x01D2
    2290:	f0 91 d3 01 	lds	r31, 0x01D3
    2294:	86 89       	ldd	r24, Z+22	; 0x16
    2296:	98 17       	cp	r25, r24
    2298:	18 f0       	brcs	.+6      	; 0x22a0 <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	89 83       	std	Y+1, r24	; 0x01
    229e:	01 c0       	rjmp	.+2      	; 0x22a2 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    22a0:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <pvPortMalloc+0x6>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <pvPortMalloc+0x8>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    22c4:	1a 82       	std	Y+2, r1	; 0x02
    22c6:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    22c8:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    22cc:	80 91 0c 02 	lds	r24, 0x020C
    22d0:	90 91 0d 02 	lds	r25, 0x020D
    22d4:	2b 81       	ldd	r18, Y+3	; 0x03
    22d6:	3c 81       	ldd	r19, Y+4	; 0x04
    22d8:	82 0f       	add	r24, r18
    22da:	93 1f       	adc	r25, r19
    22dc:	24 e0       	ldi	r18, 0x04	; 4
    22de:	80 3b       	cpi	r24, 0xB0	; 176
    22e0:	92 07       	cpc	r25, r18
    22e2:	18 f5       	brcc	.+70     	; 0x232a <pvPortMalloc+0x76>
    22e4:	20 91 0c 02 	lds	r18, 0x020C
    22e8:	30 91 0d 02 	lds	r19, 0x020D
    22ec:	8b 81       	ldd	r24, Y+3	; 0x03
    22ee:	9c 81       	ldd	r25, Y+4	; 0x04
    22f0:	28 0f       	add	r18, r24
    22f2:	39 1f       	adc	r19, r25
    22f4:	80 91 0c 02 	lds	r24, 0x020C
    22f8:	90 91 0d 02 	lds	r25, 0x020D
    22fc:	82 17       	cp	r24, r18
    22fe:	93 07       	cpc	r25, r19
    2300:	a0 f4       	brcc	.+40     	; 0x232a <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2302:	80 91 0c 02 	lds	r24, 0x020C
    2306:	90 91 0d 02 	lds	r25, 0x020D
    230a:	82 5f       	subi	r24, 0xF2	; 242
    230c:	9d 4f       	sbci	r25, 0xFD	; 253
    230e:	9a 83       	std	Y+2, r25	; 0x02
    2310:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    2312:	20 91 0c 02 	lds	r18, 0x020C
    2316:	30 91 0d 02 	lds	r19, 0x020D
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	82 0f       	add	r24, r18
    2320:	93 1f       	adc	r25, r19
    2322:	90 93 0d 02 	sts	0x020D, r25
    2326:	80 93 0c 02 	sts	0x020C, r24
		}	
	}
	xTaskResumeAll();
    232a:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2332:	0f 90       	pop	r0
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	08 95       	ret

00002340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2340:	df 93       	push	r29
    2342:	cf 93       	push	r28
    2344:	00 d0       	rcall	.+0      	; 0x2346 <vPortFree+0x6>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    234e:	0f 90       	pop	r0
    2350:	0f 90       	pop	r0
    2352:	cf 91       	pop	r28
    2354:	df 91       	pop	r29
    2356:	08 95       	ret

00002358 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2358:	df 93       	push	r29
    235a:	cf 93       	push	r28
    235c:	cd b7       	in	r28, 0x3d	; 61
    235e:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2360:	10 92 0d 02 	sts	0x020D, r1
    2364:	10 92 0c 02 	sts	0x020C, r1
}
    2368:	cf 91       	pop	r28
    236a:	df 91       	pop	r29
    236c:	08 95       	ret

0000236e <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    236e:	df 93       	push	r29
    2370:	cf 93       	push	r28
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    2376:	20 91 0c 02 	lds	r18, 0x020C
    237a:	30 91 0d 02 	lds	r19, 0x020D
    237e:	80 eb       	ldi	r24, 0xB0	; 176
    2380:	94 e0       	ldi	r25, 0x04	; 4
    2382:	82 1b       	sub	r24, r18
    2384:	93 0b       	sbc	r25, r19
}
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	08 95       	ret

0000238c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    238c:	df 93       	push	r29
    238e:	cf 93       	push	r28
    2390:	00 d0       	rcall	.+0      	; 0x2392 <vListInitialise+0x6>
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	9a 83       	std	Y+2, r25	; 0x02
    2398:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	03 96       	adiw	r24, 0x03	; 3
    23a0:	e9 81       	ldd	r30, Y+1	; 0x01
    23a2:	fa 81       	ldd	r31, Y+2	; 0x02
    23a4:	92 83       	std	Z+2, r25	; 0x02
    23a6:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    23a8:	e9 81       	ldd	r30, Y+1	; 0x01
    23aa:	fa 81       	ldd	r31, Y+2	; 0x02
    23ac:	8f ef       	ldi	r24, 0xFF	; 255
    23ae:	9f ef       	ldi	r25, 0xFF	; 255
    23b0:	94 83       	std	Z+4, r25	; 0x04
    23b2:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	03 96       	adiw	r24, 0x03	; 3
    23ba:	e9 81       	ldd	r30, Y+1	; 0x01
    23bc:	fa 81       	ldd	r31, Y+2	; 0x02
    23be:	96 83       	std	Z+6, r25	; 0x06
    23c0:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	9a 81       	ldd	r25, Y+2	; 0x02
    23c6:	03 96       	adiw	r24, 0x03	; 3
    23c8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ca:	fa 81       	ldd	r31, Y+2	; 0x02
    23cc:	90 87       	std	Z+8, r25	; 0x08
    23ce:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    23d0:	e9 81       	ldd	r30, Y+1	; 0x01
    23d2:	fa 81       	ldd	r31, Y+2	; 0x02
    23d4:	10 82       	st	Z, r1
}
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	cf 91       	pop	r28
    23dc:	df 91       	pop	r29
    23de:	08 95       	ret

000023e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    23e0:	df 93       	push	r29
    23e2:	cf 93       	push	r28
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <vListInitialiseItem+0x6>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	9a 83       	std	Y+2, r25	; 0x02
    23ec:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    23ee:	e9 81       	ldd	r30, Y+1	; 0x01
    23f0:	fa 81       	ldd	r31, Y+2	; 0x02
    23f2:	11 86       	std	Z+9, r1	; 0x09
    23f4:	10 86       	std	Z+8, r1	; 0x08
}
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	00 d0       	rcall	.+0      	; 0x2406 <vListInsertEnd+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <vListInsertEnd+0x8>
    2408:	00 d0       	rcall	.+0      	; 0x240a <vListInsertEnd+0xa>
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	9c 83       	std	Y+4, r25	; 0x04
    2410:	8b 83       	std	Y+3, r24	; 0x03
    2412:	7e 83       	std	Y+6, r23	; 0x06
    2414:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2416:	eb 81       	ldd	r30, Y+3	; 0x03
    2418:	fc 81       	ldd	r31, Y+4	; 0x04
    241a:	81 81       	ldd	r24, Z+1	; 0x01
    241c:	92 81       	ldd	r25, Z+2	; 0x02
    241e:	9a 83       	std	Y+2, r25	; 0x02
    2420:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    2422:	e9 81       	ldd	r30, Y+1	; 0x01
    2424:	fa 81       	ldd	r31, Y+2	; 0x02
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	ed 81       	ldd	r30, Y+5	; 0x05
    242c:	fe 81       	ldd	r31, Y+6	; 0x06
    242e:	93 83       	std	Z+3, r25	; 0x03
    2430:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2432:	eb 81       	ldd	r30, Y+3	; 0x03
    2434:	fc 81       	ldd	r31, Y+4	; 0x04
    2436:	81 81       	ldd	r24, Z+1	; 0x01
    2438:	92 81       	ldd	r25, Z+2	; 0x02
    243a:	ed 81       	ldd	r30, Y+5	; 0x05
    243c:	fe 81       	ldd	r31, Y+6	; 0x06
    243e:	95 83       	std	Z+5, r25	; 0x05
    2440:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2442:	e9 81       	ldd	r30, Y+1	; 0x01
    2444:	fa 81       	ldd	r31, Y+2	; 0x02
    2446:	02 80       	ldd	r0, Z+2	; 0x02
    2448:	f3 81       	ldd	r31, Z+3	; 0x03
    244a:	e0 2d       	mov	r30, r0
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	95 83       	std	Z+5, r25	; 0x05
    2452:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2454:	8d 81       	ldd	r24, Y+5	; 0x05
    2456:	9e 81       	ldd	r25, Y+6	; 0x06
    2458:	e9 81       	ldd	r30, Y+1	; 0x01
    245a:	fa 81       	ldd	r31, Y+2	; 0x02
    245c:	93 83       	std	Z+3, r25	; 0x03
    245e:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	eb 81       	ldd	r30, Y+3	; 0x03
    2466:	fc 81       	ldd	r31, Y+4	; 0x04
    2468:	92 83       	std	Z+2, r25	; 0x02
    246a:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    246c:	ed 81       	ldd	r30, Y+5	; 0x05
    246e:	fe 81       	ldd	r31, Y+6	; 0x06
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	91 87       	std	Z+9, r25	; 0x09
    2476:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2478:	eb 81       	ldd	r30, Y+3	; 0x03
    247a:	fc 81       	ldd	r31, Y+4	; 0x04
    247c:	80 81       	ld	r24, Z
    247e:	8f 5f       	subi	r24, 0xFF	; 255
    2480:	eb 81       	ldd	r30, Y+3	; 0x03
    2482:	fc 81       	ldd	r31, Y+4	; 0x04
    2484:	80 83       	st	Z, r24
}
    2486:	26 96       	adiw	r28, 0x06	; 6
    2488:	0f b6       	in	r0, 0x3f	; 63
    248a:	f8 94       	cli
    248c:	de bf       	out	0x3e, r29	; 62
    248e:	0f be       	out	0x3f, r0	; 63
    2490:	cd bf       	out	0x3d, r28	; 61
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	cd b7       	in	r28, 0x3d	; 61
    249e:	de b7       	in	r29, 0x3e	; 62
    24a0:	28 97       	sbiw	r28, 0x08	; 8
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	9e 83       	std	Y+6, r25	; 0x06
    24ae:	8d 83       	std	Y+5, r24	; 0x05
    24b0:	78 87       	std	Y+8, r23	; 0x08
    24b2:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    24b4:	ef 81       	ldd	r30, Y+7	; 0x07
    24b6:	f8 85       	ldd	r31, Y+8	; 0x08
    24b8:	80 81       	ld	r24, Z
    24ba:	91 81       	ldd	r25, Z+1	; 0x01
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    24c0:	89 81       	ldd	r24, Y+1	; 0x01
    24c2:	9a 81       	ldd	r25, Y+2	; 0x02
    24c4:	2f ef       	ldi	r18, 0xFF	; 255
    24c6:	8f 3f       	cpi	r24, 0xFF	; 255
    24c8:	92 07       	cpc	r25, r18
    24ca:	39 f4       	brne	.+14     	; 0x24da <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    24cc:	ed 81       	ldd	r30, Y+5	; 0x05
    24ce:	fe 81       	ldd	r31, Y+6	; 0x06
    24d0:	87 81       	ldd	r24, Z+7	; 0x07
    24d2:	90 85       	ldd	r25, Z+8	; 0x08
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	8b 83       	std	Y+3, r24	; 0x03
    24d8:	18 c0       	rjmp	.+48     	; 0x250a <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	03 96       	adiw	r24, 0x03	; 3
    24e0:	9c 83       	std	Y+4, r25	; 0x04
    24e2:	8b 83       	std	Y+3, r24	; 0x03
    24e4:	06 c0       	rjmp	.+12     	; 0x24f2 <vListInsert+0x5a>
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	82 81       	ldd	r24, Z+2	; 0x02
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	9c 83       	std	Y+4, r25	; 0x04
    24f0:	8b 83       	std	Y+3, r24	; 0x03
    24f2:	eb 81       	ldd	r30, Y+3	; 0x03
    24f4:	fc 81       	ldd	r31, Y+4	; 0x04
    24f6:	02 80       	ldd	r0, Z+2	; 0x02
    24f8:	f3 81       	ldd	r31, Z+3	; 0x03
    24fa:	e0 2d       	mov	r30, r0
    24fc:	20 81       	ld	r18, Z
    24fe:	31 81       	ldd	r19, Z+1	; 0x01
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	82 17       	cp	r24, r18
    2506:	93 07       	cpc	r25, r19
    2508:	70 f7       	brcc	.-36     	; 0x24e6 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    250a:	eb 81       	ldd	r30, Y+3	; 0x03
    250c:	fc 81       	ldd	r31, Y+4	; 0x04
    250e:	82 81       	ldd	r24, Z+2	; 0x02
    2510:	93 81       	ldd	r25, Z+3	; 0x03
    2512:	ef 81       	ldd	r30, Y+7	; 0x07
    2514:	f8 85       	ldd	r31, Y+8	; 0x08
    2516:	93 83       	std	Z+3, r25	; 0x03
    2518:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    251a:	ef 81       	ldd	r30, Y+7	; 0x07
    251c:	f8 85       	ldd	r31, Y+8	; 0x08
    251e:	02 80       	ldd	r0, Z+2	; 0x02
    2520:	f3 81       	ldd	r31, Z+3	; 0x03
    2522:	e0 2d       	mov	r30, r0
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
    2526:	98 85       	ldd	r25, Y+8	; 0x08
    2528:	95 83       	std	Z+5, r25	; 0x05
    252a:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    252c:	ef 81       	ldd	r30, Y+7	; 0x07
    252e:	f8 85       	ldd	r31, Y+8	; 0x08
    2530:	8b 81       	ldd	r24, Y+3	; 0x03
    2532:	9c 81       	ldd	r25, Y+4	; 0x04
    2534:	95 83       	std	Z+5, r25	; 0x05
    2536:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2538:	8f 81       	ldd	r24, Y+7	; 0x07
    253a:	98 85       	ldd	r25, Y+8	; 0x08
    253c:	eb 81       	ldd	r30, Y+3	; 0x03
    253e:	fc 81       	ldd	r31, Y+4	; 0x04
    2540:	93 83       	std	Z+3, r25	; 0x03
    2542:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2544:	ef 81       	ldd	r30, Y+7	; 0x07
    2546:	f8 85       	ldd	r31, Y+8	; 0x08
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	9e 81       	ldd	r25, Y+6	; 0x06
    254c:	91 87       	std	Z+9, r25	; 0x09
    254e:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2550:	ed 81       	ldd	r30, Y+5	; 0x05
    2552:	fe 81       	ldd	r31, Y+6	; 0x06
    2554:	80 81       	ld	r24, Z
    2556:	8f 5f       	subi	r24, 0xFF	; 255
    2558:	ed 81       	ldd	r30, Y+5	; 0x05
    255a:	fe 81       	ldd	r31, Y+6	; 0x06
    255c:	80 83       	st	Z, r24
}
    255e:	28 96       	adiw	r28, 0x08	; 8
    2560:	0f b6       	in	r0, 0x3f	; 63
    2562:	f8 94       	cli
    2564:	de bf       	out	0x3e, r29	; 62
    2566:	0f be       	out	0x3f, r0	; 63
    2568:	cd bf       	out	0x3d, r28	; 61
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	00 d0       	rcall	.+0      	; 0x2576 <vListRemove+0x6>
    2576:	00 d0       	rcall	.+0      	; 0x2578 <vListRemove+0x8>
    2578:	cd b7       	in	r28, 0x3d	; 61
    257a:	de b7       	in	r29, 0x3e	; 62
    257c:	9c 83       	std	Y+4, r25	; 0x04
    257e:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2580:	eb 81       	ldd	r30, Y+3	; 0x03
    2582:	fc 81       	ldd	r31, Y+4	; 0x04
    2584:	a2 81       	ldd	r26, Z+2	; 0x02
    2586:	b3 81       	ldd	r27, Z+3	; 0x03
    2588:	eb 81       	ldd	r30, Y+3	; 0x03
    258a:	fc 81       	ldd	r31, Y+4	; 0x04
    258c:	84 81       	ldd	r24, Z+4	; 0x04
    258e:	95 81       	ldd	r25, Z+5	; 0x05
    2590:	15 96       	adiw	r26, 0x05	; 5
    2592:	9c 93       	st	X, r25
    2594:	8e 93       	st	-X, r24
    2596:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2598:	eb 81       	ldd	r30, Y+3	; 0x03
    259a:	fc 81       	ldd	r31, Y+4	; 0x04
    259c:	a4 81       	ldd	r26, Z+4	; 0x04
    259e:	b5 81       	ldd	r27, Z+5	; 0x05
    25a0:	eb 81       	ldd	r30, Y+3	; 0x03
    25a2:	fc 81       	ldd	r31, Y+4	; 0x04
    25a4:	82 81       	ldd	r24, Z+2	; 0x02
    25a6:	93 81       	ldd	r25, Z+3	; 0x03
    25a8:	13 96       	adiw	r26, 0x03	; 3
    25aa:	9c 93       	st	X, r25
    25ac:	8e 93       	st	-X, r24
    25ae:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    25b0:	eb 81       	ldd	r30, Y+3	; 0x03
    25b2:	fc 81       	ldd	r31, Y+4	; 0x04
    25b4:	80 85       	ldd	r24, Z+8	; 0x08
    25b6:	91 85       	ldd	r25, Z+9	; 0x09
    25b8:	9a 83       	std	Y+2, r25	; 0x02
    25ba:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    25bc:	e9 81       	ldd	r30, Y+1	; 0x01
    25be:	fa 81       	ldd	r31, Y+2	; 0x02
    25c0:	21 81       	ldd	r18, Z+1	; 0x01
    25c2:	32 81       	ldd	r19, Z+2	; 0x02
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	28 17       	cp	r18, r24
    25ca:	39 07       	cpc	r19, r25
    25cc:	41 f4       	brne	.+16     	; 0x25de <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    25ce:	eb 81       	ldd	r30, Y+3	; 0x03
    25d0:	fc 81       	ldd	r31, Y+4	; 0x04
    25d2:	84 81       	ldd	r24, Z+4	; 0x04
    25d4:	95 81       	ldd	r25, Z+5	; 0x05
    25d6:	e9 81       	ldd	r30, Y+1	; 0x01
    25d8:	fa 81       	ldd	r31, Y+2	; 0x02
    25da:	92 83       	std	Z+2, r25	; 0x02
    25dc:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    25de:	eb 81       	ldd	r30, Y+3	; 0x03
    25e0:	fc 81       	ldd	r31, Y+4	; 0x04
    25e2:	11 86       	std	Z+9, r1	; 0x09
    25e4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    25e6:	e9 81       	ldd	r30, Y+1	; 0x01
    25e8:	fa 81       	ldd	r31, Y+2	; 0x02
    25ea:	80 81       	ld	r24, Z
    25ec:	81 50       	subi	r24, 0x01	; 1
    25ee:	e9 81       	ldd	r30, Y+1	; 0x01
    25f0:	fa 81       	ldd	r31, Y+2	; 0x02
    25f2:	80 83       	st	Z, r24
}
    25f4:	0f 90       	pop	r0
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	08 95       	ret

00002602 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2602:	df 93       	push	r29
    2604:	cf 93       	push	r28
    2606:	cd b7       	in	r28, 0x3d	; 61
    2608:	de b7       	in	r29, 0x3e	; 62
    260a:	28 97       	sbiw	r28, 0x08	; 8
    260c:	0f b6       	in	r0, 0x3f	; 63
    260e:	f8 94       	cli
    2610:	de bf       	out	0x3e, r29	; 62
    2612:	0f be       	out	0x3f, r0	; 63
    2614:	cd bf       	out	0x3d, r28	; 61
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	7e 83       	std	Y+6, r23	; 0x06
    261c:	6d 83       	std	Y+5, r22	; 0x05
    261e:	58 87       	std	Y+8, r21	; 0x08
    2620:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2622:	eb 81       	ldd	r30, Y+3	; 0x03
    2624:	fc 81       	ldd	r31, Y+4	; 0x04
    2626:	81 e1       	ldi	r24, 0x11	; 17
    2628:	80 83       	st	Z, r24
	pxTopOfStack--;
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9c 83       	std	Y+4, r25	; 0x04
    2632:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2634:	eb 81       	ldd	r30, Y+3	; 0x03
    2636:	fc 81       	ldd	r31, Y+4	; 0x04
    2638:	82 e2       	ldi	r24, 0x22	; 34
    263a:	80 83       	st	Z, r24
	pxTopOfStack--;
    263c:	8b 81       	ldd	r24, Y+3	; 0x03
    263e:	9c 81       	ldd	r25, Y+4	; 0x04
    2640:	01 97       	sbiw	r24, 0x01	; 1
    2642:	9c 83       	std	Y+4, r25	; 0x04
    2644:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2646:	eb 81       	ldd	r30, Y+3	; 0x03
    2648:	fc 81       	ldd	r31, Y+4	; 0x04
    264a:	83 e3       	ldi	r24, 0x33	; 51
    264c:	80 83       	st	Z, r24
	pxTopOfStack--;
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	9c 83       	std	Y+4, r25	; 0x04
    2656:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    2658:	8d 81       	ldd	r24, Y+5	; 0x05
    265a:	9e 81       	ldd	r25, Y+6	; 0x06
    265c:	9a 83       	std	Y+2, r25	; 0x02
    265e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2660:	89 81       	ldd	r24, Y+1	; 0x01
    2662:	eb 81       	ldd	r30, Y+3	; 0x03
    2664:	fc 81       	ldd	r31, Y+4	; 0x04
    2666:	80 83       	st	Z, r24
	pxTopOfStack--;
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	9c 83       	std	Y+4, r25	; 0x04
    2670:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	89 2f       	mov	r24, r25
    2678:	99 27       	eor	r25, r25
    267a:	9a 83       	std	Y+2, r25	; 0x02
    267c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    267e:	89 81       	ldd	r24, Y+1	; 0x01
    2680:	eb 81       	ldd	r30, Y+3	; 0x03
    2682:	fc 81       	ldd	r31, Y+4	; 0x04
    2684:	80 83       	st	Z, r24
	pxTopOfStack--;
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2690:	eb 81       	ldd	r30, Y+3	; 0x03
    2692:	fc 81       	ldd	r31, Y+4	; 0x04
    2694:	10 82       	st	Z, r1
	pxTopOfStack--;
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	01 97       	sbiw	r24, 0x01	; 1
    269c:	9c 83       	std	Y+4, r25	; 0x04
    269e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    26a0:	eb 81       	ldd	r30, Y+3	; 0x03
    26a2:	fc 81       	ldd	r31, Y+4	; 0x04
    26a4:	80 e8       	ldi	r24, 0x80	; 128
    26a6:	80 83       	st	Z, r24
	pxTopOfStack--;
    26a8:	8b 81       	ldd	r24, Y+3	; 0x03
    26aa:	9c 81       	ldd	r25, Y+4	; 0x04
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9c 83       	std	Y+4, r25	; 0x04
    26b0:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    26b2:	eb 81       	ldd	r30, Y+3	; 0x03
    26b4:	fc 81       	ldd	r31, Y+4	; 0x04
    26b6:	10 82       	st	Z, r1
	pxTopOfStack--;
    26b8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ba:	9c 81       	ldd	r25, Y+4	; 0x04
    26bc:	01 97       	sbiw	r24, 0x01	; 1
    26be:	9c 83       	std	Y+4, r25	; 0x04
    26c0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    26c2:	eb 81       	ldd	r30, Y+3	; 0x03
    26c4:	fc 81       	ldd	r31, Y+4	; 0x04
    26c6:	82 e0       	ldi	r24, 0x02	; 2
    26c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    26ca:	8b 81       	ldd	r24, Y+3	; 0x03
    26cc:	9c 81       	ldd	r25, Y+4	; 0x04
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	9c 83       	std	Y+4, r25	; 0x04
    26d2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    26d4:	eb 81       	ldd	r30, Y+3	; 0x03
    26d6:	fc 81       	ldd	r31, Y+4	; 0x04
    26d8:	83 e0       	ldi	r24, 0x03	; 3
    26da:	80 83       	st	Z, r24
	pxTopOfStack--;
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    26e6:	eb 81       	ldd	r30, Y+3	; 0x03
    26e8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ea:	84 e0       	ldi	r24, 0x04	; 4
    26ec:	80 83       	st	Z, r24
	pxTopOfStack--;
    26ee:	8b 81       	ldd	r24, Y+3	; 0x03
    26f0:	9c 81       	ldd	r25, Y+4	; 0x04
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9c 83       	std	Y+4, r25	; 0x04
    26f6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    26f8:	eb 81       	ldd	r30, Y+3	; 0x03
    26fa:	fc 81       	ldd	r31, Y+4	; 0x04
    26fc:	85 e0       	ldi	r24, 0x05	; 5
    26fe:	80 83       	st	Z, r24
	pxTopOfStack--;
    2700:	8b 81       	ldd	r24, Y+3	; 0x03
    2702:	9c 81       	ldd	r25, Y+4	; 0x04
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9c 83       	std	Y+4, r25	; 0x04
    2708:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    270a:	eb 81       	ldd	r30, Y+3	; 0x03
    270c:	fc 81       	ldd	r31, Y+4	; 0x04
    270e:	86 e0       	ldi	r24, 0x06	; 6
    2710:	80 83       	st	Z, r24
	pxTopOfStack--;
    2712:	8b 81       	ldd	r24, Y+3	; 0x03
    2714:	9c 81       	ldd	r25, Y+4	; 0x04
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9c 83       	std	Y+4, r25	; 0x04
    271a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    271c:	eb 81       	ldd	r30, Y+3	; 0x03
    271e:	fc 81       	ldd	r31, Y+4	; 0x04
    2720:	87 e0       	ldi	r24, 0x07	; 7
    2722:	80 83       	st	Z, r24
	pxTopOfStack--;
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	9c 81       	ldd	r25, Y+4	; 0x04
    2728:	01 97       	sbiw	r24, 0x01	; 1
    272a:	9c 83       	std	Y+4, r25	; 0x04
    272c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    272e:	eb 81       	ldd	r30, Y+3	; 0x03
    2730:	fc 81       	ldd	r31, Y+4	; 0x04
    2732:	88 e0       	ldi	r24, 0x08	; 8
    2734:	80 83       	st	Z, r24
	pxTopOfStack--;
    2736:	8b 81       	ldd	r24, Y+3	; 0x03
    2738:	9c 81       	ldd	r25, Y+4	; 0x04
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	9c 83       	std	Y+4, r25	; 0x04
    273e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    2740:	eb 81       	ldd	r30, Y+3	; 0x03
    2742:	fc 81       	ldd	r31, Y+4	; 0x04
    2744:	89 e0       	ldi	r24, 0x09	; 9
    2746:	80 83       	st	Z, r24
	pxTopOfStack--;
    2748:	8b 81       	ldd	r24, Y+3	; 0x03
    274a:	9c 81       	ldd	r25, Y+4	; 0x04
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	9c 83       	std	Y+4, r25	; 0x04
    2750:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    2752:	eb 81       	ldd	r30, Y+3	; 0x03
    2754:	fc 81       	ldd	r31, Y+4	; 0x04
    2756:	80 e1       	ldi	r24, 0x10	; 16
    2758:	80 83       	st	Z, r24
	pxTopOfStack--;
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	9c 81       	ldd	r25, Y+4	; 0x04
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	9c 83       	std	Y+4, r25	; 0x04
    2762:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    2764:	eb 81       	ldd	r30, Y+3	; 0x03
    2766:	fc 81       	ldd	r31, Y+4	; 0x04
    2768:	81 e1       	ldi	r24, 0x11	; 17
    276a:	80 83       	st	Z, r24
	pxTopOfStack--;
    276c:	8b 81       	ldd	r24, Y+3	; 0x03
    276e:	9c 81       	ldd	r25, Y+4	; 0x04
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9c 83       	std	Y+4, r25	; 0x04
    2774:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    2776:	eb 81       	ldd	r30, Y+3	; 0x03
    2778:	fc 81       	ldd	r31, Y+4	; 0x04
    277a:	82 e1       	ldi	r24, 0x12	; 18
    277c:	80 83       	st	Z, r24
	pxTopOfStack--;
    277e:	8b 81       	ldd	r24, Y+3	; 0x03
    2780:	9c 81       	ldd	r25, Y+4	; 0x04
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	9c 83       	std	Y+4, r25	; 0x04
    2786:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    2788:	eb 81       	ldd	r30, Y+3	; 0x03
    278a:	fc 81       	ldd	r31, Y+4	; 0x04
    278c:	83 e1       	ldi	r24, 0x13	; 19
    278e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	9c 83       	std	Y+4, r25	; 0x04
    2798:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    279a:	eb 81       	ldd	r30, Y+3	; 0x03
    279c:	fc 81       	ldd	r31, Y+4	; 0x04
    279e:	84 e1       	ldi	r24, 0x14	; 20
    27a0:	80 83       	st	Z, r24
	pxTopOfStack--;
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	9c 83       	std	Y+4, r25	; 0x04
    27aa:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    27ac:	eb 81       	ldd	r30, Y+3	; 0x03
    27ae:	fc 81       	ldd	r31, Y+4	; 0x04
    27b0:	85 e1       	ldi	r24, 0x15	; 21
    27b2:	80 83       	st	Z, r24
	pxTopOfStack--;
    27b4:	8b 81       	ldd	r24, Y+3	; 0x03
    27b6:	9c 81       	ldd	r25, Y+4	; 0x04
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	9c 83       	std	Y+4, r25	; 0x04
    27bc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    27be:	eb 81       	ldd	r30, Y+3	; 0x03
    27c0:	fc 81       	ldd	r31, Y+4	; 0x04
    27c2:	86 e1       	ldi	r24, 0x16	; 22
    27c4:	80 83       	st	Z, r24
	pxTopOfStack--;
    27c6:	8b 81       	ldd	r24, Y+3	; 0x03
    27c8:	9c 81       	ldd	r25, Y+4	; 0x04
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	9c 83       	std	Y+4, r25	; 0x04
    27ce:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    27d0:	eb 81       	ldd	r30, Y+3	; 0x03
    27d2:	fc 81       	ldd	r31, Y+4	; 0x04
    27d4:	87 e1       	ldi	r24, 0x17	; 23
    27d6:	80 83       	st	Z, r24
	pxTopOfStack--;
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	9c 83       	std	Y+4, r25	; 0x04
    27e0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    27e2:	eb 81       	ldd	r30, Y+3	; 0x03
    27e4:	fc 81       	ldd	r31, Y+4	; 0x04
    27e6:	88 e1       	ldi	r24, 0x18	; 24
    27e8:	80 83       	st	Z, r24
	pxTopOfStack--;
    27ea:	8b 81       	ldd	r24, Y+3	; 0x03
    27ec:	9c 81       	ldd	r25, Y+4	; 0x04
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	9c 83       	std	Y+4, r25	; 0x04
    27f2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    27f4:	eb 81       	ldd	r30, Y+3	; 0x03
    27f6:	fc 81       	ldd	r31, Y+4	; 0x04
    27f8:	89 e1       	ldi	r24, 0x19	; 25
    27fa:	80 83       	st	Z, r24
	pxTopOfStack--;
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9c 83       	std	Y+4, r25	; 0x04
    2804:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    2806:	eb 81       	ldd	r30, Y+3	; 0x03
    2808:	fc 81       	ldd	r31, Y+4	; 0x04
    280a:	80 e2       	ldi	r24, 0x20	; 32
    280c:	80 83       	st	Z, r24
	pxTopOfStack--;
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	9c 81       	ldd	r25, Y+4	; 0x04
    2812:	01 97       	sbiw	r24, 0x01	; 1
    2814:	9c 83       	std	Y+4, r25	; 0x04
    2816:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    2818:	eb 81       	ldd	r30, Y+3	; 0x03
    281a:	fc 81       	ldd	r31, Y+4	; 0x04
    281c:	81 e2       	ldi	r24, 0x21	; 33
    281e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	9c 81       	ldd	r25, Y+4	; 0x04
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	9c 83       	std	Y+4, r25	; 0x04
    2828:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    282a:	eb 81       	ldd	r30, Y+3	; 0x03
    282c:	fc 81       	ldd	r31, Y+4	; 0x04
    282e:	82 e2       	ldi	r24, 0x22	; 34
    2830:	80 83       	st	Z, r24
	pxTopOfStack--;
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	01 97       	sbiw	r24, 0x01	; 1
    2838:	9c 83       	std	Y+4, r25	; 0x04
    283a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    283c:	eb 81       	ldd	r30, Y+3	; 0x03
    283e:	fc 81       	ldd	r31, Y+4	; 0x04
    2840:	83 e2       	ldi	r24, 0x23	; 35
    2842:	80 83       	st	Z, r24
	pxTopOfStack--;
    2844:	8b 81       	ldd	r24, Y+3	; 0x03
    2846:	9c 81       	ldd	r25, Y+4	; 0x04
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	9c 83       	std	Y+4, r25	; 0x04
    284c:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    284e:	8f 81       	ldd	r24, Y+7	; 0x07
    2850:	98 85       	ldd	r25, Y+8	; 0x08
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	eb 81       	ldd	r30, Y+3	; 0x03
    285a:	fc 81       	ldd	r31, Y+4	; 0x04
    285c:	80 83       	st	Z, r24
	pxTopOfStack--;
    285e:	8b 81       	ldd	r24, Y+3	; 0x03
    2860:	9c 81       	ldd	r25, Y+4	; 0x04
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	9c 83       	std	Y+4, r25	; 0x04
    2866:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	89 2f       	mov	r24, r25
    286e:	99 27       	eor	r25, r25
    2870:	9a 83       	std	Y+2, r25	; 0x02
    2872:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	eb 81       	ldd	r30, Y+3	; 0x03
    2878:	fc 81       	ldd	r31, Y+4	; 0x04
    287a:	80 83       	st	Z, r24
	pxTopOfStack--;
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	9c 83       	std	Y+4, r25	; 0x04
    2884:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    2886:	eb 81       	ldd	r30, Y+3	; 0x03
    2888:	fc 81       	ldd	r31, Y+4	; 0x04
    288a:	86 e2       	ldi	r24, 0x26	; 38
    288c:	80 83       	st	Z, r24
	pxTopOfStack--;
    288e:	8b 81       	ldd	r24, Y+3	; 0x03
    2890:	9c 81       	ldd	r25, Y+4	; 0x04
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	9c 83       	std	Y+4, r25	; 0x04
    2896:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    2898:	eb 81       	ldd	r30, Y+3	; 0x03
    289a:	fc 81       	ldd	r31, Y+4	; 0x04
    289c:	87 e2       	ldi	r24, 0x27	; 39
    289e:	80 83       	st	Z, r24
	pxTopOfStack--;
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	9c 83       	std	Y+4, r25	; 0x04
    28a8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    28aa:	eb 81       	ldd	r30, Y+3	; 0x03
    28ac:	fc 81       	ldd	r31, Y+4	; 0x04
    28ae:	88 e2       	ldi	r24, 0x28	; 40
    28b0:	80 83       	st	Z, r24
	pxTopOfStack--;
    28b2:	8b 81       	ldd	r24, Y+3	; 0x03
    28b4:	9c 81       	ldd	r25, Y+4	; 0x04
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	9c 83       	std	Y+4, r25	; 0x04
    28ba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    28bc:	eb 81       	ldd	r30, Y+3	; 0x03
    28be:	fc 81       	ldd	r31, Y+4	; 0x04
    28c0:	89 e2       	ldi	r24, 0x29	; 41
    28c2:	80 83       	st	Z, r24
	pxTopOfStack--;
    28c4:	8b 81       	ldd	r24, Y+3	; 0x03
    28c6:	9c 81       	ldd	r25, Y+4	; 0x04
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	9c 83       	std	Y+4, r25	; 0x04
    28cc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    28ce:	eb 81       	ldd	r30, Y+3	; 0x03
    28d0:	fc 81       	ldd	r31, Y+4	; 0x04
    28d2:	80 e3       	ldi	r24, 0x30	; 48
    28d4:	80 83       	st	Z, r24
	pxTopOfStack--;
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	9c 83       	std	Y+4, r25	; 0x04
    28de:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    28e0:	eb 81       	ldd	r30, Y+3	; 0x03
    28e2:	fc 81       	ldd	r31, Y+4	; 0x04
    28e4:	81 e3       	ldi	r24, 0x31	; 49
    28e6:	80 83       	st	Z, r24
	pxTopOfStack--;
    28e8:	8b 81       	ldd	r24, Y+3	; 0x03
    28ea:	9c 81       	ldd	r25, Y+4	; 0x04
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	9c 83       	std	Y+4, r25	; 0x04
    28f0:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	9c 81       	ldd	r25, Y+4	; 0x04
}
    28f6:	28 96       	adiw	r28, 0x08	; 8
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	cf 91       	pop	r28
    2904:	df 91       	pop	r29
    2906:	08 95       	ret

00002908 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    2908:	df 93       	push	r29
    290a:	cf 93       	push	r28
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    2910:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    2914:	a0 91 be 06 	lds	r26, 0x06BE
    2918:	b0 91 bf 06 	lds	r27, 0x06BF
    291c:	cd 91       	ld	r28, X+
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	dd 91       	ld	r29, X+
    2922:	de bf       	out	0x3e, r29	; 62
    2924:	ff 91       	pop	r31
    2926:	ef 91       	pop	r30
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	bf 91       	pop	r27
    292e:	af 91       	pop	r26
    2930:	9f 91       	pop	r25
    2932:	8f 91       	pop	r24
    2934:	7f 91       	pop	r23
    2936:	6f 91       	pop	r22
    2938:	5f 91       	pop	r21
    293a:	4f 91       	pop	r20
    293c:	3f 91       	pop	r19
    293e:	2f 91       	pop	r18
    2940:	1f 91       	pop	r17
    2942:	0f 91       	pop	r16
    2944:	ff 90       	pop	r15
    2946:	ef 90       	pop	r14
    2948:	df 90       	pop	r13
    294a:	cf 90       	pop	r12
    294c:	bf 90       	pop	r11
    294e:	af 90       	pop	r10
    2950:	9f 90       	pop	r9
    2952:	8f 90       	pop	r8
    2954:	7f 90       	pop	r7
    2956:	6f 90       	pop	r6
    2958:	5f 90       	pop	r5
    295a:	4f 90       	pop	r4
    295c:	3f 90       	pop	r3
    295e:	2f 90       	pop	r2
    2960:	1f 90       	pop	r1
    2962:	0f 90       	pop	r0
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    2968:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    296a:	81 e0       	ldi	r24, 0x01	; 1
}
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    2980:	0f 92       	push	r0
    2982:	0f b6       	in	r0, 0x3f	; 63
    2984:	f8 94       	cli
    2986:	0f 92       	push	r0
    2988:	1f 92       	push	r1
    298a:	11 24       	eor	r1, r1
    298c:	2f 92       	push	r2
    298e:	3f 92       	push	r3
    2990:	4f 92       	push	r4
    2992:	5f 92       	push	r5
    2994:	6f 92       	push	r6
    2996:	7f 92       	push	r7
    2998:	8f 92       	push	r8
    299a:	9f 92       	push	r9
    299c:	af 92       	push	r10
    299e:	bf 92       	push	r11
    29a0:	cf 92       	push	r12
    29a2:	df 92       	push	r13
    29a4:	ef 92       	push	r14
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	2f 93       	push	r18
    29ae:	3f 93       	push	r19
    29b0:	4f 93       	push	r20
    29b2:	5f 93       	push	r21
    29b4:	6f 93       	push	r22
    29b6:	7f 93       	push	r23
    29b8:	8f 93       	push	r24
    29ba:	9f 93       	push	r25
    29bc:	af 93       	push	r26
    29be:	bf 93       	push	r27
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	ef 93       	push	r30
    29c6:	ff 93       	push	r31
    29c8:	a0 91 be 06 	lds	r26, 0x06BE
    29cc:	b0 91 bf 06 	lds	r27, 0x06BF
    29d0:	0d b6       	in	r0, 0x3d	; 61
    29d2:	0d 92       	st	X+, r0
    29d4:	0e b6       	in	r0, 0x3e	; 62
    29d6:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    29d8:	0e 94 27 20 	call	0x404e	; 0x404e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    29dc:	a0 91 be 06 	lds	r26, 0x06BE
    29e0:	b0 91 bf 06 	lds	r27, 0x06BF
    29e4:	cd 91       	ld	r28, X+
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	dd 91       	ld	r29, X+
    29ea:	de bf       	out	0x3e, r29	; 62
    29ec:	ff 91       	pop	r31
    29ee:	ef 91       	pop	r30
    29f0:	df 91       	pop	r29
    29f2:	cf 91       	pop	r28
    29f4:	bf 91       	pop	r27
    29f6:	af 91       	pop	r26
    29f8:	9f 91       	pop	r25
    29fa:	8f 91       	pop	r24
    29fc:	7f 91       	pop	r23
    29fe:	6f 91       	pop	r22
    2a00:	5f 91       	pop	r21
    2a02:	4f 91       	pop	r20
    2a04:	3f 91       	pop	r19
    2a06:	2f 91       	pop	r18
    2a08:	1f 91       	pop	r17
    2a0a:	0f 91       	pop	r16
    2a0c:	ff 90       	pop	r15
    2a0e:	ef 90       	pop	r14
    2a10:	df 90       	pop	r13
    2a12:	cf 90       	pop	r12
    2a14:	bf 90       	pop	r11
    2a16:	af 90       	pop	r10
    2a18:	9f 90       	pop	r9
    2a1a:	8f 90       	pop	r8
    2a1c:	7f 90       	pop	r7
    2a1e:	6f 90       	pop	r6
    2a20:	5f 90       	pop	r5
    2a22:	4f 90       	pop	r4
    2a24:	3f 90       	pop	r3
    2a26:	2f 90       	pop	r2
    2a28:	1f 90       	pop	r1
    2a2a:	0f 90       	pop	r0
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2a30:	08 95       	ret

00002a32 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    2a32:	0f 92       	push	r0
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	0f 92       	push	r0
    2a3a:	1f 92       	push	r1
    2a3c:	11 24       	eor	r1, r1
    2a3e:	2f 92       	push	r2
    2a40:	3f 92       	push	r3
    2a42:	4f 92       	push	r4
    2a44:	5f 92       	push	r5
    2a46:	6f 92       	push	r6
    2a48:	7f 92       	push	r7
    2a4a:	8f 92       	push	r8
    2a4c:	9f 92       	push	r9
    2a4e:	af 92       	push	r10
    2a50:	bf 92       	push	r11
    2a52:	cf 92       	push	r12
    2a54:	df 92       	push	r13
    2a56:	ef 92       	push	r14
    2a58:	ff 92       	push	r15
    2a5a:	0f 93       	push	r16
    2a5c:	1f 93       	push	r17
    2a5e:	2f 93       	push	r18
    2a60:	3f 93       	push	r19
    2a62:	4f 93       	push	r20
    2a64:	5f 93       	push	r21
    2a66:	6f 93       	push	r22
    2a68:	7f 93       	push	r23
    2a6a:	8f 93       	push	r24
    2a6c:	9f 93       	push	r25
    2a6e:	af 93       	push	r26
    2a70:	bf 93       	push	r27
    2a72:	cf 93       	push	r28
    2a74:	df 93       	push	r29
    2a76:	ef 93       	push	r30
    2a78:	ff 93       	push	r31
    2a7a:	a0 91 be 06 	lds	r26, 0x06BE
    2a7e:	b0 91 bf 06 	lds	r27, 0x06BF
    2a82:	0d b6       	in	r0, 0x3d	; 61
    2a84:	0d 92       	st	X+, r0
    2a86:	0e b6       	in	r0, 0x3e	; 62
    2a88:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    2a8a:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <vTaskIncrementTick>
	vTaskSwitchContext();
    2a8e:	0e 94 27 20 	call	0x404e	; 0x404e <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    2a92:	a0 91 be 06 	lds	r26, 0x06BE
    2a96:	b0 91 bf 06 	lds	r27, 0x06BF
    2a9a:	cd 91       	ld	r28, X+
    2a9c:	cd bf       	out	0x3d, r28	; 61
    2a9e:	dd 91       	ld	r29, X+
    2aa0:	de bf       	out	0x3e, r29	; 62
    2aa2:	ff 91       	pop	r31
    2aa4:	ef 91       	pop	r30
    2aa6:	df 91       	pop	r29
    2aa8:	cf 91       	pop	r28
    2aaa:	bf 91       	pop	r27
    2aac:	af 91       	pop	r26
    2aae:	9f 91       	pop	r25
    2ab0:	8f 91       	pop	r24
    2ab2:	7f 91       	pop	r23
    2ab4:	6f 91       	pop	r22
    2ab6:	5f 91       	pop	r21
    2ab8:	4f 91       	pop	r20
    2aba:	3f 91       	pop	r19
    2abc:	2f 91       	pop	r18
    2abe:	1f 91       	pop	r17
    2ac0:	0f 91       	pop	r16
    2ac2:	ff 90       	pop	r15
    2ac4:	ef 90       	pop	r14
    2ac6:	df 90       	pop	r13
    2ac8:	cf 90       	pop	r12
    2aca:	bf 90       	pop	r11
    2acc:	af 90       	pop	r10
    2ace:	9f 90       	pop	r9
    2ad0:	8f 90       	pop	r8
    2ad2:	7f 90       	pop	r7
    2ad4:	6f 90       	pop	r6
    2ad6:	5f 90       	pop	r5
    2ad8:	4f 90       	pop	r4
    2ada:	3f 90       	pop	r3
    2adc:	2f 90       	pop	r2
    2ade:	1f 90       	pop	r1
    2ae0:	0f 90       	pop	r0
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    2ae6:	08 95       	ret

00002ae8 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <prvSetupTimerInterrupt+0x6>
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <prvSetupTimerInterrupt+0x8>
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <prvSetupTimerInterrupt+0xa>
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    2af6:	80 e4       	ldi	r24, 0x40	; 64
    2af8:	9f e1       	ldi	r25, 0x1F	; 31
    2afa:	a0 e0       	ldi	r26, 0x00	; 0
    2afc:	b0 e0       	ldi	r27, 0x00	; 0
    2afe:	8b 83       	std	Y+3, r24	; 0x03
    2b00:	9c 83       	std	Y+4, r25	; 0x04
    2b02:	ad 83       	std	Y+5, r26	; 0x05
    2b04:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    2b06:	8b 81       	ldd	r24, Y+3	; 0x03
    2b08:	9c 81       	ldd	r25, Y+4	; 0x04
    2b0a:	ad 81       	ldd	r26, Y+5	; 0x05
    2b0c:	be 81       	ldd	r27, Y+6	; 0x06
    2b0e:	68 94       	set
    2b10:	15 f8       	bld	r1, 5
    2b12:	b6 95       	lsr	r27
    2b14:	a7 95       	ror	r26
    2b16:	97 95       	ror	r25
    2b18:	87 95       	ror	r24
    2b1a:	16 94       	lsr	r1
    2b1c:	d1 f7       	brne	.-12     	; 0x2b12 <prvSetupTimerInterrupt+0x2a>
    2b1e:	8b 83       	std	Y+3, r24	; 0x03
    2b20:	9c 83       	std	Y+4, r25	; 0x04
    2b22:	ad 83       	std	Y+5, r26	; 0x05
    2b24:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	9c 81       	ldd	r25, Y+4	; 0x04
    2b2a:	ad 81       	ldd	r26, Y+5	; 0x05
    2b2c:	be 81       	ldd	r27, Y+6	; 0x06
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	a1 09       	sbc	r26, r1
    2b32:	b1 09       	sbc	r27, r1
    2b34:	8b 83       	std	Y+3, r24	; 0x03
    2b36:	9c 83       	std	Y+4, r25	; 0x04
    2b38:	ad 83       	std	Y+5, r26	; 0x05
    2b3a:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    2b3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b3e:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    2b40:	8b 81       	ldd	r24, Y+3	; 0x03
    2b42:	9c 81       	ldd	r25, Y+4	; 0x04
    2b44:	ad 81       	ldd	r26, Y+5	; 0x05
    2b46:	be 81       	ldd	r27, Y+6	; 0x06
    2b48:	89 2f       	mov	r24, r25
    2b4a:	9a 2f       	mov	r25, r26
    2b4c:	ab 2f       	mov	r26, r27
    2b4e:	bb 27       	eor	r27, r27
    2b50:	8b 83       	std	Y+3, r24	; 0x03
    2b52:	9c 83       	std	Y+4, r25	; 0x04
    2b54:	ad 83       	std	Y+5, r26	; 0x05
    2b56:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    2b58:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5a:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    2b5c:	eb e4       	ldi	r30, 0x4B	; 75
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    2b64:	ea e4       	ldi	r30, 0x4A	; 74
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	89 81       	ldd	r24, Y+1	; 0x01
    2b6a:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    2b6c:	8b e0       	ldi	r24, 0x0B	; 11
    2b6e:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    2b70:	ee e4       	ldi	r30, 0x4E	; 78
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    2b78:	e9 e5       	ldi	r30, 0x59	; 89
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    2b80:	89 81       	ldd	r24, Y+1	; 0x01
    2b82:	80 61       	ori	r24, 0x10	; 16
    2b84:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    2b86:	e9 e5       	ldi	r30, 0x59	; 89
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	80 83       	st	Z, r24
}
    2b8e:	26 96       	adiw	r28, 0x06	; 6
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    2ba0:	0e 94 19 15 	call	0x2a32	; 0x2a32 <vPortYieldFromTick>
		asm volatile ( "reti" );
    2ba4:	18 95       	reti

00002ba6 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	cd b7       	in	r28, 0x3d	; 61
    2bac:	de b7       	in	r29, 0x3e	; 62
    2bae:	28 97       	sbiw	r28, 0x08	; 8
    2bb0:	0f b6       	in	r0, 0x3f	; 63
    2bb2:	f8 94       	cli
    2bb4:	de bf       	out	0x3e, r29	; 62
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	cd bf       	out	0x3d, r28	; 61
    2bba:	8f 83       	std	Y+7, r24	; 0x07
    2bbc:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    2bbe:	1a 82       	std	Y+2, r1	; 0x02
    2bc0:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    2bc2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bc4:	88 23       	and	r24, r24
    2bc6:	09 f4       	brne	.+2      	; 0x2bca <xQueueCreate+0x24>
    2bc8:	8c c0       	rjmp	.+280    	; 0x2ce2 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2bca:	8f e1       	ldi	r24, 0x1F	; 31
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pvPortMalloc>
    2bd2:	9e 83       	std	Y+6, r25	; 0x06
    2bd4:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    2bd6:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bda:	00 97       	sbiw	r24, 0x00	; 0
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <xQueueCreate+0x3a>
    2bde:	81 c0       	rjmp	.+258    	; 0x2ce2 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    2be0:	8f 81       	ldd	r24, Y+7	; 0x07
    2be2:	28 2f       	mov	r18, r24
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	88 85       	ldd	r24, Y+8	; 0x08
    2be8:	88 2f       	mov	r24, r24
    2bea:	90 e0       	ldi	r25, 0x00	; 0
    2bec:	ac 01       	movw	r20, r24
    2bee:	24 9f       	mul	r18, r20
    2bf0:	c0 01       	movw	r24, r0
    2bf2:	25 9f       	mul	r18, r21
    2bf4:	90 0d       	add	r25, r0
    2bf6:	34 9f       	mul	r19, r20
    2bf8:	90 0d       	add	r25, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	01 96       	adiw	r24, 0x01	; 1
    2bfe:	9c 83       	std	Y+4, r25	; 0x04
    2c00:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    2c02:	8b 81       	ldd	r24, Y+3	; 0x03
    2c04:	9c 81       	ldd	r25, Y+4	; 0x04
    2c06:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pvPortMalloc>
    2c0a:	ed 81       	ldd	r30, Y+5	; 0x05
    2c0c:	fe 81       	ldd	r31, Y+6	; 0x06
    2c0e:	91 83       	std	Z+1, r25	; 0x01
    2c10:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    2c12:	ed 81       	ldd	r30, Y+5	; 0x05
    2c14:	fe 81       	ldd	r31, Y+6	; 0x06
    2c16:	80 81       	ld	r24, Z
    2c18:	91 81       	ldd	r25, Z+1	; 0x01
    2c1a:	00 97       	sbiw	r24, 0x00	; 0
    2c1c:	09 f4       	brne	.+2      	; 0x2c20 <xQueueCreate+0x7a>
    2c1e:	5d c0       	rjmp	.+186    	; 0x2cda <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    2c20:	ed 81       	ldd	r30, Y+5	; 0x05
    2c22:	fe 81       	ldd	r31, Y+6	; 0x06
    2c24:	40 81       	ld	r20, Z
    2c26:	51 81       	ldd	r21, Z+1	; 0x01
    2c28:	8f 81       	ldd	r24, Y+7	; 0x07
    2c2a:	28 2f       	mov	r18, r24
    2c2c:	30 e0       	ldi	r19, 0x00	; 0
    2c2e:	88 85       	ldd	r24, Y+8	; 0x08
    2c30:	88 2f       	mov	r24, r24
    2c32:	90 e0       	ldi	r25, 0x00	; 0
    2c34:	bc 01       	movw	r22, r24
    2c36:	26 9f       	mul	r18, r22
    2c38:	c0 01       	movw	r24, r0
    2c3a:	27 9f       	mul	r18, r23
    2c3c:	90 0d       	add	r25, r0
    2c3e:	36 9f       	mul	r19, r22
    2c40:	90 0d       	add	r25, r0
    2c42:	11 24       	eor	r1, r1
    2c44:	84 0f       	add	r24, r20
    2c46:	95 1f       	adc	r25, r21
    2c48:	ed 81       	ldd	r30, Y+5	; 0x05
    2c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    2c4c:	93 83       	std	Z+3, r25	; 0x03
    2c4e:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2c50:	ed 81       	ldd	r30, Y+5	; 0x05
    2c52:	fe 81       	ldd	r31, Y+6	; 0x06
    2c54:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    2c56:	ed 81       	ldd	r30, Y+5	; 0x05
    2c58:	fe 81       	ldd	r31, Y+6	; 0x06
    2c5a:	80 81       	ld	r24, Z
    2c5c:	91 81       	ldd	r25, Z+1	; 0x01
    2c5e:	ed 81       	ldd	r30, Y+5	; 0x05
    2c60:	fe 81       	ldd	r31, Y+6	; 0x06
    2c62:	95 83       	std	Z+5, r25	; 0x05
    2c64:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    2c66:	ed 81       	ldd	r30, Y+5	; 0x05
    2c68:	fe 81       	ldd	r31, Y+6	; 0x06
    2c6a:	40 81       	ld	r20, Z
    2c6c:	51 81       	ldd	r21, Z+1	; 0x01
    2c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c70:	88 2f       	mov	r24, r24
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	9c 01       	movw	r18, r24
    2c76:	21 50       	subi	r18, 0x01	; 1
    2c78:	30 40       	sbci	r19, 0x00	; 0
    2c7a:	88 85       	ldd	r24, Y+8	; 0x08
    2c7c:	88 2f       	mov	r24, r24
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	bc 01       	movw	r22, r24
    2c82:	26 9f       	mul	r18, r22
    2c84:	c0 01       	movw	r24, r0
    2c86:	27 9f       	mul	r18, r23
    2c88:	90 0d       	add	r25, r0
    2c8a:	36 9f       	mul	r19, r22
    2c8c:	90 0d       	add	r25, r0
    2c8e:	11 24       	eor	r1, r1
    2c90:	84 0f       	add	r24, r20
    2c92:	95 1f       	adc	r25, r21
    2c94:	ed 81       	ldd	r30, Y+5	; 0x05
    2c96:	fe 81       	ldd	r31, Y+6	; 0x06
    2c98:	97 83       	std	Z+7, r25	; 0x07
    2c9a:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    2c9c:	ed 81       	ldd	r30, Y+5	; 0x05
    2c9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2ca0:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca2:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    2ca4:	ed 81       	ldd	r30, Y+5	; 0x05
    2ca6:	fe 81       	ldd	r31, Y+6	; 0x06
    2ca8:	88 85       	ldd	r24, Y+8	; 0x08
    2caa:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    2cac:	ed 81       	ldd	r30, Y+5	; 0x05
    2cae:	fe 81       	ldd	r31, Y+6	; 0x06
    2cb0:	8f ef       	ldi	r24, 0xFF	; 255
    2cb2:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    2cb4:	ed 81       	ldd	r30, Y+5	; 0x05
    2cb6:	fe 81       	ldd	r31, Y+6	; 0x06
    2cb8:	8f ef       	ldi	r24, 0xFF	; 255
    2cba:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc0:	08 96       	adiw	r24, 0x08	; 8
    2cc2:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cca:	41 96       	adiw	r24, 0x11	; 17
    2ccc:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    2cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	04 c0       	rjmp	.+8      	; 0x2ce2 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	0e 94 a0 11 	call	0x2340	; 0x2340 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ce6:	28 96       	adiw	r28, 0x08	; 8
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( void )
	{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <xQueueCreateMutex+0x6>
    2cfe:	cd b7       	in	r28, 0x3d	; 61
    2d00:	de b7       	in	r29, 0x3e	; 62
	xQUEUE *pxNewQueue;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    2d02:	8f e1       	ldi	r24, 0x1F	; 31
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pvPortMalloc>
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
		if( pxNewQueue != NULL )
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	a9 f1       	breq	.+106    	; 0x2d80 <xQueueCreateMutex+0x88>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    2d16:	e9 81       	ldd	r30, Y+1	; 0x01
    2d18:	fa 81       	ldd	r31, Y+2	; 0x02
    2d1a:	13 82       	std	Z+3, r1	; 0x03
    2d1c:	12 82       	std	Z+2, r1	; 0x02
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    2d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d20:	fa 81       	ldd	r31, Y+2	; 0x02
    2d22:	11 82       	std	Z+1, r1	; 0x01
    2d24:	10 82       	st	Z, r1

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    2d26:	e9 81       	ldd	r30, Y+1	; 0x01
    2d28:	fa 81       	ldd	r31, Y+2	; 0x02
    2d2a:	15 82       	std	Z+5, r1	; 0x05
    2d2c:	14 82       	std	Z+4, r1	; 0x04
			pxNewQueue->pcReadFrom = NULL;
    2d2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d30:	fa 81       	ldd	r31, Y+2	; 0x02
    2d32:	17 82       	std	Z+7, r1	; 0x07
    2d34:	16 82       	std	Z+6, r1	; 0x06

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    2d36:	e9 81       	ldd	r30, Y+1	; 0x01
    2d38:	fa 81       	ldd	r31, Y+2	; 0x02
    2d3a:	12 8e       	std	Z+26, r1	; 0x1a
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    2d3c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	83 8f       	std	Z+27, r24	; 0x1b
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    2d44:	e9 81       	ldd	r30, Y+1	; 0x01
    2d46:	fa 81       	ldd	r31, Y+2	; 0x02
    2d48:	14 8e       	std	Z+28, r1	; 0x1c
			pxNewQueue->xRxLock = queueUNLOCKED;
    2d4a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d4e:	8f ef       	ldi	r24, 0xFF	; 255
    2d50:	85 8f       	std	Z+29, r24	; 0x1d
			pxNewQueue->xTxLock = queueUNLOCKED;
    2d52:	e9 81       	ldd	r30, Y+1	; 0x01
    2d54:	fa 81       	ldd	r31, Y+2	; 0x02
    2d56:	8f ef       	ldi	r24, 0xFF	; 255
    2d58:	86 8f       	std	Z+30, r24	; 0x1e

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d5e:	08 96       	adiw	r24, 0x08	; 8
    2d60:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    2d64:	89 81       	ldd	r24, Y+1	; 0x01
    2d66:	9a 81       	ldd	r25, Y+2	; 0x02
    2d68:	41 96       	adiw	r24, 0x11	; 17
    2d6a:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	9a 81       	ldd	r25, Y+2	; 0x02
    2d72:	60 e0       	ldi	r22, 0x00	; 0
    2d74:	70 e0       	ldi	r23, 0x00	; 0
    2d76:	40 e0       	ldi	r20, 0x00	; 0
    2d78:	50 e0       	ldi	r21, 0x00	; 0
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	cf 91       	pop	r28
    2d8a:	df 91       	pop	r29
    2d8c:	08 95       	ret

00002d8e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    2d8e:	df 93       	push	r29
    2d90:	cf 93       	push	r28
    2d92:	00 d0       	rcall	.+0      	; 0x2d94 <xQueueCreateCountingSemaphore+0x6>
    2d94:	00 d0       	rcall	.+0      	; 0x2d96 <xQueueCreateCountingSemaphore+0x8>
    2d96:	cd b7       	in	r28, 0x3d	; 61
    2d98:	de b7       	in	r29, 0x3e	; 62
    2d9a:	8b 83       	std	Y+3, r24	; 0x03
    2d9c:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    2d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2da0:	60 e0       	ldi	r22, 0x00	; 0
    2da2:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xQueueCreate>
    2da6:	9a 83       	std	Y+2, r25	; 0x02
    2da8:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    2daa:	89 81       	ldd	r24, Y+1	; 0x01
    2dac:	9a 81       	ldd	r25, Y+2	; 0x02
    2dae:	00 97       	sbiw	r24, 0x00	; 0
    2db0:	21 f0       	breq	.+8      	; 0x2dba <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    2db2:	e9 81       	ldd	r30, Y+1	; 0x01
    2db4:	fa 81       	ldd	r31, Y+2	; 0x02
    2db6:	8c 81       	ldd	r24, Y+4	; 0x04
    2db8:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    2dba:	89 81       	ldd	r24, Y+1	; 0x01
    2dbc:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	0f 90       	pop	r0
    2dc6:	cf 91       	pop	r28
    2dc8:	df 91       	pop	r29
    2dca:	08 95       	ret

00002dcc <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	2c 97       	sbiw	r28, 0x0c	; 12
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	9e 83       	std	Y+6, r25	; 0x06
    2de2:	8d 83       	std	Y+5, r24	; 0x05
    2de4:	78 87       	std	Y+8, r23	; 0x08
    2de6:	6f 83       	std	Y+7, r22	; 0x07
    2de8:	5a 87       	std	Y+10, r21	; 0x0a
    2dea:	49 87       	std	Y+9, r20	; 0x09
    2dec:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2dee:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    2df0:	0f b6       	in	r0, 0x3f	; 63
    2df2:	f8 94       	cli
    2df4:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2df6:	ed 81       	ldd	r30, Y+5	; 0x05
    2df8:	fe 81       	ldd	r31, Y+6	; 0x06
    2dfa:	92 8d       	ldd	r25, Z+26	; 0x1a
    2dfc:	ed 81       	ldd	r30, Y+5	; 0x05
    2dfe:	fe 81       	ldd	r31, Y+6	; 0x06
    2e00:	83 8d       	ldd	r24, Z+27	; 0x1b
    2e02:	98 17       	cp	r25, r24
    2e04:	d8 f4       	brcc	.+54     	; 0x2e3c <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2e06:	8d 81       	ldd	r24, Y+5	; 0x05
    2e08:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0a:	2f 81       	ldd	r18, Y+7	; 0x07
    2e0c:	38 85       	ldd	r19, Y+8	; 0x08
    2e0e:	b9 01       	movw	r22, r18
    2e10:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e12:	0e 94 3e 19 	call	0x327c	; 0x327c <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2e16:	ed 81       	ldd	r30, Y+5	; 0x05
    2e18:	fe 81       	ldd	r31, Y+6	; 0x06
    2e1a:	81 89       	ldd	r24, Z+17	; 0x11
    2e1c:	88 23       	and	r24, r24
    2e1e:	49 f0       	breq	.+18     	; 0x2e32 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    2e20:	8d 81       	ldd	r24, Y+5	; 0x05
    2e22:	9e 81       	ldd	r25, Y+6	; 0x06
    2e24:	41 96       	adiw	r24, 0x11	; 17
    2e26:	0e 94 d6 20 	call	0x41ac	; 0x41ac <xTaskRemoveFromEventList>
    2e2a:	81 30       	cpi	r24, 0x01	; 1
    2e2c:	11 f4       	brne	.+4      	; 0x2e32 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    2e2e:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    2e32:	0f 90       	pop	r0
    2e34:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	8c 87       	std	Y+12, r24	; 0x0c
    2e3a:	5c c0       	rjmp	.+184    	; 0x2ef4 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2e3c:	89 85       	ldd	r24, Y+9	; 0x09
    2e3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e40:	00 97       	sbiw	r24, 0x00	; 0
    2e42:	21 f4       	brne	.+8      	; 0x2e4c <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2e44:	0f 90       	pop	r0
    2e46:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    2e48:	1c 86       	std	Y+12, r1	; 0x0c
    2e4a:	54 c0       	rjmp	.+168    	; 0x2ef4 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	88 23       	and	r24, r24
    2e50:	31 f4       	brne	.+12     	; 0x2e5e <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2e52:	ce 01       	movw	r24, r28
    2e54:	02 96       	adiw	r24, 0x02	; 2
    2e56:	0e 94 3e 21 	call	0x427c	; 0x427c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    2e5a:	81 e0       	ldi	r24, 0x01	; 1
    2e5c:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    2e5e:	0f 90       	pop	r0
    2e60:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2e62:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	0f 92       	push	r0
    2e6c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e6e:	fe 81       	ldd	r31, Y+6	; 0x06
    2e70:	85 8d       	ldd	r24, Z+29	; 0x1d
    2e72:	8f 3f       	cpi	r24, 0xFF	; 255
    2e74:	19 f4       	brne	.+6      	; 0x2e7c <xQueueGenericSend+0xb0>
    2e76:	ed 81       	ldd	r30, Y+5	; 0x05
    2e78:	fe 81       	ldd	r31, Y+6	; 0x06
    2e7a:	15 8e       	std	Z+29, r1	; 0x1d
    2e7c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e7e:	fe 81       	ldd	r31, Y+6	; 0x06
    2e80:	86 8d       	ldd	r24, Z+30	; 0x1e
    2e82:	8f 3f       	cpi	r24, 0xFF	; 255
    2e84:	19 f4       	brne	.+6      	; 0x2e8c <xQueueGenericSend+0xc0>
    2e86:	ed 81       	ldd	r30, Y+5	; 0x05
    2e88:	fe 81       	ldd	r31, Y+6	; 0x06
    2e8a:	16 8e       	std	Z+30, r1	; 0x1e
    2e8c:	0f 90       	pop	r0
    2e8e:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2e90:	ce 01       	movw	r24, r28
    2e92:	02 96       	adiw	r24, 0x02	; 2
    2e94:	9e 01       	movw	r18, r28
    2e96:	27 5f       	subi	r18, 0xF7	; 247
    2e98:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9a:	b9 01       	movw	r22, r18
    2e9c:	0e 94 57 21 	call	0x42ae	; 0x42ae <xTaskCheckForTimeOut>
    2ea0:	88 23       	and	r24, r24
    2ea2:	09 f5       	brne	.+66     	; 0x2ee6 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    2ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea8:	0e 94 b3 1a 	call	0x3566	; 0x3566 <prvIsQueueFull>
    2eac:	88 23       	and	r24, r24
    2eae:	a1 f0       	breq	.+40     	; 0x2ed8 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    2eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb4:	08 96       	adiw	r24, 0x08	; 8
    2eb6:	29 85       	ldd	r18, Y+9	; 0x09
    2eb8:	3a 85       	ldd	r19, Y+10	; 0x0a
    2eba:	b9 01       	movw	r22, r18
    2ebc:	0e 94 8d 20 	call	0x411a	; 0x411a <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    2ec0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ec2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ec4:	0e 94 2c 1a 	call	0x3458	; 0x3458 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    2ec8:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
    2ecc:	88 23       	and	r24, r24
    2ece:	09 f0       	breq	.+2      	; 0x2ed2 <xQueueGenericSend+0x106>
    2ed0:	8f cf       	rjmp	.-226    	; 0x2df0 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    2ed2:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
    2ed6:	8c cf       	rjmp	.-232    	; 0x2df0 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    2ed8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eda:	9e 81       	ldd	r25, Y+6	; 0x06
    2edc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    2ee0:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
    2ee4:	85 cf       	rjmp	.-246    	; 0x2df0 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    2ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eea:	0e 94 2c 1a 	call	0x3458	; 0x3458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    2eee:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    2ef2:	1c 86       	std	Y+12, r1	; 0x0c
    2ef4:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    2ef6:	2c 96       	adiw	r28, 0x0c	; 12
    2ef8:	0f b6       	in	r0, 0x3f	; 63
    2efa:	f8 94       	cli
    2efc:	de bf       	out	0x3e, r29	; 62
    2efe:	0f be       	out	0x3f, r0	; 63
    2f00:	cd bf       	out	0x3d, r28	; 61
    2f02:	cf 91       	pop	r28
    2f04:	df 91       	pop	r29
    2f06:	08 95       	ret

00002f08 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    2f08:	df 93       	push	r29
    2f0a:	cf 93       	push	r28
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	29 97       	sbiw	r28, 0x09	; 9
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	9c 83       	std	Y+4, r25	; 0x04
    2f1e:	8b 83       	std	Y+3, r24	; 0x03
    2f20:	7e 83       	std	Y+6, r23	; 0x06
    2f22:	6d 83       	std	Y+5, r22	; 0x05
    2f24:	58 87       	std	Y+8, r21	; 0x08
    2f26:	4f 83       	std	Y+7, r20	; 0x07
    2f28:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2f2a:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    2f2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f30:	92 8d       	ldd	r25, Z+26	; 0x1a
    2f32:	eb 81       	ldd	r30, Y+3	; 0x03
    2f34:	fc 81       	ldd	r31, Y+4	; 0x04
    2f36:	83 8d       	ldd	r24, Z+27	; 0x1b
    2f38:	98 17       	cp	r25, r24
    2f3a:	40 f5       	brcc	.+80     	; 0x2f8c <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    2f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2f40:	2d 81       	ldd	r18, Y+5	; 0x05
    2f42:	3e 81       	ldd	r19, Y+6	; 0x06
    2f44:	b9 01       	movw	r22, r18
    2f46:	49 85       	ldd	r20, Y+9	; 0x09
    2f48:	0e 94 3e 19 	call	0x327c	; 0x327c <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    2f4c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f4e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f50:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f52:	8f 3f       	cpi	r24, 0xFF	; 255
    2f54:	89 f4       	brne	.+34     	; 0x2f78 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    2f56:	eb 81       	ldd	r30, Y+3	; 0x03
    2f58:	fc 81       	ldd	r31, Y+4	; 0x04
    2f5a:	81 89       	ldd	r24, Z+17	; 0x11
    2f5c:	88 23       	and	r24, r24
    2f5e:	99 f0       	breq	.+38     	; 0x2f86 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    2f60:	8b 81       	ldd	r24, Y+3	; 0x03
    2f62:	9c 81       	ldd	r25, Y+4	; 0x04
    2f64:	41 96       	adiw	r24, 0x11	; 17
    2f66:	0e 94 d6 20 	call	0x41ac	; 0x41ac <xTaskRemoveFromEventList>
    2f6a:	88 23       	and	r24, r24
    2f6c:	61 f0       	breq	.+24     	; 0x2f86 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    2f6e:	ef 81       	ldd	r30, Y+7	; 0x07
    2f70:	f8 85       	ldd	r31, Y+8	; 0x08
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	80 83       	st	Z, r24
    2f76:	07 c0       	rjmp	.+14     	; 0x2f86 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    2f78:	eb 81       	ldd	r30, Y+3	; 0x03
    2f7a:	fc 81       	ldd	r31, Y+4	; 0x04
    2f7c:	86 8d       	ldd	r24, Z+30	; 0x1e
    2f7e:	8f 5f       	subi	r24, 0xFF	; 255
    2f80:	eb 81       	ldd	r30, Y+3	; 0x03
    2f82:	fc 81       	ldd	r31, Y+4	; 0x04
    2f84:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	8a 83       	std	Y+2, r24	; 0x02
    2f8a:	01 c0       	rjmp	.+2      	; 0x2f8e <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    2f8c:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2f8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2f90:	29 96       	adiw	r28, 0x09	; 9
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
    2faa:	2e 97       	sbiw	r28, 0x0e	; 14
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	98 87       	std	Y+8, r25	; 0x08
    2fb8:	8f 83       	std	Y+7, r24	; 0x07
    2fba:	7a 87       	std	Y+10, r23	; 0x0a
    2fbc:	69 87       	std	Y+9, r22	; 0x09
    2fbe:	5c 87       	std	Y+12, r21	; 0x0c
    2fc0:	4b 87       	std	Y+11, r20	; 0x0b
    2fc2:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    2fc4:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    2fcc:	ef 81       	ldd	r30, Y+7	; 0x07
    2fce:	f8 85       	ldd	r31, Y+8	; 0x08
    2fd0:	82 8d       	ldd	r24, Z+26	; 0x1a
    2fd2:	88 23       	and	r24, r24
    2fd4:	09 f4       	brne	.+2      	; 0x2fd8 <xQueueGenericReceive+0x36>
    2fd6:	4b c0       	rjmp	.+150    	; 0x306e <xQueueGenericReceive+0xcc>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    2fd8:	ef 81       	ldd	r30, Y+7	; 0x07
    2fda:	f8 85       	ldd	r31, Y+8	; 0x08
    2fdc:	86 81       	ldd	r24, Z+6	; 0x06
    2fde:	97 81       	ldd	r25, Z+7	; 0x07
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    2fe4:	8f 81       	ldd	r24, Y+7	; 0x07
    2fe6:	98 85       	ldd	r25, Y+8	; 0x08
    2fe8:	29 85       	ldd	r18, Y+9	; 0x09
    2fea:	3a 85       	ldd	r19, Y+10	; 0x0a
    2fec:	b9 01       	movw	r22, r18
    2fee:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    2ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ff4:	88 23       	and	r24, r24
    2ff6:	11 f5       	brne	.+68     	; 0x303c <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    2ff8:	ef 81       	ldd	r30, Y+7	; 0x07
    2ffa:	f8 85       	ldd	r31, Y+8	; 0x08
    2ffc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ffe:	81 50       	subi	r24, 0x01	; 1
    3000:	ef 81       	ldd	r30, Y+7	; 0x07
    3002:	f8 85       	ldd	r31, Y+8	; 0x08
    3004:	82 8f       	std	Z+26, r24	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    3006:	ef 81       	ldd	r30, Y+7	; 0x07
    3008:	f8 85       	ldd	r31, Y+8	; 0x08
    300a:	80 81       	ld	r24, Z
    300c:	91 81       	ldd	r25, Z+1	; 0x01
    300e:	00 97       	sbiw	r24, 0x00	; 0
    3010:	31 f4       	brne	.+12     	; 0x301e <xQueueGenericReceive+0x7c>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    3012:	0e 94 5b 23 	call	0x46b6	; 0x46b6 <xTaskGetCurrentTaskHandle>
    3016:	ef 81       	ldd	r30, Y+7	; 0x07
    3018:	f8 85       	ldd	r31, Y+8	; 0x08
    301a:	93 83       	std	Z+3, r25	; 0x03
    301c:	82 83       	std	Z+2, r24	; 0x02
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    301e:	ef 81       	ldd	r30, Y+7	; 0x07
    3020:	f8 85       	ldd	r31, Y+8	; 0x08
    3022:	80 85       	ldd	r24, Z+8	; 0x08
    3024:	88 23       	and	r24, r24
    3026:	f1 f0       	breq	.+60     	; 0x3064 <xQueueGenericReceive+0xc2>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3028:	8f 81       	ldd	r24, Y+7	; 0x07
    302a:	98 85       	ldd	r25, Y+8	; 0x08
    302c:	08 96       	adiw	r24, 0x08	; 8
    302e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <xTaskRemoveFromEventList>
    3032:	81 30       	cpi	r24, 0x01	; 1
    3034:	b9 f4       	brne	.+46     	; 0x3064 <xQueueGenericReceive+0xc2>
						{
							portYIELD_WITHIN_API();
    3036:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
    303a:	14 c0       	rjmp	.+40     	; 0x3064 <xQueueGenericReceive+0xc2>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    303c:	ef 81       	ldd	r30, Y+7	; 0x07
    303e:	f8 85       	ldd	r31, Y+8	; 0x08
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	9a 81       	ldd	r25, Y+2	; 0x02
    3044:	97 83       	std	Z+7, r25	; 0x07
    3046:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3048:	ef 81       	ldd	r30, Y+7	; 0x07
    304a:	f8 85       	ldd	r31, Y+8	; 0x08
    304c:	81 89       	ldd	r24, Z+17	; 0x11
    304e:	88 23       	and	r24, r24
    3050:	49 f0       	breq	.+18     	; 0x3064 <xQueueGenericReceive+0xc2>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3052:	8f 81       	ldd	r24, Y+7	; 0x07
    3054:	98 85       	ldd	r25, Y+8	; 0x08
    3056:	41 96       	adiw	r24, 0x11	; 17
    3058:	0e 94 d6 20 	call	0x41ac	; 0x41ac <xTaskRemoveFromEventList>
    305c:	88 23       	and	r24, r24
    305e:	11 f0       	breq	.+4      	; 0x3064 <xQueueGenericReceive+0xc2>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    3060:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    3064:	0f 90       	pop	r0
    3066:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	8e 87       	std	Y+14, r24	; 0x0e
    306c:	6d c0       	rjmp	.+218    	; 0x3148 <xQueueGenericReceive+0x1a6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    306e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3070:	9c 85       	ldd	r25, Y+12	; 0x0c
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	21 f4       	brne	.+8      	; 0x307e <xQueueGenericReceive+0xdc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    3076:	0f 90       	pop	r0
    3078:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    307a:	1e 86       	std	Y+14, r1	; 0x0e
    307c:	65 c0       	rjmp	.+202    	; 0x3148 <xQueueGenericReceive+0x1a6>
				}
				else if( xEntryTimeSet == pdFALSE )
    307e:	8b 81       	ldd	r24, Y+3	; 0x03
    3080:	88 23       	and	r24, r24
    3082:	31 f4       	brne	.+12     	; 0x3090 <xQueueGenericReceive+0xee>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    3084:	ce 01       	movw	r24, r28
    3086:	04 96       	adiw	r24, 0x04	; 4
    3088:	0e 94 3e 21 	call	0x427c	; 0x427c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    3090:	0f 90       	pop	r0
    3092:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3094:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3098:	0f b6       	in	r0, 0x3f	; 63
    309a:	f8 94       	cli
    309c:	0f 92       	push	r0
    309e:	ef 81       	ldd	r30, Y+7	; 0x07
    30a0:	f8 85       	ldd	r31, Y+8	; 0x08
    30a2:	85 8d       	ldd	r24, Z+29	; 0x1d
    30a4:	8f 3f       	cpi	r24, 0xFF	; 255
    30a6:	19 f4       	brne	.+6      	; 0x30ae <xQueueGenericReceive+0x10c>
    30a8:	ef 81       	ldd	r30, Y+7	; 0x07
    30aa:	f8 85       	ldd	r31, Y+8	; 0x08
    30ac:	15 8e       	std	Z+29, r1	; 0x1d
    30ae:	ef 81       	ldd	r30, Y+7	; 0x07
    30b0:	f8 85       	ldd	r31, Y+8	; 0x08
    30b2:	86 8d       	ldd	r24, Z+30	; 0x1e
    30b4:	8f 3f       	cpi	r24, 0xFF	; 255
    30b6:	19 f4       	brne	.+6      	; 0x30be <xQueueGenericReceive+0x11c>
    30b8:	ef 81       	ldd	r30, Y+7	; 0x07
    30ba:	f8 85       	ldd	r31, Y+8	; 0x08
    30bc:	16 8e       	std	Z+30, r1	; 0x1e
    30be:	0f 90       	pop	r0
    30c0:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    30c2:	ce 01       	movw	r24, r28
    30c4:	04 96       	adiw	r24, 0x04	; 4
    30c6:	9e 01       	movw	r18, r28
    30c8:	25 5f       	subi	r18, 0xF5	; 245
    30ca:	3f 4f       	sbci	r19, 0xFF	; 255
    30cc:	b9 01       	movw	r22, r18
    30ce:	0e 94 57 21 	call	0x42ae	; 0x42ae <xTaskCheckForTimeOut>
    30d2:	88 23       	and	r24, r24
    30d4:	91 f5       	brne	.+100    	; 0x313a <xQueueGenericReceive+0x198>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    30d6:	8f 81       	ldd	r24, Y+7	; 0x07
    30d8:	98 85       	ldd	r25, Y+8	; 0x08
    30da:	0e 94 80 1a 	call	0x3500	; 0x3500 <prvIsQueueEmpty>
    30de:	88 23       	and	r24, r24
    30e0:	29 f1       	breq	.+74     	; 0x312c <xQueueGenericReceive+0x18a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    30e2:	ef 81       	ldd	r30, Y+7	; 0x07
    30e4:	f8 85       	ldd	r31, Y+8	; 0x08
    30e6:	80 81       	ld	r24, Z
    30e8:	91 81       	ldd	r25, Z+1	; 0x01
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	59 f4       	brne	.+22     	; 0x3104 <xQueueGenericReceive+0x162>
					{
						portENTER_CRITICAL();
    30ee:	0f b6       	in	r0, 0x3f	; 63
    30f0:	f8 94       	cli
    30f2:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    30f4:	ef 81       	ldd	r30, Y+7	; 0x07
    30f6:	f8 85       	ldd	r31, Y+8	; 0x08
    30f8:	82 81       	ldd	r24, Z+2	; 0x02
    30fa:	93 81       	ldd	r25, Z+3	; 0x03
    30fc:	0e 94 6d 23 	call	0x46da	; 0x46da <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    3100:	0f 90       	pop	r0
    3102:	0f be       	out	0x3f, r0	; 63
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    3104:	8f 81       	ldd	r24, Y+7	; 0x07
    3106:	98 85       	ldd	r25, Y+8	; 0x08
    3108:	41 96       	adiw	r24, 0x11	; 17
    310a:	2b 85       	ldd	r18, Y+11	; 0x0b
    310c:	3c 85       	ldd	r19, Y+12	; 0x0c
    310e:	b9 01       	movw	r22, r18
    3110:	0e 94 8d 20 	call	0x411a	; 0x411a <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    3114:	8f 81       	ldd	r24, Y+7	; 0x07
    3116:	98 85       	ldd	r25, Y+8	; 0x08
    3118:	0e 94 2c 1a 	call	0x3458	; 0x3458 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    311c:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
    3120:	88 23       	and	r24, r24
    3122:	09 f0       	breq	.+2      	; 0x3126 <xQueueGenericReceive+0x184>
    3124:	50 cf       	rjmp	.-352    	; 0x2fc6 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    3126:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
    312a:	4d cf       	rjmp	.-358    	; 0x2fc6 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    312c:	8f 81       	ldd	r24, Y+7	; 0x07
    312e:	98 85       	ldd	r25, Y+8	; 0x08
    3130:	0e 94 2c 1a 	call	0x3458	; 0x3458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3134:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
    3138:	46 cf       	rjmp	.-372    	; 0x2fc6 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    313a:	8f 81       	ldd	r24, Y+7	; 0x07
    313c:	98 85       	ldd	r25, Y+8	; 0x08
    313e:	0e 94 2c 1a 	call	0x3458	; 0x3458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3142:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3146:	1e 86       	std	Y+14, r1	; 0x0e
    3148:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    314a:	2e 96       	adiw	r28, 0x0e	; 14
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	cd b7       	in	r28, 0x3d	; 61
    3162:	de b7       	in	r29, 0x3e	; 62
    3164:	28 97       	sbiw	r28, 0x08	; 8
    3166:	0f b6       	in	r0, 0x3f	; 63
    3168:	f8 94       	cli
    316a:	de bf       	out	0x3e, r29	; 62
    316c:	0f be       	out	0x3f, r0	; 63
    316e:	cd bf       	out	0x3d, r28	; 61
    3170:	9c 83       	std	Y+4, r25	; 0x04
    3172:	8b 83       	std	Y+3, r24	; 0x03
    3174:	7e 83       	std	Y+6, r23	; 0x06
    3176:	6d 83       	std	Y+5, r22	; 0x05
    3178:	58 87       	std	Y+8, r21	; 0x08
    317a:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    317c:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    317e:	eb 81       	ldd	r30, Y+3	; 0x03
    3180:	fc 81       	ldd	r31, Y+4	; 0x04
    3182:	82 8d       	ldd	r24, Z+26	; 0x1a
    3184:	88 23       	and	r24, r24
    3186:	71 f1       	breq	.+92     	; 0x31e4 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    3188:	8b 81       	ldd	r24, Y+3	; 0x03
    318a:	9c 81       	ldd	r25, Y+4	; 0x04
    318c:	2d 81       	ldd	r18, Y+5	; 0x05
    318e:	3e 81       	ldd	r19, Y+6	; 0x06
    3190:	b9 01       	movw	r22, r18
    3192:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    3196:	eb 81       	ldd	r30, Y+3	; 0x03
    3198:	fc 81       	ldd	r31, Y+4	; 0x04
    319a:	82 8d       	ldd	r24, Z+26	; 0x1a
    319c:	81 50       	subi	r24, 0x01	; 1
    319e:	eb 81       	ldd	r30, Y+3	; 0x03
    31a0:	fc 81       	ldd	r31, Y+4	; 0x04
    31a2:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    31a4:	eb 81       	ldd	r30, Y+3	; 0x03
    31a6:	fc 81       	ldd	r31, Y+4	; 0x04
    31a8:	85 8d       	ldd	r24, Z+29	; 0x1d
    31aa:	8f 3f       	cpi	r24, 0xFF	; 255
    31ac:	89 f4       	brne	.+34     	; 0x31d0 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    31ae:	eb 81       	ldd	r30, Y+3	; 0x03
    31b0:	fc 81       	ldd	r31, Y+4	; 0x04
    31b2:	80 85       	ldd	r24, Z+8	; 0x08
    31b4:	88 23       	and	r24, r24
    31b6:	99 f0       	breq	.+38     	; 0x31de <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    31b8:	8b 81       	ldd	r24, Y+3	; 0x03
    31ba:	9c 81       	ldd	r25, Y+4	; 0x04
    31bc:	08 96       	adiw	r24, 0x08	; 8
    31be:	0e 94 d6 20 	call	0x41ac	; 0x41ac <xTaskRemoveFromEventList>
    31c2:	88 23       	and	r24, r24
    31c4:	61 f0       	breq	.+24     	; 0x31de <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    31c6:	ef 81       	ldd	r30, Y+7	; 0x07
    31c8:	f8 85       	ldd	r31, Y+8	; 0x08
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	80 83       	st	Z, r24
    31ce:	07 c0       	rjmp	.+14     	; 0x31de <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    31d0:	eb 81       	ldd	r30, Y+3	; 0x03
    31d2:	fc 81       	ldd	r31, Y+4	; 0x04
    31d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    31d6:	8f 5f       	subi	r24, 0xFF	; 255
    31d8:	eb 81       	ldd	r30, Y+3	; 0x03
    31da:	fc 81       	ldd	r31, Y+4	; 0x04
    31dc:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	8a 83       	std	Y+2, r24	; 0x02
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    31e4:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
}
    31e8:	28 96       	adiw	r28, 0x08	; 8
    31ea:	0f b6       	in	r0, 0x3f	; 63
    31ec:	f8 94       	cli
    31ee:	de bf       	out	0x3e, r29	; 62
    31f0:	0f be       	out	0x3f, r0	; 63
    31f2:	cd bf       	out	0x3d, r28	; 61
    31f4:	cf 91       	pop	r28
    31f6:	df 91       	pop	r29
    31f8:	08 95       	ret

000031fa <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    31fa:	df 93       	push	r29
    31fc:	cf 93       	push	r28
    31fe:	00 d0       	rcall	.+0      	; 0x3200 <uxQueueMessagesWaiting+0x6>
    3200:	0f 92       	push	r0
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	9b 83       	std	Y+3, r25	; 0x03
    3208:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    3210:	ea 81       	ldd	r30, Y+2	; 0x02
    3212:	fb 81       	ldd	r31, Y+3	; 0x03
    3214:	82 8d       	ldd	r24, Z+26	; 0x1a
    3216:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3218:	0f 90       	pop	r0
    321a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    321c:	89 81       	ldd	r24, Y+1	; 0x01
}
    321e:	0f 90       	pop	r0
    3220:	0f 90       	pop	r0
    3222:	0f 90       	pop	r0
    3224:	cf 91       	pop	r28
    3226:	df 91       	pop	r29
    3228:	08 95       	ret

0000322a <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    322a:	df 93       	push	r29
    322c:	cf 93       	push	r28
    322e:	00 d0       	rcall	.+0      	; 0x3230 <uxQueueMessagesWaitingFromISR+0x6>
    3230:	0f 92       	push	r0
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	9b 83       	std	Y+3, r25	; 0x03
    3238:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    323a:	ea 81       	ldd	r30, Y+2	; 0x02
    323c:	fb 81       	ldd	r31, Y+3	; 0x03
    323e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3240:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    3242:	89 81       	ldd	r24, Y+1	; 0x01
}
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	0f 90       	pop	r0
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3250:	df 93       	push	r29
    3252:	cf 93       	push	r28
    3254:	00 d0       	rcall	.+0      	; 0x3256 <vQueueDelete+0x6>
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	9a 83       	std	Y+2, r25	; 0x02
    325c:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    325e:	e9 81       	ldd	r30, Y+1	; 0x01
    3260:	fa 81       	ldd	r31, Y+2	; 0x02
    3262:	80 81       	ld	r24, Z
    3264:	91 81       	ldd	r25, Z+1	; 0x01
    3266:	0e 94 a0 11 	call	0x2340	; 0x2340 <vPortFree>
	vPortFree( pxQueue );
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	9a 81       	ldd	r25, Y+2	; 0x02
    326e:	0e 94 a0 11 	call	0x2340	; 0x2340 <vPortFree>
}
    3272:	0f 90       	pop	r0
    3274:	0f 90       	pop	r0
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	00 d0       	rcall	.+0      	; 0x3282 <prvCopyDataToQueue+0x6>
    3282:	00 d0       	rcall	.+0      	; 0x3284 <prvCopyDataToQueue+0x8>
    3284:	0f 92       	push	r0
    3286:	cd b7       	in	r28, 0x3d	; 61
    3288:	de b7       	in	r29, 0x3e	; 62
    328a:	9a 83       	std	Y+2, r25	; 0x02
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	7c 83       	std	Y+4, r23	; 0x04
    3290:	6b 83       	std	Y+3, r22	; 0x03
    3292:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3294:	e9 81       	ldd	r30, Y+1	; 0x01
    3296:	fa 81       	ldd	r31, Y+2	; 0x02
    3298:	84 8d       	ldd	r24, Z+28	; 0x1c
    329a:	88 23       	and	r24, r24
    329c:	91 f4       	brne	.+36     	; 0x32c2 <prvCopyDataToQueue+0x46>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    329e:	e9 81       	ldd	r30, Y+1	; 0x01
    32a0:	fa 81       	ldd	r31, Y+2	; 0x02
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	00 97       	sbiw	r24, 0x00	; 0
    32a8:	09 f0       	breq	.+2      	; 0x32ac <prvCopyDataToQueue+0x30>
    32aa:	7f c0       	rjmp	.+254    	; 0x33aa <prvCopyDataToQueue+0x12e>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    32ac:	e9 81       	ldd	r30, Y+1	; 0x01
    32ae:	fa 81       	ldd	r31, Y+2	; 0x02
    32b0:	82 81       	ldd	r24, Z+2	; 0x02
    32b2:	93 81       	ldd	r25, Z+3	; 0x03
    32b4:	0e 94 ed 23 	call	0x47da	; 0x47da <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    32b8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ba:	fa 81       	ldd	r31, Y+2	; 0x02
    32bc:	13 82       	std	Z+3, r1	; 0x03
    32be:	12 82       	std	Z+2, r1	; 0x02
    32c0:	74 c0       	rjmp	.+232    	; 0x33aa <prvCopyDataToQueue+0x12e>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    32c2:	8d 81       	ldd	r24, Y+5	; 0x05
    32c4:	88 23       	and	r24, r24
    32c6:	99 f5       	brne	.+102    	; 0x332e <prvCopyDataToQueue+0xb2>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    32c8:	e9 81       	ldd	r30, Y+1	; 0x01
    32ca:	fa 81       	ldd	r31, Y+2	; 0x02
    32cc:	64 81       	ldd	r22, Z+4	; 0x04
    32ce:	75 81       	ldd	r23, Z+5	; 0x05
    32d0:	e9 81       	ldd	r30, Y+1	; 0x01
    32d2:	fa 81       	ldd	r31, Y+2	; 0x02
    32d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    32d6:	48 2f       	mov	r20, r24
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	2b 81       	ldd	r18, Y+3	; 0x03
    32dc:	3c 81       	ldd	r19, Y+4	; 0x04
    32de:	cb 01       	movw	r24, r22
    32e0:	b9 01       	movw	r22, r18
    32e2:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    32e6:	e9 81       	ldd	r30, Y+1	; 0x01
    32e8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ea:	24 81       	ldd	r18, Z+4	; 0x04
    32ec:	35 81       	ldd	r19, Z+5	; 0x05
    32ee:	e9 81       	ldd	r30, Y+1	; 0x01
    32f0:	fa 81       	ldd	r31, Y+2	; 0x02
    32f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    32f4:	88 2f       	mov	r24, r24
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	82 0f       	add	r24, r18
    32fa:	93 1f       	adc	r25, r19
    32fc:	e9 81       	ldd	r30, Y+1	; 0x01
    32fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3300:	95 83       	std	Z+5, r25	; 0x05
    3302:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3304:	e9 81       	ldd	r30, Y+1	; 0x01
    3306:	fa 81       	ldd	r31, Y+2	; 0x02
    3308:	24 81       	ldd	r18, Z+4	; 0x04
    330a:	35 81       	ldd	r19, Z+5	; 0x05
    330c:	e9 81       	ldd	r30, Y+1	; 0x01
    330e:	fa 81       	ldd	r31, Y+2	; 0x02
    3310:	82 81       	ldd	r24, Z+2	; 0x02
    3312:	93 81       	ldd	r25, Z+3	; 0x03
    3314:	28 17       	cp	r18, r24
    3316:	39 07       	cpc	r19, r25
    3318:	08 f4       	brcc	.+2      	; 0x331c <prvCopyDataToQueue+0xa0>
    331a:	47 c0       	rjmp	.+142    	; 0x33aa <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    331c:	e9 81       	ldd	r30, Y+1	; 0x01
    331e:	fa 81       	ldd	r31, Y+2	; 0x02
    3320:	80 81       	ld	r24, Z
    3322:	91 81       	ldd	r25, Z+1	; 0x01
    3324:	e9 81       	ldd	r30, Y+1	; 0x01
    3326:	fa 81       	ldd	r31, Y+2	; 0x02
    3328:	95 83       	std	Z+5, r25	; 0x05
    332a:	84 83       	std	Z+4, r24	; 0x04
    332c:	3e c0       	rjmp	.+124    	; 0x33aa <prvCopyDataToQueue+0x12e>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    332e:	e9 81       	ldd	r30, Y+1	; 0x01
    3330:	fa 81       	ldd	r31, Y+2	; 0x02
    3332:	66 81       	ldd	r22, Z+6	; 0x06
    3334:	77 81       	ldd	r23, Z+7	; 0x07
    3336:	e9 81       	ldd	r30, Y+1	; 0x01
    3338:	fa 81       	ldd	r31, Y+2	; 0x02
    333a:	84 8d       	ldd	r24, Z+28	; 0x1c
    333c:	48 2f       	mov	r20, r24
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	2b 81       	ldd	r18, Y+3	; 0x03
    3342:	3c 81       	ldd	r19, Y+4	; 0x04
    3344:	cb 01       	movw	r24, r22
    3346:	b9 01       	movw	r22, r18
    3348:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    334c:	e9 81       	ldd	r30, Y+1	; 0x01
    334e:	fa 81       	ldd	r31, Y+2	; 0x02
    3350:	26 81       	ldd	r18, Z+6	; 0x06
    3352:	37 81       	ldd	r19, Z+7	; 0x07
    3354:	e9 81       	ldd	r30, Y+1	; 0x01
    3356:	fa 81       	ldd	r31, Y+2	; 0x02
    3358:	84 8d       	ldd	r24, Z+28	; 0x1c
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	90 95       	com	r25
    3360:	81 95       	neg	r24
    3362:	9f 4f       	sbci	r25, 0xFF	; 255
    3364:	82 0f       	add	r24, r18
    3366:	93 1f       	adc	r25, r19
    3368:	e9 81       	ldd	r30, Y+1	; 0x01
    336a:	fa 81       	ldd	r31, Y+2	; 0x02
    336c:	97 83       	std	Z+7, r25	; 0x07
    336e:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3370:	e9 81       	ldd	r30, Y+1	; 0x01
    3372:	fa 81       	ldd	r31, Y+2	; 0x02
    3374:	26 81       	ldd	r18, Z+6	; 0x06
    3376:	37 81       	ldd	r19, Z+7	; 0x07
    3378:	e9 81       	ldd	r30, Y+1	; 0x01
    337a:	fa 81       	ldd	r31, Y+2	; 0x02
    337c:	80 81       	ld	r24, Z
    337e:	91 81       	ldd	r25, Z+1	; 0x01
    3380:	28 17       	cp	r18, r24
    3382:	39 07       	cpc	r19, r25
    3384:	90 f4       	brcc	.+36     	; 0x33aa <prvCopyDataToQueue+0x12e>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3386:	e9 81       	ldd	r30, Y+1	; 0x01
    3388:	fa 81       	ldd	r31, Y+2	; 0x02
    338a:	22 81       	ldd	r18, Z+2	; 0x02
    338c:	33 81       	ldd	r19, Z+3	; 0x03
    338e:	e9 81       	ldd	r30, Y+1	; 0x01
    3390:	fa 81       	ldd	r31, Y+2	; 0x02
    3392:	84 8d       	ldd	r24, Z+28	; 0x1c
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	90 95       	com	r25
    339a:	81 95       	neg	r24
    339c:	9f 4f       	sbci	r25, 0xFF	; 255
    339e:	82 0f       	add	r24, r18
    33a0:	93 1f       	adc	r25, r19
    33a2:	e9 81       	ldd	r30, Y+1	; 0x01
    33a4:	fa 81       	ldd	r31, Y+2	; 0x02
    33a6:	97 83       	std	Z+7, r25	; 0x07
    33a8:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    33aa:	e9 81       	ldd	r30, Y+1	; 0x01
    33ac:	fa 81       	ldd	r31, Y+2	; 0x02
    33ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    33b0:	8f 5f       	subi	r24, 0xFF	; 255
    33b2:	e9 81       	ldd	r30, Y+1	; 0x01
    33b4:	fa 81       	ldd	r31, Y+2	; 0x02
    33b6:	82 8f       	std	Z+26, r24	; 0x1a
}
    33b8:	0f 90       	pop	r0
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	00 d0       	rcall	.+0      	; 0x33ce <prvCopyDataFromQueue+0x6>
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <prvCopyDataFromQueue+0x8>
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	9a 83       	std	Y+2, r25	; 0x02
    33d6:	89 83       	std	Y+1, r24	; 0x01
    33d8:	7c 83       	std	Y+4, r23	; 0x04
    33da:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    33dc:	e9 81       	ldd	r30, Y+1	; 0x01
    33de:	fa 81       	ldd	r31, Y+2	; 0x02
    33e0:	80 81       	ld	r24, Z
    33e2:	91 81       	ldd	r25, Z+1	; 0x01
    33e4:	00 97       	sbiw	r24, 0x00	; 0
    33e6:	89 f1       	breq	.+98     	; 0x344a <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    33e8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ea:	fa 81       	ldd	r31, Y+2	; 0x02
    33ec:	26 81       	ldd	r18, Z+6	; 0x06
    33ee:	37 81       	ldd	r19, Z+7	; 0x07
    33f0:	e9 81       	ldd	r30, Y+1	; 0x01
    33f2:	fa 81       	ldd	r31, Y+2	; 0x02
    33f4:	84 8d       	ldd	r24, Z+28	; 0x1c
    33f6:	88 2f       	mov	r24, r24
    33f8:	90 e0       	ldi	r25, 0x00	; 0
    33fa:	82 0f       	add	r24, r18
    33fc:	93 1f       	adc	r25, r19
    33fe:	e9 81       	ldd	r30, Y+1	; 0x01
    3400:	fa 81       	ldd	r31, Y+2	; 0x02
    3402:	97 83       	std	Z+7, r25	; 0x07
    3404:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3406:	e9 81       	ldd	r30, Y+1	; 0x01
    3408:	fa 81       	ldd	r31, Y+2	; 0x02
    340a:	26 81       	ldd	r18, Z+6	; 0x06
    340c:	37 81       	ldd	r19, Z+7	; 0x07
    340e:	e9 81       	ldd	r30, Y+1	; 0x01
    3410:	fa 81       	ldd	r31, Y+2	; 0x02
    3412:	82 81       	ldd	r24, Z+2	; 0x02
    3414:	93 81       	ldd	r25, Z+3	; 0x03
    3416:	28 17       	cp	r18, r24
    3418:	39 07       	cpc	r19, r25
    341a:	40 f0       	brcs	.+16     	; 0x342c <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    341c:	e9 81       	ldd	r30, Y+1	; 0x01
    341e:	fa 81       	ldd	r31, Y+2	; 0x02
    3420:	80 81       	ld	r24, Z
    3422:	91 81       	ldd	r25, Z+1	; 0x01
    3424:	e9 81       	ldd	r30, Y+1	; 0x01
    3426:	fa 81       	ldd	r31, Y+2	; 0x02
    3428:	97 83       	std	Z+7, r25	; 0x07
    342a:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    342c:	e9 81       	ldd	r30, Y+1	; 0x01
    342e:	fa 81       	ldd	r31, Y+2	; 0x02
    3430:	46 81       	ldd	r20, Z+6	; 0x06
    3432:	57 81       	ldd	r21, Z+7	; 0x07
    3434:	e9 81       	ldd	r30, Y+1	; 0x01
    3436:	fa 81       	ldd	r31, Y+2	; 0x02
    3438:	84 8d       	ldd	r24, Z+28	; 0x1c
    343a:	28 2f       	mov	r18, r24
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	ba 01       	movw	r22, r20
    3444:	a9 01       	movw	r20, r18
    3446:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
	}
}
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3458:	df 93       	push	r29
    345a:	cf 93       	push	r28
    345c:	00 d0       	rcall	.+0      	; 0x345e <prvUnlockQueue+0x6>
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	9a 83       	std	Y+2, r25	; 0x02
    3464:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	0f 92       	push	r0
    346c:	15 c0       	rjmp	.+42     	; 0x3498 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    346e:	e9 81       	ldd	r30, Y+1	; 0x01
    3470:	fa 81       	ldd	r31, Y+2	; 0x02
    3472:	81 89       	ldd	r24, Z+17	; 0x11
    3474:	88 23       	and	r24, r24
    3476:	a9 f0       	breq	.+42     	; 0x34a2 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3478:	89 81       	ldd	r24, Y+1	; 0x01
    347a:	9a 81       	ldd	r25, Y+2	; 0x02
    347c:	41 96       	adiw	r24, 0x11	; 17
    347e:	0e 94 d6 20 	call	0x41ac	; 0x41ac <xTaskRemoveFromEventList>
    3482:	88 23       	and	r24, r24
    3484:	11 f0       	breq	.+4      	; 0x348a <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3486:	0e 94 be 21 	call	0x437c	; 0x437c <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    348a:	e9 81       	ldd	r30, Y+1	; 0x01
    348c:	fa 81       	ldd	r31, Y+2	; 0x02
    348e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3490:	81 50       	subi	r24, 0x01	; 1
    3492:	e9 81       	ldd	r30, Y+1	; 0x01
    3494:	fa 81       	ldd	r31, Y+2	; 0x02
    3496:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3498:	e9 81       	ldd	r30, Y+1	; 0x01
    349a:	fa 81       	ldd	r31, Y+2	; 0x02
    349c:	86 8d       	ldd	r24, Z+30	; 0x1e
    349e:	18 16       	cp	r1, r24
    34a0:	34 f3       	brlt	.-52     	; 0x346e <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    34a2:	e9 81       	ldd	r30, Y+1	; 0x01
    34a4:	fa 81       	ldd	r31, Y+2	; 0x02
    34a6:	8f ef       	ldi	r24, 0xFF	; 255
    34a8:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    34aa:	0f 90       	pop	r0
    34ac:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	0f 92       	push	r0
    34b4:	15 c0       	rjmp	.+42     	; 0x34e0 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    34b6:	e9 81       	ldd	r30, Y+1	; 0x01
    34b8:	fa 81       	ldd	r31, Y+2	; 0x02
    34ba:	80 85       	ldd	r24, Z+8	; 0x08
    34bc:	88 23       	and	r24, r24
    34be:	a9 f0       	breq	.+42     	; 0x34ea <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    34c0:	89 81       	ldd	r24, Y+1	; 0x01
    34c2:	9a 81       	ldd	r25, Y+2	; 0x02
    34c4:	08 96       	adiw	r24, 0x08	; 8
    34c6:	0e 94 d6 20 	call	0x41ac	; 0x41ac <xTaskRemoveFromEventList>
    34ca:	88 23       	and	r24, r24
    34cc:	11 f0       	breq	.+4      	; 0x34d2 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    34ce:	0e 94 be 21 	call	0x437c	; 0x437c <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    34d2:	e9 81       	ldd	r30, Y+1	; 0x01
    34d4:	fa 81       	ldd	r31, Y+2	; 0x02
    34d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    34d8:	81 50       	subi	r24, 0x01	; 1
    34da:	e9 81       	ldd	r30, Y+1	; 0x01
    34dc:	fa 81       	ldd	r31, Y+2	; 0x02
    34de:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    34e0:	e9 81       	ldd	r30, Y+1	; 0x01
    34e2:	fa 81       	ldd	r31, Y+2	; 0x02
    34e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    34e6:	18 16       	cp	r1, r24
    34e8:	34 f3       	brlt	.-52     	; 0x34b6 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    34ea:	e9 81       	ldd	r30, Y+1	; 0x01
    34ec:	fa 81       	ldd	r31, Y+2	; 0x02
    34ee:	8f ef       	ldi	r24, 0xFF	; 255
    34f0:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    34f2:	0f 90       	pop	r0
    34f4:	0f be       	out	0x3f, r0	; 63
}
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	08 95       	ret

00003500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	00 d0       	rcall	.+0      	; 0x3506 <prvIsQueueEmpty+0x6>
    3506:	0f 92       	push	r0
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    350c:	9b 83       	std	Y+3, r25	; 0x03
    350e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3516:	ea 81       	ldd	r30, Y+2	; 0x02
    3518:	fb 81       	ldd	r31, Y+3	; 0x03
    351a:	82 8d       	ldd	r24, Z+26	; 0x1a
    351c:	19 82       	std	Y+1, r1	; 0x01
    351e:	88 23       	and	r24, r24
    3520:	11 f4       	brne	.+4      	; 0x3526 <prvIsQueueEmpty+0x26>
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3526:	0f 90       	pop	r0
    3528:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    352a:	89 81       	ldd	r24, Y+1	; 0x01
}
    352c:	0f 90       	pop	r0
    352e:	0f 90       	pop	r0
    3530:	0f 90       	pop	r0
    3532:	cf 91       	pop	r28
    3534:	df 91       	pop	r29
    3536:	08 95       	ret

00003538 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	00 d0       	rcall	.+0      	; 0x353e <xQueueIsQueueEmptyFromISR+0x6>
    353e:	0f 92       	push	r0
    3540:	cd b7       	in	r28, 0x3d	; 61
    3542:	de b7       	in	r29, 0x3e	; 62
    3544:	9b 83       	std	Y+3, r25	; 0x03
    3546:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3548:	ea 81       	ldd	r30, Y+2	; 0x02
    354a:	fb 81       	ldd	r31, Y+3	; 0x03
    354c:	82 8d       	ldd	r24, Z+26	; 0x1a
    354e:	19 82       	std	Y+1, r1	; 0x01
    3550:	88 23       	and	r24, r24
    3552:	11 f4       	brne	.+4      	; 0x3558 <xQueueIsQueueEmptyFromISR+0x20>
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3558:	89 81       	ldd	r24, Y+1	; 0x01
}
    355a:	0f 90       	pop	r0
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cf 91       	pop	r28
    3562:	df 91       	pop	r29
    3564:	08 95       	ret

00003566 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3566:	df 93       	push	r29
    3568:	cf 93       	push	r28
    356a:	00 d0       	rcall	.+0      	; 0x356c <prvIsQueueFull+0x6>
    356c:	0f 92       	push	r0
    356e:	cd b7       	in	r28, 0x3d	; 61
    3570:	de b7       	in	r29, 0x3e	; 62
    3572:	9b 83       	std	Y+3, r25	; 0x03
    3574:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    357c:	ea 81       	ldd	r30, Y+2	; 0x02
    357e:	fb 81       	ldd	r31, Y+3	; 0x03
    3580:	92 8d       	ldd	r25, Z+26	; 0x1a
    3582:	ea 81       	ldd	r30, Y+2	; 0x02
    3584:	fb 81       	ldd	r31, Y+3	; 0x03
    3586:	83 8d       	ldd	r24, Z+27	; 0x1b
    3588:	19 82       	std	Y+1, r1	; 0x01
    358a:	98 17       	cp	r25, r24
    358c:	11 f4       	brne	.+4      	; 0x3592 <prvIsQueueFull+0x2c>
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3592:	0f 90       	pop	r0
    3594:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3596:	89 81       	ldd	r24, Y+1	; 0x01
}
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	cf 91       	pop	r28
    35a0:	df 91       	pop	r29
    35a2:	08 95       	ret

000035a4 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    35a4:	df 93       	push	r29
    35a6:	cf 93       	push	r28
    35a8:	00 d0       	rcall	.+0      	; 0x35aa <xQueueIsQueueFullFromISR+0x6>
    35aa:	0f 92       	push	r0
    35ac:	cd b7       	in	r28, 0x3d	; 61
    35ae:	de b7       	in	r29, 0x3e	; 62
    35b0:	9b 83       	std	Y+3, r25	; 0x03
    35b2:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    35b4:	ea 81       	ldd	r30, Y+2	; 0x02
    35b6:	fb 81       	ldd	r31, Y+3	; 0x03
    35b8:	92 8d       	ldd	r25, Z+26	; 0x1a
    35ba:	ea 81       	ldd	r30, Y+2	; 0x02
    35bc:	fb 81       	ldd	r31, Y+3	; 0x03
    35be:	83 8d       	ldd	r24, Z+27	; 0x1b
    35c0:	19 82       	std	Y+1, r1	; 0x01
    35c2:	98 17       	cp	r25, r24
    35c4:	11 f4       	brne	.+4      	; 0x35ca <xQueueIsQueueFullFromISR+0x26>
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	cf 91       	pop	r28
    35d4:	df 91       	pop	r29
    35d6:	08 95       	ret

000035d8 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    35d8:	af 92       	push	r10
    35da:	bf 92       	push	r11
    35dc:	cf 92       	push	r12
    35de:	df 92       	push	r13
    35e0:	ef 92       	push	r14
    35e2:	ff 92       	push	r15
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	df 93       	push	r29
    35ea:	cf 93       	push	r28
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	64 97       	sbiw	r28, 0x14	; 20
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	9f 83       	std	Y+7, r25	; 0x07
    35fe:	8e 83       	std	Y+6, r24	; 0x06
    3600:	79 87       	std	Y+9, r23	; 0x09
    3602:	68 87       	std	Y+8, r22	; 0x08
    3604:	5b 87       	std	Y+11, r21	; 0x0b
    3606:	4a 87       	std	Y+10, r20	; 0x0a
    3608:	3d 87       	std	Y+13, r19	; 0x0d
    360a:	2c 87       	std	Y+12, r18	; 0x0c
    360c:	0e 87       	std	Y+14, r16	; 0x0e
    360e:	f8 8a       	std	Y+16, r15	; 0x10
    3610:	ef 86       	std	Y+15, r14	; 0x0f
    3612:	da 8a       	std	Y+18, r13	; 0x12
    3614:	c9 8a       	std	Y+17, r12	; 0x11
    3616:	bc 8a       	std	Y+20, r11	; 0x14
    3618:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    361a:	8a 85       	ldd	r24, Y+10	; 0x0a
    361c:	9b 85       	ldd	r25, Y+11	; 0x0b
    361e:	29 89       	ldd	r18, Y+17	; 0x11
    3620:	3a 89       	ldd	r19, Y+18	; 0x12
    3622:	b9 01       	movw	r22, r18
    3624:	0e 94 f5 22 	call	0x45ea	; 0x45ea <prvAllocateTCBAndStack>
    3628:	9c 83       	std	Y+4, r25	; 0x04
    362a:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    362c:	8b 81       	ldd	r24, Y+3	; 0x03
    362e:	9c 81       	ldd	r25, Y+4	; 0x04
    3630:	00 97       	sbiw	r24, 0x00	; 0
    3632:	09 f4       	brne	.+2      	; 0x3636 <xTaskGenericCreate+0x5e>
    3634:	99 c0       	rjmp	.+306    	; 0x3768 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3636:	eb 81       	ldd	r30, Y+3	; 0x03
    3638:	fc 81       	ldd	r31, Y+4	; 0x04
    363a:	27 89       	ldd	r18, Z+23	; 0x17
    363c:	30 8d       	ldd	r19, Z+24	; 0x18
    363e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3640:	9b 85       	ldd	r25, Y+11	; 0x0b
    3642:	01 97       	sbiw	r24, 0x01	; 1
    3644:	82 0f       	add	r24, r18
    3646:	93 1f       	adc	r25, r19
    3648:	9a 83       	std	Y+2, r25	; 0x02
    364a:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    364c:	8b 81       	ldd	r24, Y+3	; 0x03
    364e:	9c 81       	ldd	r25, Y+4	; 0x04
    3650:	28 85       	ldd	r18, Y+8	; 0x08
    3652:	39 85       	ldd	r19, Y+9	; 0x09
    3654:	eb 89       	ldd	r30, Y+19	; 0x13
    3656:	fc 89       	ldd	r31, Y+20	; 0x14
    3658:	aa 85       	ldd	r26, Y+10	; 0x0a
    365a:	bb 85       	ldd	r27, Y+11	; 0x0b
    365c:	b9 01       	movw	r22, r18
    365e:	4e 85       	ldd	r20, Y+14	; 0x0e
    3660:	9f 01       	movw	r18, r30
    3662:	8d 01       	movw	r16, r26
    3664:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	9a 81       	ldd	r25, Y+2	; 0x02
    366c:	2e 81       	ldd	r18, Y+6	; 0x06
    366e:	3f 81       	ldd	r19, Y+7	; 0x07
    3670:	4c 85       	ldd	r20, Y+12	; 0x0c
    3672:	5d 85       	ldd	r21, Y+13	; 0x0d
    3674:	b9 01       	movw	r22, r18
    3676:	0e 94 01 13 	call	0x2602	; 0x2602 <pxPortInitialiseStack>
    367a:	eb 81       	ldd	r30, Y+3	; 0x03
    367c:	fc 81       	ldd	r31, Y+4	; 0x04
    367e:	91 83       	std	Z+1, r25	; 0x01
    3680:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    3682:	8f 85       	ldd	r24, Y+15	; 0x0f
    3684:	98 89       	ldd	r25, Y+16	; 0x10
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	31 f0       	breq	.+12     	; 0x3696 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    368a:	ef 85       	ldd	r30, Y+15	; 0x0f
    368c:	f8 89       	ldd	r31, Y+16	; 0x10
    368e:	8b 81       	ldd	r24, Y+3	; 0x03
    3690:	9c 81       	ldd	r25, Y+4	; 0x04
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3696:	0f b6       	in	r0, 0x3f	; 63
    3698:	f8 94       	cli
    369a:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    369c:	80 91 c1 06 	lds	r24, 0x06C1
    36a0:	8f 5f       	subi	r24, 0xFF	; 255
    36a2:	80 93 c1 06 	sts	0x06C1, r24
			if( pxCurrentTCB == NULL )
    36a6:	80 91 be 06 	lds	r24, 0x06BE
    36aa:	90 91 bf 06 	lds	r25, 0x06BF
    36ae:	00 97       	sbiw	r24, 0x00	; 0
    36b0:	69 f4       	brne	.+26     	; 0x36cc <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    36b2:	8b 81       	ldd	r24, Y+3	; 0x03
    36b4:	9c 81       	ldd	r25, Y+4	; 0x04
    36b6:	90 93 bf 06 	sts	0x06BF, r25
    36ba:	80 93 be 06 	sts	0x06BE, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    36be:	80 91 c1 06 	lds	r24, 0x06C1
    36c2:	81 30       	cpi	r24, 0x01	; 1
    36c4:	a9 f4       	brne	.+42     	; 0x36f0 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    36c6:	0e 94 2d 22 	call	0x445a	; 0x445a <prvInitialiseTaskLists>
    36ca:	12 c0       	rjmp	.+36     	; 0x36f0 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    36cc:	80 91 c6 06 	lds	r24, 0x06C6
    36d0:	88 23       	and	r24, r24
    36d2:	71 f4       	brne	.+28     	; 0x36f0 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    36d4:	e0 91 be 06 	lds	r30, 0x06BE
    36d8:	f0 91 bf 06 	lds	r31, 0x06BF
    36dc:	96 89       	ldd	r25, Z+22	; 0x16
    36de:	8e 85       	ldd	r24, Y+14	; 0x0e
    36e0:	89 17       	cp	r24, r25
    36e2:	30 f0       	brcs	.+12     	; 0x36f0 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	9c 81       	ldd	r25, Y+4	; 0x04
    36e8:	90 93 bf 06 	sts	0x06BF, r25
    36ec:	80 93 be 06 	sts	0x06BE, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    36f0:	eb 81       	ldd	r30, Y+3	; 0x03
    36f2:	fc 81       	ldd	r31, Y+4	; 0x04
    36f4:	96 89       	ldd	r25, Z+22	; 0x16
    36f6:	80 91 c4 06 	lds	r24, 0x06C4
    36fa:	89 17       	cp	r24, r25
    36fc:	28 f4       	brcc	.+10     	; 0x3708 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    36fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3700:	fc 81       	ldd	r31, Y+4	; 0x04
    3702:	86 89       	ldd	r24, Z+22	; 0x16
    3704:	80 93 c4 06 	sts	0x06C4, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3708:	80 91 cb 06 	lds	r24, 0x06CB
    370c:	8f 5f       	subi	r24, 0xFF	; 255
    370e:	80 93 cb 06 	sts	0x06CB, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    3712:	eb 81       	ldd	r30, Y+3	; 0x03
    3714:	fc 81       	ldd	r31, Y+4	; 0x04
    3716:	96 89       	ldd	r25, Z+22	; 0x16
    3718:	80 91 c5 06 	lds	r24, 0x06C5
    371c:	89 17       	cp	r24, r25
    371e:	28 f4       	brcc	.+10     	; 0x372a <xTaskGenericCreate+0x152>
    3720:	eb 81       	ldd	r30, Y+3	; 0x03
    3722:	fc 81       	ldd	r31, Y+4	; 0x04
    3724:	86 89       	ldd	r24, Z+22	; 0x16
    3726:	80 93 c5 06 	sts	0x06C5, r24
    372a:	eb 81       	ldd	r30, Y+3	; 0x03
    372c:	fc 81       	ldd	r31, Y+4	; 0x04
    372e:	86 89       	ldd	r24, Z+22	; 0x16
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	c9 01       	movw	r24, r18
    3736:	88 0f       	add	r24, r24
    3738:	99 1f       	adc	r25, r25
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	88 0f       	add	r24, r24
    3740:	99 1f       	adc	r25, r25
    3742:	82 0f       	add	r24, r18
    3744:	93 1f       	adc	r25, r19
    3746:	ac 01       	movw	r20, r24
    3748:	44 53       	subi	r20, 0x34	; 52
    374a:	59 4f       	sbci	r21, 0xF9	; 249
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	9c 81       	ldd	r25, Y+4	; 0x04
    3750:	9c 01       	movw	r18, r24
    3752:	2e 5f       	subi	r18, 0xFE	; 254
    3754:	3f 4f       	sbci	r19, 0xFF	; 255
    3756:	ca 01       	movw	r24, r20
    3758:	b9 01       	movw	r22, r18
    375a:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>

			xReturn = pdPASS;
    375e:	81 e0       	ldi	r24, 0x01	; 1
    3760:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3762:	0f 90       	pop	r0
    3764:	0f be       	out	0x3f, r0	; 63
    3766:	02 c0       	rjmp	.+4      	; 0x376c <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3768:	8f ef       	ldi	r24, 0xFF	; 255
    376a:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    376c:	8d 81       	ldd	r24, Y+5	; 0x05
    376e:	81 30       	cpi	r24, 0x01	; 1
    3770:	71 f4       	brne	.+28     	; 0x378e <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    3772:	80 91 c6 06 	lds	r24, 0x06C6
    3776:	88 23       	and	r24, r24
    3778:	51 f0       	breq	.+20     	; 0x378e <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    377a:	e0 91 be 06 	lds	r30, 0x06BE
    377e:	f0 91 bf 06 	lds	r31, 0x06BF
    3782:	96 89       	ldd	r25, Z+22	; 0x16
    3784:	8e 85       	ldd	r24, Y+14	; 0x0e
    3786:	98 17       	cp	r25, r24
    3788:	10 f4       	brcc	.+4      	; 0x378e <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    378a:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
			}
		}
	}

	return xReturn;
    378e:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3790:	64 96       	adiw	r28, 0x14	; 20
    3792:	0f b6       	in	r0, 0x3f	; 63
    3794:	f8 94       	cli
    3796:	de bf       	out	0x3e, r29	; 62
    3798:	0f be       	out	0x3f, r0	; 63
    379a:	cd bf       	out	0x3d, r28	; 61
    379c:	cf 91       	pop	r28
    379e:	df 91       	pop	r29
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	ff 90       	pop	r15
    37a6:	ef 90       	pop	r14
    37a8:	df 90       	pop	r13
    37aa:	cf 90       	pop	r12
    37ac:	bf 90       	pop	r11
    37ae:	af 90       	pop	r10
    37b0:	08 95       	ret

000037b2 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	00 d0       	rcall	.+0      	; 0x37b8 <vTaskDelete+0x6>
    37b8:	00 d0       	rcall	.+0      	; 0x37ba <vTaskDelete+0x8>
    37ba:	00 d0       	rcall	.+0      	; 0x37bc <vTaskDelete+0xa>
    37bc:	cd b7       	in	r28, 0x3d	; 61
    37be:	de b7       	in	r29, 0x3e	; 62
    37c0:	9c 83       	std	Y+4, r25	; 0x04
    37c2:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    37c4:	0f b6       	in	r0, 0x3f	; 63
    37c6:	f8 94       	cli
    37c8:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    37ca:	20 91 be 06 	lds	r18, 0x06BE
    37ce:	30 91 bf 06 	lds	r19, 0x06BF
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	9c 81       	ldd	r25, Y+4	; 0x04
    37d6:	82 17       	cp	r24, r18
    37d8:	93 07       	cpc	r25, r19
    37da:	11 f4       	brne	.+4      	; 0x37e0 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    37dc:	1c 82       	std	Y+4, r1	; 0x04
    37de:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    37e0:	8b 81       	ldd	r24, Y+3	; 0x03
    37e2:	9c 81       	ldd	r25, Y+4	; 0x04
    37e4:	00 97       	sbiw	r24, 0x00	; 0
    37e6:	39 f4       	brne	.+14     	; 0x37f6 <vTaskDelete+0x44>
    37e8:	80 91 be 06 	lds	r24, 0x06BE
    37ec:	90 91 bf 06 	lds	r25, 0x06BF
    37f0:	9e 83       	std	Y+6, r25	; 0x06
    37f2:	8d 83       	std	Y+5, r24	; 0x05
    37f4:	04 c0       	rjmp	.+8      	; 0x37fe <vTaskDelete+0x4c>
    37f6:	8b 81       	ldd	r24, Y+3	; 0x03
    37f8:	9c 81       	ldd	r25, Y+4	; 0x04
    37fa:	9e 83       	std	Y+6, r25	; 0x06
    37fc:	8d 83       	std	Y+5, r24	; 0x05
    37fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3800:	9e 81       	ldd	r25, Y+6	; 0x06
    3802:	9a 83       	std	Y+2, r25	; 0x02
    3804:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3806:	89 81       	ldd	r24, Y+1	; 0x01
    3808:	9a 81       	ldd	r25, Y+2	; 0x02
    380a:	02 96       	adiw	r24, 0x02	; 2
    380c:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3810:	e9 81       	ldd	r30, Y+1	; 0x01
    3812:	fa 81       	ldd	r31, Y+2	; 0x02
    3814:	84 89       	ldd	r24, Z+20	; 0x14
    3816:	95 89       	ldd	r25, Z+21	; 0x15
    3818:	00 97       	sbiw	r24, 0x00	; 0
    381a:	29 f0       	breq	.+10     	; 0x3826 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    381c:	89 81       	ldd	r24, Y+1	; 0x01
    381e:	9a 81       	ldd	r25, Y+2	; 0x02
    3820:	0c 96       	adiw	r24, 0x0c	; 12
    3822:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    3826:	89 81       	ldd	r24, Y+1	; 0x01
    3828:	9a 81       	ldd	r25, Y+2	; 0x02
    382a:	9c 01       	movw	r18, r24
    382c:	2e 5f       	subi	r18, 0xFE	; 254
    382e:	3f 4f       	sbci	r19, 0xFF	; 255
    3830:	88 e1       	ldi	r24, 0x18	; 24
    3832:	97 e0       	ldi	r25, 0x07	; 7
    3834:	b9 01       	movw	r22, r18
    3836:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    383a:	80 91 c0 06 	lds	r24, 0x06C0
    383e:	8f 5f       	subi	r24, 0xFF	; 255
    3840:	80 93 c0 06 	sts	0x06C0, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    3844:	80 91 cb 06 	lds	r24, 0x06CB
    3848:	8f 5f       	subi	r24, 0xFF	; 255
    384a:	80 93 cb 06 	sts	0x06CB, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    384e:	0f 90       	pop	r0
    3850:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    3852:	80 91 c6 06 	lds	r24, 0x06C6
    3856:	88 23       	and	r24, r24
    3858:	31 f0       	breq	.+12     	; 0x3866 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    385a:	8b 81       	ldd	r24, Y+3	; 0x03
    385c:	9c 81       	ldd	r25, Y+4	; 0x04
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	11 f4       	brne	.+4      	; 0x3866 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    3862:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
			}
		}
	}
    3866:	26 96       	adiw	r28, 0x06	; 6
    3868:	0f b6       	in	r0, 0x3f	; 63
    386a:	f8 94       	cli
    386c:	de bf       	out	0x3e, r29	; 62
    386e:	0f be       	out	0x3f, r0	; 63
    3870:	cd bf       	out	0x3d, r28	; 61
    3872:	cf 91       	pop	r28
    3874:	df 91       	pop	r29
    3876:	08 95       	ret

00003878 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	28 97       	sbiw	r28, 0x08	; 8
    3882:	0f b6       	in	r0, 0x3f	; 63
    3884:	f8 94       	cli
    3886:	de bf       	out	0x3e, r29	; 62
    3888:	0f be       	out	0x3f, r0	; 63
    388a:	cd bf       	out	0x3d, r28	; 61
    388c:	9e 83       	std	Y+6, r25	; 0x06
    388e:	8d 83       	std	Y+5, r24	; 0x05
    3890:	78 87       	std	Y+8, r23	; 0x08
    3892:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    3894:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    3896:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    389a:	ed 81       	ldd	r30, Y+5	; 0x05
    389c:	fe 81       	ldd	r31, Y+6	; 0x06
    389e:	20 81       	ld	r18, Z
    38a0:	31 81       	ldd	r19, Z+1	; 0x01
    38a2:	8f 81       	ldd	r24, Y+7	; 0x07
    38a4:	98 85       	ldd	r25, Y+8	; 0x08
    38a6:	82 0f       	add	r24, r18
    38a8:	93 1f       	adc	r25, r19
    38aa:	9c 83       	std	Y+4, r25	; 0x04
    38ac:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    38ae:	ed 81       	ldd	r30, Y+5	; 0x05
    38b0:	fe 81       	ldd	r31, Y+6	; 0x06
    38b2:	20 81       	ld	r18, Z
    38b4:	31 81       	ldd	r19, Z+1	; 0x01
    38b6:	80 91 c2 06 	lds	r24, 0x06C2
    38ba:	90 91 c3 06 	lds	r25, 0x06C3
    38be:	82 17       	cp	r24, r18
    38c0:	93 07       	cpc	r25, r19
    38c2:	a8 f4       	brcc	.+42     	; 0x38ee <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    38c4:	ed 81       	ldd	r30, Y+5	; 0x05
    38c6:	fe 81       	ldd	r31, Y+6	; 0x06
    38c8:	20 81       	ld	r18, Z
    38ca:	31 81       	ldd	r19, Z+1	; 0x01
    38cc:	8b 81       	ldd	r24, Y+3	; 0x03
    38ce:	9c 81       	ldd	r25, Y+4	; 0x04
    38d0:	82 17       	cp	r24, r18
    38d2:	93 07       	cpc	r25, r19
    38d4:	00 f5       	brcc	.+64     	; 0x3916 <vTaskDelayUntil+0x9e>
    38d6:	20 91 c2 06 	lds	r18, 0x06C2
    38da:	30 91 c3 06 	lds	r19, 0x06C3
    38de:	8b 81       	ldd	r24, Y+3	; 0x03
    38e0:	9c 81       	ldd	r25, Y+4	; 0x04
    38e2:	28 17       	cp	r18, r24
    38e4:	39 07       	cpc	r19, r25
    38e6:	b8 f4       	brcc	.+46     	; 0x3916 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	89 83       	std	Y+1, r24	; 0x01
    38ec:	14 c0       	rjmp	.+40     	; 0x3916 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    38ee:	ed 81       	ldd	r30, Y+5	; 0x05
    38f0:	fe 81       	ldd	r31, Y+6	; 0x06
    38f2:	20 81       	ld	r18, Z
    38f4:	31 81       	ldd	r19, Z+1	; 0x01
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	82 17       	cp	r24, r18
    38fc:	93 07       	cpc	r25, r19
    38fe:	48 f0       	brcs	.+18     	; 0x3912 <vTaskDelayUntil+0x9a>
    3900:	20 91 c2 06 	lds	r18, 0x06C2
    3904:	30 91 c3 06 	lds	r19, 0x06C3
    3908:	8b 81       	ldd	r24, Y+3	; 0x03
    390a:	9c 81       	ldd	r25, Y+4	; 0x04
    390c:	28 17       	cp	r18, r24
    390e:	39 07       	cpc	r19, r25
    3910:	10 f4       	brcc	.+4      	; 0x3916 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    3916:	ed 81       	ldd	r30, Y+5	; 0x05
    3918:	fe 81       	ldd	r31, Y+6	; 0x06
    391a:	8b 81       	ldd	r24, Y+3	; 0x03
    391c:	9c 81       	ldd	r25, Y+4	; 0x04
    391e:	91 83       	std	Z+1, r25	; 0x01
    3920:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    3922:	89 81       	ldd	r24, Y+1	; 0x01
    3924:	88 23       	and	r24, r24
    3926:	59 f0       	breq	.+22     	; 0x393e <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3928:	80 91 be 06 	lds	r24, 0x06BE
    392c:	90 91 bf 06 	lds	r25, 0x06BF
    3930:	02 96       	adiw	r24, 0x02	; 2
    3932:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    3936:	8b 81       	ldd	r24, Y+3	; 0x03
    3938:	9c 81       	ldd	r25, Y+4	; 0x04
    393a:	0e 94 ac 22 	call	0x4558	; 0x4558 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    393e:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
    3942:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    3944:	8a 81       	ldd	r24, Y+2	; 0x02
    3946:	88 23       	and	r24, r24
    3948:	11 f4       	brne	.+4      	; 0x394e <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    394a:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
		}
	}
    394e:	28 96       	adiw	r28, 0x08	; 8
    3950:	0f b6       	in	r0, 0x3f	; 63
    3952:	f8 94       	cli
    3954:	de bf       	out	0x3e, r29	; 62
    3956:	0f be       	out	0x3f, r0	; 63
    3958:	cd bf       	out	0x3d, r28	; 61
    395a:	cf 91       	pop	r28
    395c:	df 91       	pop	r29
    395e:	08 95       	ret

00003960 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    3960:	df 93       	push	r29
    3962:	cf 93       	push	r28
    3964:	00 d0       	rcall	.+0      	; 0x3966 <vTaskDelay+0x6>
    3966:	00 d0       	rcall	.+0      	; 0x3968 <vTaskDelay+0x8>
    3968:	0f 92       	push	r0
    396a:	cd b7       	in	r28, 0x3d	; 61
    396c:	de b7       	in	r29, 0x3e	; 62
    396e:	9d 83       	std	Y+5, r25	; 0x05
    3970:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3972:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    3974:	8c 81       	ldd	r24, Y+4	; 0x04
    3976:	9d 81       	ldd	r25, Y+5	; 0x05
    3978:	00 97       	sbiw	r24, 0x00	; 0
    397a:	d1 f0       	breq	.+52     	; 0x39b0 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    397c:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    3980:	20 91 c2 06 	lds	r18, 0x06C2
    3984:	30 91 c3 06 	lds	r19, 0x06C3
    3988:	8c 81       	ldd	r24, Y+4	; 0x04
    398a:	9d 81       	ldd	r25, Y+5	; 0x05
    398c:	82 0f       	add	r24, r18
    398e:	93 1f       	adc	r25, r19
    3990:	9b 83       	std	Y+3, r25	; 0x03
    3992:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    3994:	80 91 be 06 	lds	r24, 0x06BE
    3998:	90 91 bf 06 	lds	r25, 0x06BF
    399c:	02 96       	adiw	r24, 0x02	; 2
    399e:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    39a2:	8a 81       	ldd	r24, Y+2	; 0x02
    39a4:	9b 81       	ldd	r25, Y+3	; 0x03
    39a6:	0e 94 ac 22 	call	0x4558	; 0x4558 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    39aa:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>
    39ae:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	88 23       	and	r24, r24
    39b4:	11 f4       	brne	.+4      	; 0x39ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    39b6:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
		}
	}
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	0f 90       	pop	r0
    39c2:	0f 90       	pop	r0
    39c4:	cf 91       	pop	r28
    39c6:	df 91       	pop	r29
    39c8:	08 95       	ret

000039ca <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    39ca:	df 93       	push	r29
    39cc:	cf 93       	push	r28
    39ce:	00 d0       	rcall	.+0      	; 0x39d0 <vTaskSuspend+0x6>
    39d0:	00 d0       	rcall	.+0      	; 0x39d2 <vTaskSuspend+0x8>
    39d2:	00 d0       	rcall	.+0      	; 0x39d4 <vTaskSuspend+0xa>
    39d4:	cd b7       	in	r28, 0x3d	; 61
    39d6:	de b7       	in	r29, 0x3e	; 62
    39d8:	9c 83       	std	Y+4, r25	; 0x04
    39da:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    39e2:	20 91 be 06 	lds	r18, 0x06BE
    39e6:	30 91 bf 06 	lds	r19, 0x06BF
    39ea:	8b 81       	ldd	r24, Y+3	; 0x03
    39ec:	9c 81       	ldd	r25, Y+4	; 0x04
    39ee:	82 17       	cp	r24, r18
    39f0:	93 07       	cpc	r25, r19
    39f2:	11 f4       	brne	.+4      	; 0x39f8 <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
    39f4:	1c 82       	std	Y+4, r1	; 0x04
    39f6:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    39f8:	8b 81       	ldd	r24, Y+3	; 0x03
    39fa:	9c 81       	ldd	r25, Y+4	; 0x04
    39fc:	00 97       	sbiw	r24, 0x00	; 0
    39fe:	39 f4       	brne	.+14     	; 0x3a0e <vTaskSuspend+0x44>
    3a00:	80 91 be 06 	lds	r24, 0x06BE
    3a04:	90 91 bf 06 	lds	r25, 0x06BF
    3a08:	9e 83       	std	Y+6, r25	; 0x06
    3a0a:	8d 83       	std	Y+5, r24	; 0x05
    3a0c:	04 c0       	rjmp	.+8      	; 0x3a16 <vTaskSuspend+0x4c>
    3a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a10:	9c 81       	ldd	r25, Y+4	; 0x04
    3a12:	9e 83       	std	Y+6, r25	; 0x06
    3a14:	8d 83       	std	Y+5, r24	; 0x05
    3a16:	8d 81       	ldd	r24, Y+5	; 0x05
    3a18:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1a:	9a 83       	std	Y+2, r25	; 0x02
    3a1c:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    3a1e:	89 81       	ldd	r24, Y+1	; 0x01
    3a20:	9a 81       	ldd	r25, Y+2	; 0x02
    3a22:	02 96       	adiw	r24, 0x02	; 2
    3a24:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    3a28:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2c:	84 89       	ldd	r24, Z+20	; 0x14
    3a2e:	95 89       	ldd	r25, Z+21	; 0x15
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	29 f0       	breq	.+10     	; 0x3a3e <vTaskSuspend+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    3a34:	89 81       	ldd	r24, Y+1	; 0x01
    3a36:	9a 81       	ldd	r25, Y+2	; 0x02
    3a38:	0c 96       	adiw	r24, 0x0c	; 12
    3a3a:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    3a3e:	89 81       	ldd	r24, Y+1	; 0x01
    3a40:	9a 81       	ldd	r25, Y+2	; 0x02
    3a42:	9c 01       	movw	r18, r24
    3a44:	2e 5f       	subi	r18, 0xFE	; 254
    3a46:	3f 4f       	sbci	r19, 0xFF	; 255
    3a48:	81 e2       	ldi	r24, 0x21	; 33
    3a4a:	97 e0       	ldi	r25, 0x07	; 7
    3a4c:	b9 01       	movw	r22, r18
    3a4e:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    3a52:	0f 90       	pop	r0
    3a54:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    3a56:	8b 81       	ldd	r24, Y+3	; 0x03
    3a58:	9c 81       	ldd	r25, Y+4	; 0x04
    3a5a:	00 97       	sbiw	r24, 0x00	; 0
    3a5c:	a1 f4       	brne	.+40     	; 0x3a86 <vTaskSuspend+0xbc>
		{
			if( xSchedulerRunning != pdFALSE )
    3a5e:	80 91 c6 06 	lds	r24, 0x06C6
    3a62:	88 23       	and	r24, r24
    3a64:	19 f0       	breq	.+6      	; 0x3a6c <vTaskSuspend+0xa2>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    3a66:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
    3a6a:	0d c0       	rjmp	.+26     	; 0x3a86 <vTaskSuspend+0xbc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    3a6c:	90 91 21 07 	lds	r25, 0x0721
    3a70:	80 91 c1 06 	lds	r24, 0x06C1
    3a74:	98 17       	cp	r25, r24
    3a76:	29 f4       	brne	.+10     	; 0x3a82 <vTaskSuspend+0xb8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    3a78:	10 92 bf 06 	sts	0x06BF, r1
    3a7c:	10 92 be 06 	sts	0x06BE, r1
    3a80:	02 c0       	rjmp	.+4      	; 0x3a86 <vTaskSuspend+0xbc>
				}
				else
				{
					vTaskSwitchContext();
    3a82:	0e 94 27 20 	call	0x404e	; 0x404e <vTaskSwitchContext>
				}
			}
		}
	}
    3a86:	26 96       	adiw	r28, 0x06	; 6
    3a88:	0f b6       	in	r0, 0x3f	; 63
    3a8a:	f8 94       	cli
    3a8c:	de bf       	out	0x3e, r29	; 62
    3a8e:	0f be       	out	0x3f, r0	; 63
    3a90:	cd bf       	out	0x3d, r28	; 61
    3a92:	cf 91       	pop	r28
    3a94:	df 91       	pop	r29
    3a96:	08 95       	ret

00003a98 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    3a98:	df 93       	push	r29
    3a9a:	cf 93       	push	r28
    3a9c:	00 d0       	rcall	.+0      	; 0x3a9e <xTaskIsTaskSuspended+0x6>
    3a9e:	00 d0       	rcall	.+0      	; 0x3aa0 <xTaskIsTaskSuspended+0x8>
    3aa0:	0f 92       	push	r0
    3aa2:	cd b7       	in	r28, 0x3d	; 61
    3aa4:	de b7       	in	r29, 0x3e	; 62
    3aa6:	9d 83       	std	Y+5, r25	; 0x05
    3aa8:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
    3aaa:	1b 82       	std	Y+3, r1	; 0x03
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    3aac:	8c 81       	ldd	r24, Y+4	; 0x04
    3aae:	9d 81       	ldd	r25, Y+5	; 0x05
    3ab0:	9a 83       	std	Y+2, r25	; 0x02
    3ab2:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    3ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ab8:	82 85       	ldd	r24, Z+10	; 0x0a
    3aba:	93 85       	ldd	r25, Z+11	; 0x0b
    3abc:	27 e0       	ldi	r18, 0x07	; 7
    3abe:	81 32       	cpi	r24, 0x21	; 33
    3ac0:	92 07       	cpc	r25, r18
    3ac2:	81 f4       	brne	.+32     	; 0x3ae4 <xTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    3ac4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ac6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ac8:	84 89       	ldd	r24, Z+20	; 0x14
    3aca:	95 89       	ldd	r25, Z+21	; 0x15
    3acc:	27 e0       	ldi	r18, 0x07	; 7
    3ace:	8f 30       	cpi	r24, 0x0F	; 15
    3ad0:	92 07       	cpc	r25, r18
    3ad2:	41 f0       	breq	.+16     	; 0x3ae4 <xTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    3ad4:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad6:	fa 81       	ldd	r31, Y+2	; 0x02
    3ad8:	84 89       	ldd	r24, Z+20	; 0x14
    3ada:	95 89       	ldd	r25, Z+21	; 0x15
    3adc:	00 97       	sbiw	r24, 0x00	; 0
    3ade:	11 f4       	brne	.+4      	; 0x3ae4 <xTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}

		return xReturn;
    3ae4:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    3ae6:	0f 90       	pop	r0
    3ae8:	0f 90       	pop	r0
    3aea:	0f 90       	pop	r0
    3aec:	0f 90       	pop	r0
    3aee:	0f 90       	pop	r0
    3af0:	cf 91       	pop	r28
    3af2:	df 91       	pop	r29
    3af4:	08 95       	ret

00003af6 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    3af6:	df 93       	push	r29
    3af8:	cf 93       	push	r28
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <vTaskResume+0x6>
    3afc:	00 d0       	rcall	.+0      	; 0x3afe <vTaskResume+0x8>
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	9c 83       	std	Y+4, r25	; 0x04
    3b04:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    3b06:	8b 81       	ldd	r24, Y+3	; 0x03
    3b08:	9c 81       	ldd	r25, Y+4	; 0x04
    3b0a:	9a 83       	std	Y+2, r25	; 0x02
    3b0c:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	9a 81       	ldd	r25, Y+2	; 0x02
    3b12:	00 97       	sbiw	r24, 0x00	; 0
    3b14:	09 f4       	brne	.+2      	; 0x3b18 <vTaskResume+0x22>
    3b16:	4c c0       	rjmp	.+152    	; 0x3bb0 <vTaskResume+0xba>
    3b18:	20 91 be 06 	lds	r18, 0x06BE
    3b1c:	30 91 bf 06 	lds	r19, 0x06BF
    3b20:	89 81       	ldd	r24, Y+1	; 0x01
    3b22:	9a 81       	ldd	r25, Y+2	; 0x02
    3b24:	82 17       	cp	r24, r18
    3b26:	93 07       	cpc	r25, r19
    3b28:	09 f4       	brne	.+2      	; 0x3b2c <vTaskResume+0x36>
    3b2a:	42 c0       	rjmp	.+132    	; 0x3bb0 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    3b2c:	0f b6       	in	r0, 0x3f	; 63
    3b2e:	f8 94       	cli
    3b30:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3b32:	89 81       	ldd	r24, Y+1	; 0x01
    3b34:	9a 81       	ldd	r25, Y+2	; 0x02
    3b36:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <xTaskIsTaskSuspended>
    3b3a:	81 30       	cpi	r24, 0x01	; 1
    3b3c:	b9 f5       	brne	.+110    	; 0x3bac <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    3b3e:	89 81       	ldd	r24, Y+1	; 0x01
    3b40:	9a 81       	ldd	r25, Y+2	; 0x02
    3b42:	02 96       	adiw	r24, 0x02	; 2
    3b44:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3b48:	e9 81       	ldd	r30, Y+1	; 0x01
    3b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b4c:	96 89       	ldd	r25, Z+22	; 0x16
    3b4e:	80 91 c5 06 	lds	r24, 0x06C5
    3b52:	89 17       	cp	r24, r25
    3b54:	28 f4       	brcc	.+10     	; 0x3b60 <vTaskResume+0x6a>
    3b56:	e9 81       	ldd	r30, Y+1	; 0x01
    3b58:	fa 81       	ldd	r31, Y+2	; 0x02
    3b5a:	86 89       	ldd	r24, Z+22	; 0x16
    3b5c:	80 93 c5 06 	sts	0x06C5, r24
    3b60:	e9 81       	ldd	r30, Y+1	; 0x01
    3b62:	fa 81       	ldd	r31, Y+2	; 0x02
    3b64:	86 89       	ldd	r24, Z+22	; 0x16
    3b66:	28 2f       	mov	r18, r24
    3b68:	30 e0       	ldi	r19, 0x00	; 0
    3b6a:	c9 01       	movw	r24, r18
    3b6c:	88 0f       	add	r24, r24
    3b6e:	99 1f       	adc	r25, r25
    3b70:	88 0f       	add	r24, r24
    3b72:	99 1f       	adc	r25, r25
    3b74:	88 0f       	add	r24, r24
    3b76:	99 1f       	adc	r25, r25
    3b78:	82 0f       	add	r24, r18
    3b7a:	93 1f       	adc	r25, r19
    3b7c:	ac 01       	movw	r20, r24
    3b7e:	44 53       	subi	r20, 0x34	; 52
    3b80:	59 4f       	sbci	r21, 0xF9	; 249
    3b82:	89 81       	ldd	r24, Y+1	; 0x01
    3b84:	9a 81       	ldd	r25, Y+2	; 0x02
    3b86:	9c 01       	movw	r18, r24
    3b88:	2e 5f       	subi	r18, 0xFE	; 254
    3b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b8c:	ca 01       	movw	r24, r20
    3b8e:	b9 01       	movw	r22, r18
    3b90:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3b94:	e9 81       	ldd	r30, Y+1	; 0x01
    3b96:	fa 81       	ldd	r31, Y+2	; 0x02
    3b98:	96 89       	ldd	r25, Z+22	; 0x16
    3b9a:	e0 91 be 06 	lds	r30, 0x06BE
    3b9e:	f0 91 bf 06 	lds	r31, 0x06BF
    3ba2:	86 89       	ldd	r24, Z+22	; 0x16
    3ba4:	98 17       	cp	r25, r24
    3ba6:	10 f0       	brcs	.+4      	; 0x3bac <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    3ba8:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    3bac:	0f 90       	pop	r0
    3bae:	0f be       	out	0x3f, r0	; 63
		}
	}
    3bb0:	0f 90       	pop	r0
    3bb2:	0f 90       	pop	r0
    3bb4:	0f 90       	pop	r0
    3bb6:	0f 90       	pop	r0
    3bb8:	cf 91       	pop	r28
    3bba:	df 91       	pop	r29
    3bbc:	08 95       	ret

00003bbe <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    3bbe:	df 93       	push	r29
    3bc0:	cf 93       	push	r28
    3bc2:	00 d0       	rcall	.+0      	; 0x3bc4 <xTaskResumeFromISR+0x6>
    3bc4:	00 d0       	rcall	.+0      	; 0x3bc6 <xTaskResumeFromISR+0x8>
    3bc6:	0f 92       	push	r0
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
    3bcc:	9d 83       	std	Y+5, r25	; 0x05
    3bce:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xYieldRequired = pdFALSE;
    3bd0:	1b 82       	std	Y+3, r1	; 0x03
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    3bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd6:	9a 83       	std	Y+2, r25	; 0x02
    3bd8:	89 83       	std	Y+1, r24	; 0x01

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    3bde:	0e 94 4c 1d 	call	0x3a98	; 0x3a98 <xTaskIsTaskSuspended>
    3be2:	81 30       	cpi	r24, 0x01	; 1
    3be4:	09 f0       	breq	.+2      	; 0x3be8 <xTaskResumeFromISR+0x2a>
    3be6:	47 c0       	rjmp	.+142    	; 0x3c76 <xTaskResumeFromISR+0xb8>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3be8:	80 91 c7 06 	lds	r24, 0x06C7
    3bec:	88 23       	and	r24, r24
    3bee:	c9 f5       	brne	.+114    	; 0x3c62 <xTaskResumeFromISR+0xa4>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    3bf0:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf2:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf4:	96 89       	ldd	r25, Z+22	; 0x16
    3bf6:	e0 91 be 06 	lds	r30, 0x06BE
    3bfa:	f0 91 bf 06 	lds	r31, 0x06BF
    3bfe:	86 89       	ldd	r24, Z+22	; 0x16
    3c00:	1b 82       	std	Y+3, r1	; 0x03
    3c02:	98 17       	cp	r25, r24
    3c04:	10 f0       	brcs	.+4      	; 0x3c0a <xTaskResumeFromISR+0x4c>
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	8b 83       	std	Y+3, r24	; 0x03
				vListRemove(  &( pxTCB->xGenericListItem ) );
    3c0a:	89 81       	ldd	r24, Y+1	; 0x01
    3c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c0e:	02 96       	adiw	r24, 0x02	; 2
    3c10:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    3c14:	e9 81       	ldd	r30, Y+1	; 0x01
    3c16:	fa 81       	ldd	r31, Y+2	; 0x02
    3c18:	96 89       	ldd	r25, Z+22	; 0x16
    3c1a:	80 91 c5 06 	lds	r24, 0x06C5
    3c1e:	89 17       	cp	r24, r25
    3c20:	28 f4       	brcc	.+10     	; 0x3c2c <xTaskResumeFromISR+0x6e>
    3c22:	e9 81       	ldd	r30, Y+1	; 0x01
    3c24:	fa 81       	ldd	r31, Y+2	; 0x02
    3c26:	86 89       	ldd	r24, Z+22	; 0x16
    3c28:	80 93 c5 06 	sts	0x06C5, r24
    3c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c30:	86 89       	ldd	r24, Z+22	; 0x16
    3c32:	28 2f       	mov	r18, r24
    3c34:	30 e0       	ldi	r19, 0x00	; 0
    3c36:	c9 01       	movw	r24, r18
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	88 0f       	add	r24, r24
    3c42:	99 1f       	adc	r25, r25
    3c44:	82 0f       	add	r24, r18
    3c46:	93 1f       	adc	r25, r19
    3c48:	ac 01       	movw	r20, r24
    3c4a:	44 53       	subi	r20, 0x34	; 52
    3c4c:	59 4f       	sbci	r21, 0xF9	; 249
    3c4e:	89 81       	ldd	r24, Y+1	; 0x01
    3c50:	9a 81       	ldd	r25, Y+2	; 0x02
    3c52:	9c 01       	movw	r18, r24
    3c54:	2e 5f       	subi	r18, 0xFE	; 254
    3c56:	3f 4f       	sbci	r19, 0xFF	; 255
    3c58:	ca 01       	movw	r24, r20
    3c5a:	b9 01       	movw	r22, r18
    3c5c:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
    3c60:	0a c0       	rjmp	.+20     	; 0x3c76 <xTaskResumeFromISR+0xb8>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	9a 81       	ldd	r25, Y+2	; 0x02
    3c66:	9c 01       	movw	r18, r24
    3c68:	24 5f       	subi	r18, 0xF4	; 244
    3c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6c:	8f e0       	ldi	r24, 0x0F	; 15
    3c6e:	97 e0       	ldi	r25, 0x07	; 7
    3c70:	b9 01       	movw	r22, r18
    3c72:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
			}
		}

		return xYieldRequired;
    3c76:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    3c78:	0f 90       	pop	r0
    3c7a:	0f 90       	pop	r0
    3c7c:	0f 90       	pop	r0
    3c7e:	0f 90       	pop	r0
    3c80:	0f 90       	pop	r0
    3c82:	cf 91       	pop	r28
    3c84:	df 91       	pop	r29
    3c86:	08 95       	ret

00003c88 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	df 93       	push	r29
    3c98:	cf 93       	push	r28
    3c9a:	0f 92       	push	r0
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    3ca0:	20 e6       	ldi	r18, 0x60	; 96
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	88 ec       	ldi	r24, 0xC8	; 200
    3ca6:	91 e2       	ldi	r25, 0x21	; 33
    3ca8:	b9 01       	movw	r22, r18
    3caa:	45 e5       	ldi	r20, 0x55	; 85
    3cac:	50 e0       	ldi	r21, 0x00	; 0
    3cae:	20 e0       	ldi	r18, 0x00	; 0
    3cb0:	30 e0       	ldi	r19, 0x00	; 0
    3cb2:	00 e0       	ldi	r16, 0x00	; 0
    3cb4:	ee 24       	eor	r14, r14
    3cb6:	ff 24       	eor	r15, r15
    3cb8:	cc 24       	eor	r12, r12
    3cba:	dd 24       	eor	r13, r13
    3cbc:	aa 24       	eor	r10, r10
    3cbe:	bb 24       	eor	r11, r11
    3cc0:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <xTaskGenericCreate>
    3cc4:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    3cc6:	89 81       	ldd	r24, Y+1	; 0x01
    3cc8:	81 30       	cpi	r24, 0x01	; 1
    3cca:	51 f4       	brne	.+20     	; 0x3ce0 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    3ccc:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	80 93 c6 06 	sts	0x06C6, r24
		xTickCount = ( portTickType ) 0U;
    3cd4:	10 92 c3 06 	sts	0x06C3, r1
    3cd8:	10 92 c2 06 	sts	0x06C2, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    3cdc:	0e 94 84 14 	call	0x2908	; 0x2908 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    3ce0:	0f 90       	pop	r0
    3ce2:	cf 91       	pop	r28
    3ce4:	df 91       	pop	r29
    3ce6:	0f 91       	pop	r16
    3ce8:	ff 90       	pop	r15
    3cea:	ef 90       	pop	r14
    3cec:	df 90       	pop	r13
    3cee:	cf 90       	pop	r12
    3cf0:	bf 90       	pop	r11
    3cf2:	af 90       	pop	r10
    3cf4:	08 95       	ret

00003cf6 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    3cf6:	df 93       	push	r29
    3cf8:	cf 93       	push	r28
    3cfa:	cd b7       	in	r28, 0x3d	; 61
    3cfc:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    3cfe:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    3d00:	10 92 c6 06 	sts	0x06C6, r1
	vPortEndScheduler();
    3d04:	0e 94 b9 14 	call	0x2972	; 0x2972 <vPortEndScheduler>
}
    3d08:	cf 91       	pop	r28
    3d0a:	df 91       	pop	r29
    3d0c:	08 95       	ret

00003d0e <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    3d0e:	df 93       	push	r29
    3d10:	cf 93       	push	r28
    3d12:	cd b7       	in	r28, 0x3d	; 61
    3d14:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    3d16:	80 91 c7 06 	lds	r24, 0x06C7
    3d1a:	8f 5f       	subi	r24, 0xFF	; 255
    3d1c:	80 93 c7 06 	sts	0x06C7, r24
}
    3d20:	cf 91       	pop	r28
    3d22:	df 91       	pop	r29
    3d24:	08 95       	ret

00003d26 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    3d26:	df 93       	push	r29
    3d28:	cf 93       	push	r28
    3d2a:	00 d0       	rcall	.+0      	; 0x3d2c <xTaskResumeAll+0x6>
    3d2c:	00 d0       	rcall	.+0      	; 0x3d2e <xTaskResumeAll+0x8>
    3d2e:	cd b7       	in	r28, 0x3d	; 61
    3d30:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    3d32:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    3d3a:	80 91 c7 06 	lds	r24, 0x06C7
    3d3e:	81 50       	subi	r24, 0x01	; 1
    3d40:	80 93 c7 06 	sts	0x06C7, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3d44:	80 91 c7 06 	lds	r24, 0x06C7
    3d48:	88 23       	and	r24, r24
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <xTaskResumeAll+0x28>
    3d4c:	6c c0       	rjmp	.+216    	; 0x3e26 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    3d4e:	80 91 c1 06 	lds	r24, 0x06C1
    3d52:	88 23       	and	r24, r24
    3d54:	09 f4       	brne	.+2      	; 0x3d58 <xTaskResumeAll+0x32>
    3d56:	67 c0       	rjmp	.+206    	; 0x3e26 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    3d58:	19 82       	std	Y+1, r1	; 0x01
    3d5a:	41 c0       	rjmp	.+130    	; 0x3dde <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    3d5c:	e0 91 14 07 	lds	r30, 0x0714
    3d60:	f0 91 15 07 	lds	r31, 0x0715
    3d64:	86 81       	ldd	r24, Z+6	; 0x06
    3d66:	97 81       	ldd	r25, Z+7	; 0x07
    3d68:	9c 83       	std	Y+4, r25	; 0x04
    3d6a:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    3d6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d70:	0c 96       	adiw	r24, 0x0c	; 12
    3d72:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    3d76:	8b 81       	ldd	r24, Y+3	; 0x03
    3d78:	9c 81       	ldd	r25, Y+4	; 0x04
    3d7a:	02 96       	adiw	r24, 0x02	; 2
    3d7c:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    3d80:	eb 81       	ldd	r30, Y+3	; 0x03
    3d82:	fc 81       	ldd	r31, Y+4	; 0x04
    3d84:	96 89       	ldd	r25, Z+22	; 0x16
    3d86:	80 91 c5 06 	lds	r24, 0x06C5
    3d8a:	89 17       	cp	r24, r25
    3d8c:	28 f4       	brcc	.+10     	; 0x3d98 <xTaskResumeAll+0x72>
    3d8e:	eb 81       	ldd	r30, Y+3	; 0x03
    3d90:	fc 81       	ldd	r31, Y+4	; 0x04
    3d92:	86 89       	ldd	r24, Z+22	; 0x16
    3d94:	80 93 c5 06 	sts	0x06C5, r24
    3d98:	eb 81       	ldd	r30, Y+3	; 0x03
    3d9a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d9c:	86 89       	ldd	r24, Z+22	; 0x16
    3d9e:	28 2f       	mov	r18, r24
    3da0:	30 e0       	ldi	r19, 0x00	; 0
    3da2:	c9 01       	movw	r24, r18
    3da4:	88 0f       	add	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	88 0f       	add	r24, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	88 0f       	add	r24, r24
    3dae:	99 1f       	adc	r25, r25
    3db0:	82 0f       	add	r24, r18
    3db2:	93 1f       	adc	r25, r19
    3db4:	84 53       	subi	r24, 0x34	; 52
    3db6:	99 4f       	sbci	r25, 0xF9	; 249
    3db8:	2b 81       	ldd	r18, Y+3	; 0x03
    3dba:	3c 81       	ldd	r19, Y+4	; 0x04
    3dbc:	2e 5f       	subi	r18, 0xFE	; 254
    3dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    3dc0:	b9 01       	movw	r22, r18
    3dc2:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    3dc6:	eb 81       	ldd	r30, Y+3	; 0x03
    3dc8:	fc 81       	ldd	r31, Y+4	; 0x04
    3dca:	96 89       	ldd	r25, Z+22	; 0x16
    3dcc:	e0 91 be 06 	lds	r30, 0x06BE
    3dd0:	f0 91 bf 06 	lds	r31, 0x06BF
    3dd4:	86 89       	ldd	r24, Z+22	; 0x16
    3dd6:	98 17       	cp	r25, r24
    3dd8:	10 f0       	brcs	.+4      	; 0x3dde <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    3dda:	81 e0       	ldi	r24, 0x01	; 1
    3ddc:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    3dde:	80 91 0f 07 	lds	r24, 0x070F
    3de2:	88 23       	and	r24, r24
    3de4:	09 f0       	breq	.+2      	; 0x3de8 <xTaskResumeAll+0xc2>
    3de6:	ba cf       	rjmp	.-140    	; 0x3d5c <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3de8:	80 91 c8 06 	lds	r24, 0x06C8
    3dec:	88 23       	and	r24, r24
    3dee:	71 f0       	breq	.+28     	; 0x3e0c <xTaskResumeAll+0xe6>
    3df0:	07 c0       	rjmp	.+14     	; 0x3e00 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    3df2:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <vTaskIncrementTick>
						--uxMissedTicks;
    3df6:	80 91 c8 06 	lds	r24, 0x06C8
    3dfa:	81 50       	subi	r24, 0x01	; 1
    3dfc:	80 93 c8 06 	sts	0x06C8, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    3e00:	80 91 c8 06 	lds	r24, 0x06C8
    3e04:	88 23       	and	r24, r24
    3e06:	a9 f7       	brne	.-22     	; 0x3df2 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    3e0c:	89 81       	ldd	r24, Y+1	; 0x01
    3e0e:	81 30       	cpi	r24, 0x01	; 1
    3e10:	21 f0       	breq	.+8      	; 0x3e1a <xTaskResumeAll+0xf4>
    3e12:	80 91 c9 06 	lds	r24, 0x06C9
    3e16:	81 30       	cpi	r24, 0x01	; 1
    3e18:	31 f4       	brne	.+12     	; 0x3e26 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    3e1a:	81 e0       	ldi	r24, 0x01	; 1
    3e1c:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    3e1e:	10 92 c9 06 	sts	0x06C9, r1
					portYIELD_WITHIN_API();
    3e22:	0e 94 c0 14 	call	0x2980	; 0x2980 <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    3e26:	0f 90       	pop	r0
    3e28:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    3e2a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f 90       	pop	r0
    3e30:	0f 90       	pop	r0
    3e32:	0f 90       	pop	r0
    3e34:	cf 91       	pop	r28
    3e36:	df 91       	pop	r29
    3e38:	08 95       	ret

00003e3a <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <xTaskGetTickCount+0x6>
    3e40:	cd b7       	in	r28, 0x3d	; 61
    3e42:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    3e4a:	80 91 c2 06 	lds	r24, 0x06C2
    3e4e:	90 91 c3 06 	lds	r25, 0x06C3
    3e52:	9a 83       	std	Y+2, r25	; 0x02
    3e54:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    3e56:	0f 90       	pop	r0
    3e58:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    3e5a:	89 81       	ldd	r24, Y+1	; 0x01
    3e5c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3e5e:	0f 90       	pop	r0
    3e60:	0f 90       	pop	r0
    3e62:	cf 91       	pop	r28
    3e64:	df 91       	pop	r29
    3e66:	08 95       	ret

00003e68 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    3e68:	df 93       	push	r29
    3e6a:	cf 93       	push	r28
    3e6c:	00 d0       	rcall	.+0      	; 0x3e6e <xTaskGetTickCountFromISR+0x6>
    3e6e:	0f 92       	push	r0
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    3e74:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    3e76:	80 91 c2 06 	lds	r24, 0x06C2
    3e7a:	90 91 c3 06 	lds	r25, 0x06C3
    3e7e:	9b 83       	std	Y+3, r25	; 0x03
    3e80:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3e82:	8a 81       	ldd	r24, Y+2	; 0x02
    3e84:	9b 81       	ldd	r25, Y+3	; 0x03
}
    3e86:	0f 90       	pop	r0
    3e88:	0f 90       	pop	r0
    3e8a:	0f 90       	pop	r0
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    3e9a:	80 91 c1 06 	lds	r24, 0x06C1
}
    3e9e:	cf 91       	pop	r28
    3ea0:	df 91       	pop	r29
    3ea2:	08 95       	ret

00003ea4 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	00 d0       	rcall	.+0      	; 0x3eaa <vTaskIncrementTick+0x6>
    3eaa:	00 d0       	rcall	.+0      	; 0x3eac <vTaskIncrementTick+0x8>
    3eac:	00 d0       	rcall	.+0      	; 0x3eae <vTaskIncrementTick+0xa>
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    3eb2:	80 91 c7 06 	lds	r24, 0x06C7
    3eb6:	88 23       	and	r24, r24
    3eb8:	09 f0       	breq	.+2      	; 0x3ebc <vTaskIncrementTick+0x18>
    3eba:	bb c0       	rjmp	.+374    	; 0x4032 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    3ebc:	80 91 c2 06 	lds	r24, 0x06C2
    3ec0:	90 91 c3 06 	lds	r25, 0x06C3
    3ec4:	01 96       	adiw	r24, 0x01	; 1
    3ec6:	90 93 c3 06 	sts	0x06C3, r25
    3eca:	80 93 c2 06 	sts	0x06C2, r24
		if( xTickCount == ( portTickType ) 0U )
    3ece:	80 91 c2 06 	lds	r24, 0x06C2
    3ed2:	90 91 c3 06 	lds	r25, 0x06C3
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	d1 f5       	brne	.+116    	; 0x3f4e <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    3eda:	80 91 0b 07 	lds	r24, 0x070B
    3ede:	90 91 0c 07 	lds	r25, 0x070C
    3ee2:	9c 83       	std	Y+4, r25	; 0x04
    3ee4:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    3ee6:	80 91 0d 07 	lds	r24, 0x070D
    3eea:	90 91 0e 07 	lds	r25, 0x070E
    3eee:	90 93 0c 07 	sts	0x070C, r25
    3ef2:	80 93 0b 07 	sts	0x070B, r24
			pxOverflowDelayedTaskList = pxTemp;
    3ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    3efa:	90 93 0e 07 	sts	0x070E, r25
    3efe:	80 93 0d 07 	sts	0x070D, r24
			xNumOfOverflows++;
    3f02:	80 91 ca 06 	lds	r24, 0x06CA
    3f06:	8f 5f       	subi	r24, 0xFF	; 255
    3f08:	80 93 ca 06 	sts	0x06CA, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    3f0c:	e0 91 0b 07 	lds	r30, 0x070B
    3f10:	f0 91 0c 07 	lds	r31, 0x070C
    3f14:	80 81       	ld	r24, Z
    3f16:	88 23       	and	r24, r24
    3f18:	39 f4       	brne	.+14     	; 0x3f28 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    3f1a:	8f ef       	ldi	r24, 0xFF	; 255
    3f1c:	9f ef       	ldi	r25, 0xFF	; 255
    3f1e:	90 93 a6 01 	sts	0x01A6, r25
    3f22:	80 93 a5 01 	sts	0x01A5, r24
    3f26:	13 c0       	rjmp	.+38     	; 0x3f4e <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    3f28:	e0 91 0b 07 	lds	r30, 0x070B
    3f2c:	f0 91 0c 07 	lds	r31, 0x070C
    3f30:	05 80       	ldd	r0, Z+5	; 0x05
    3f32:	f6 81       	ldd	r31, Z+6	; 0x06
    3f34:	e0 2d       	mov	r30, r0
    3f36:	86 81       	ldd	r24, Z+6	; 0x06
    3f38:	97 81       	ldd	r25, Z+7	; 0x07
    3f3a:	9e 83       	std	Y+6, r25	; 0x06
    3f3c:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    3f3e:	ed 81       	ldd	r30, Y+5	; 0x05
    3f40:	fe 81       	ldd	r31, Y+6	; 0x06
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	90 93 a6 01 	sts	0x01A6, r25
    3f4a:	80 93 a5 01 	sts	0x01A5, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    3f4e:	20 91 c2 06 	lds	r18, 0x06C2
    3f52:	30 91 c3 06 	lds	r19, 0x06C3
    3f56:	80 91 a5 01 	lds	r24, 0x01A5
    3f5a:	90 91 a6 01 	lds	r25, 0x01A6
    3f5e:	28 17       	cp	r18, r24
    3f60:	39 07       	cpc	r19, r25
    3f62:	08 f4       	brcc	.+2      	; 0x3f66 <vTaskIncrementTick+0xc2>
    3f64:	6b c0       	rjmp	.+214    	; 0x403c <vTaskIncrementTick+0x198>
    3f66:	e0 91 0b 07 	lds	r30, 0x070B
    3f6a:	f0 91 0c 07 	lds	r31, 0x070C
    3f6e:	80 81       	ld	r24, Z
    3f70:	88 23       	and	r24, r24
    3f72:	39 f4       	brne	.+14     	; 0x3f82 <vTaskIncrementTick+0xde>
    3f74:	8f ef       	ldi	r24, 0xFF	; 255
    3f76:	9f ef       	ldi	r25, 0xFF	; 255
    3f78:	90 93 a6 01 	sts	0x01A6, r25
    3f7c:	80 93 a5 01 	sts	0x01A5, r24
    3f80:	5d c0       	rjmp	.+186    	; 0x403c <vTaskIncrementTick+0x198>
    3f82:	e0 91 0b 07 	lds	r30, 0x070B
    3f86:	f0 91 0c 07 	lds	r31, 0x070C
    3f8a:	05 80       	ldd	r0, Z+5	; 0x05
    3f8c:	f6 81       	ldd	r31, Z+6	; 0x06
    3f8e:	e0 2d       	mov	r30, r0
    3f90:	86 81       	ldd	r24, Z+6	; 0x06
    3f92:	97 81       	ldd	r25, Z+7	; 0x07
    3f94:	9e 83       	std	Y+6, r25	; 0x06
    3f96:	8d 83       	std	Y+5, r24	; 0x05
    3f98:	ed 81       	ldd	r30, Y+5	; 0x05
    3f9a:	fe 81       	ldd	r31, Y+6	; 0x06
    3f9c:	82 81       	ldd	r24, Z+2	; 0x02
    3f9e:	93 81       	ldd	r25, Z+3	; 0x03
    3fa0:	9a 83       	std	Y+2, r25	; 0x02
    3fa2:	89 83       	std	Y+1, r24	; 0x01
    3fa4:	20 91 c2 06 	lds	r18, 0x06C2
    3fa8:	30 91 c3 06 	lds	r19, 0x06C3
    3fac:	89 81       	ldd	r24, Y+1	; 0x01
    3fae:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb0:	28 17       	cp	r18, r24
    3fb2:	39 07       	cpc	r19, r25
    3fb4:	38 f4       	brcc	.+14     	; 0x3fc4 <vTaskIncrementTick+0x120>
    3fb6:	89 81       	ldd	r24, Y+1	; 0x01
    3fb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3fba:	90 93 a6 01 	sts	0x01A6, r25
    3fbe:	80 93 a5 01 	sts	0x01A5, r24
    3fc2:	3c c0       	rjmp	.+120    	; 0x403c <vTaskIncrementTick+0x198>
    3fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3fc8:	02 96       	adiw	r24, 0x02	; 2
    3fca:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
    3fce:	ed 81       	ldd	r30, Y+5	; 0x05
    3fd0:	fe 81       	ldd	r31, Y+6	; 0x06
    3fd2:	84 89       	ldd	r24, Z+20	; 0x14
    3fd4:	95 89       	ldd	r25, Z+21	; 0x15
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	29 f0       	breq	.+10     	; 0x3fe4 <vTaskIncrementTick+0x140>
    3fda:	8d 81       	ldd	r24, Y+5	; 0x05
    3fdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3fde:	0c 96       	adiw	r24, 0x0c	; 12
    3fe0:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
    3fe4:	ed 81       	ldd	r30, Y+5	; 0x05
    3fe6:	fe 81       	ldd	r31, Y+6	; 0x06
    3fe8:	96 89       	ldd	r25, Z+22	; 0x16
    3fea:	80 91 c5 06 	lds	r24, 0x06C5
    3fee:	89 17       	cp	r24, r25
    3ff0:	28 f4       	brcc	.+10     	; 0x3ffc <vTaskIncrementTick+0x158>
    3ff2:	ed 81       	ldd	r30, Y+5	; 0x05
    3ff4:	fe 81       	ldd	r31, Y+6	; 0x06
    3ff6:	86 89       	ldd	r24, Z+22	; 0x16
    3ff8:	80 93 c5 06 	sts	0x06C5, r24
    3ffc:	ed 81       	ldd	r30, Y+5	; 0x05
    3ffe:	fe 81       	ldd	r31, Y+6	; 0x06
    4000:	86 89       	ldd	r24, Z+22	; 0x16
    4002:	28 2f       	mov	r18, r24
    4004:	30 e0       	ldi	r19, 0x00	; 0
    4006:	c9 01       	movw	r24, r18
    4008:	88 0f       	add	r24, r24
    400a:	99 1f       	adc	r25, r25
    400c:	88 0f       	add	r24, r24
    400e:	99 1f       	adc	r25, r25
    4010:	88 0f       	add	r24, r24
    4012:	99 1f       	adc	r25, r25
    4014:	82 0f       	add	r24, r18
    4016:	93 1f       	adc	r25, r19
    4018:	ac 01       	movw	r20, r24
    401a:	44 53       	subi	r20, 0x34	; 52
    401c:	59 4f       	sbci	r21, 0xF9	; 249
    401e:	8d 81       	ldd	r24, Y+5	; 0x05
    4020:	9e 81       	ldd	r25, Y+6	; 0x06
    4022:	9c 01       	movw	r18, r24
    4024:	2e 5f       	subi	r18, 0xFE	; 254
    4026:	3f 4f       	sbci	r19, 0xFF	; 255
    4028:	ca 01       	movw	r24, r20
    402a:	b9 01       	movw	r22, r18
    402c:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
    4030:	9a cf       	rjmp	.-204    	; 0x3f66 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    4032:	80 91 c8 06 	lds	r24, 0x06C8
    4036:	8f 5f       	subi	r24, 0xFF	; 255
    4038:	80 93 c8 06 	sts	0x06C8, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    403c:	26 96       	adiw	r28, 0x06	; 6
    403e:	0f b6       	in	r0, 0x3f	; 63
    4040:	f8 94       	cli
    4042:	de bf       	out	0x3e, r29	; 62
    4044:	0f be       	out	0x3f, r0	; 63
    4046:	cd bf       	out	0x3d, r28	; 61
    4048:	cf 91       	pop	r28
    404a:	df 91       	pop	r29
    404c:	08 95       	ret

0000404e <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    404e:	df 93       	push	r29
    4050:	cf 93       	push	r28
    4052:	00 d0       	rcall	.+0      	; 0x4054 <vTaskSwitchContext+0x6>
    4054:	cd b7       	in	r28, 0x3d	; 61
    4056:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4058:	80 91 c7 06 	lds	r24, 0x06C7
    405c:	88 23       	and	r24, r24
    405e:	49 f0       	breq	.+18     	; 0x4072 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4060:	81 e0       	ldi	r24, 0x01	; 1
    4062:	80 93 c9 06 	sts	0x06C9, r24
    4066:	54 c0       	rjmp	.+168    	; 0x4110 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4068:	80 91 c5 06 	lds	r24, 0x06C5
    406c:	81 50       	subi	r24, 0x01	; 1
    406e:	80 93 c5 06 	sts	0x06C5, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    4072:	80 91 c5 06 	lds	r24, 0x06C5
    4076:	28 2f       	mov	r18, r24
    4078:	30 e0       	ldi	r19, 0x00	; 0
    407a:	c9 01       	movw	r24, r18
    407c:	88 0f       	add	r24, r24
    407e:	99 1f       	adc	r25, r25
    4080:	88 0f       	add	r24, r24
    4082:	99 1f       	adc	r25, r25
    4084:	88 0f       	add	r24, r24
    4086:	99 1f       	adc	r25, r25
    4088:	82 0f       	add	r24, r18
    408a:	93 1f       	adc	r25, r19
    408c:	fc 01       	movw	r30, r24
    408e:	e4 53       	subi	r30, 0x34	; 52
    4090:	f9 4f       	sbci	r31, 0xF9	; 249
    4092:	80 81       	ld	r24, Z
    4094:	88 23       	and	r24, r24
    4096:	41 f3       	breq	.-48     	; 0x4068 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    4098:	80 91 c5 06 	lds	r24, 0x06C5
    409c:	28 2f       	mov	r18, r24
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	c9 01       	movw	r24, r18
    40a2:	88 0f       	add	r24, r24
    40a4:	99 1f       	adc	r25, r25
    40a6:	88 0f       	add	r24, r24
    40a8:	99 1f       	adc	r25, r25
    40aa:	88 0f       	add	r24, r24
    40ac:	99 1f       	adc	r25, r25
    40ae:	82 0f       	add	r24, r18
    40b0:	93 1f       	adc	r25, r19
    40b2:	84 53       	subi	r24, 0x34	; 52
    40b4:	99 4f       	sbci	r25, 0xF9	; 249
    40b6:	9a 83       	std	Y+2, r25	; 0x02
    40b8:	89 83       	std	Y+1, r24	; 0x01
    40ba:	e9 81       	ldd	r30, Y+1	; 0x01
    40bc:	fa 81       	ldd	r31, Y+2	; 0x02
    40be:	01 80       	ldd	r0, Z+1	; 0x01
    40c0:	f2 81       	ldd	r31, Z+2	; 0x02
    40c2:	e0 2d       	mov	r30, r0
    40c4:	82 81       	ldd	r24, Z+2	; 0x02
    40c6:	93 81       	ldd	r25, Z+3	; 0x03
    40c8:	e9 81       	ldd	r30, Y+1	; 0x01
    40ca:	fa 81       	ldd	r31, Y+2	; 0x02
    40cc:	92 83       	std	Z+2, r25	; 0x02
    40ce:	81 83       	std	Z+1, r24	; 0x01
    40d0:	e9 81       	ldd	r30, Y+1	; 0x01
    40d2:	fa 81       	ldd	r31, Y+2	; 0x02
    40d4:	21 81       	ldd	r18, Z+1	; 0x01
    40d6:	32 81       	ldd	r19, Z+2	; 0x02
    40d8:	89 81       	ldd	r24, Y+1	; 0x01
    40da:	9a 81       	ldd	r25, Y+2	; 0x02
    40dc:	03 96       	adiw	r24, 0x03	; 3
    40de:	28 17       	cp	r18, r24
    40e0:	39 07       	cpc	r19, r25
    40e2:	59 f4       	brne	.+22     	; 0x40fa <vTaskSwitchContext+0xac>
    40e4:	e9 81       	ldd	r30, Y+1	; 0x01
    40e6:	fa 81       	ldd	r31, Y+2	; 0x02
    40e8:	01 80       	ldd	r0, Z+1	; 0x01
    40ea:	f2 81       	ldd	r31, Z+2	; 0x02
    40ec:	e0 2d       	mov	r30, r0
    40ee:	82 81       	ldd	r24, Z+2	; 0x02
    40f0:	93 81       	ldd	r25, Z+3	; 0x03
    40f2:	e9 81       	ldd	r30, Y+1	; 0x01
    40f4:	fa 81       	ldd	r31, Y+2	; 0x02
    40f6:	92 83       	std	Z+2, r25	; 0x02
    40f8:	81 83       	std	Z+1, r24	; 0x01
    40fa:	e9 81       	ldd	r30, Y+1	; 0x01
    40fc:	fa 81       	ldd	r31, Y+2	; 0x02
    40fe:	01 80       	ldd	r0, Z+1	; 0x01
    4100:	f2 81       	ldd	r31, Z+2	; 0x02
    4102:	e0 2d       	mov	r30, r0
    4104:	86 81       	ldd	r24, Z+6	; 0x06
    4106:	97 81       	ldd	r25, Z+7	; 0x07
    4108:	90 93 bf 06 	sts	0x06BF, r25
    410c:	80 93 be 06 	sts	0x06BE, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	08 95       	ret

0000411a <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	00 d0       	rcall	.+0      	; 0x4120 <vTaskPlaceOnEventList+0x6>
    4120:	00 d0       	rcall	.+0      	; 0x4122 <vTaskPlaceOnEventList+0x8>
    4122:	00 d0       	rcall	.+0      	; 0x4124 <vTaskPlaceOnEventList+0xa>
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	9c 83       	std	Y+4, r25	; 0x04
    412a:	8b 83       	std	Y+3, r24	; 0x03
    412c:	7e 83       	std	Y+6, r23	; 0x06
    412e:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4130:	4b 81       	ldd	r20, Y+3	; 0x03
    4132:	5c 81       	ldd	r21, Y+4	; 0x04
    4134:	80 91 be 06 	lds	r24, 0x06BE
    4138:	90 91 bf 06 	lds	r25, 0x06BF
    413c:	9c 01       	movw	r18, r24
    413e:	24 5f       	subi	r18, 0xF4	; 244
    4140:	3f 4f       	sbci	r19, 0xFF	; 255
    4142:	ca 01       	movw	r24, r20
    4144:	b9 01       	movw	r22, r18
    4146:	0e 94 4c 12 	call	0x2498	; 0x2498 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    414a:	80 91 be 06 	lds	r24, 0x06BE
    414e:	90 91 bf 06 	lds	r25, 0x06BF
    4152:	02 96       	adiw	r24, 0x02	; 2
    4154:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4158:	8d 81       	ldd	r24, Y+5	; 0x05
    415a:	9e 81       	ldd	r25, Y+6	; 0x06
    415c:	2f ef       	ldi	r18, 0xFF	; 255
    415e:	8f 3f       	cpi	r24, 0xFF	; 255
    4160:	92 07       	cpc	r25, r18
    4162:	69 f4       	brne	.+26     	; 0x417e <vTaskPlaceOnEventList+0x64>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4164:	80 91 be 06 	lds	r24, 0x06BE
    4168:	90 91 bf 06 	lds	r25, 0x06BF
    416c:	9c 01       	movw	r18, r24
    416e:	2e 5f       	subi	r18, 0xFE	; 254
    4170:	3f 4f       	sbci	r19, 0xFF	; 255
    4172:	81 e2       	ldi	r24, 0x21	; 33
    4174:	97 e0       	ldi	r25, 0x07	; 7
    4176:	b9 01       	movw	r22, r18
    4178:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
    417c:	0e c0       	rjmp	.+28     	; 0x419a <vTaskPlaceOnEventList+0x80>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    417e:	20 91 c2 06 	lds	r18, 0x06C2
    4182:	30 91 c3 06 	lds	r19, 0x06C3
    4186:	8d 81       	ldd	r24, Y+5	; 0x05
    4188:	9e 81       	ldd	r25, Y+6	; 0x06
    418a:	82 0f       	add	r24, r18
    418c:	93 1f       	adc	r25, r19
    418e:	9a 83       	std	Y+2, r25	; 0x02
    4190:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    4192:	89 81       	ldd	r24, Y+1	; 0x01
    4194:	9a 81       	ldd	r25, Y+2	; 0x02
    4196:	0e 94 ac 22 	call	0x4558	; 0x4558 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    419a:	26 96       	adiw	r28, 0x06	; 6
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	cf 91       	pop	r28
    41a8:	df 91       	pop	r29
    41aa:	08 95       	ret

000041ac <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    41ac:	df 93       	push	r29
    41ae:	cf 93       	push	r28
    41b0:	00 d0       	rcall	.+0      	; 0x41b2 <xTaskRemoveFromEventList+0x6>
    41b2:	00 d0       	rcall	.+0      	; 0x41b4 <xTaskRemoveFromEventList+0x8>
    41b4:	0f 92       	push	r0
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	9d 83       	std	Y+5, r25	; 0x05
    41bc:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    41be:	ec 81       	ldd	r30, Y+4	; 0x04
    41c0:	fd 81       	ldd	r31, Y+5	; 0x05
    41c2:	05 80       	ldd	r0, Z+5	; 0x05
    41c4:	f6 81       	ldd	r31, Z+6	; 0x06
    41c6:	e0 2d       	mov	r30, r0
    41c8:	86 81       	ldd	r24, Z+6	; 0x06
    41ca:	97 81       	ldd	r25, Z+7	; 0x07
    41cc:	9b 83       	std	Y+3, r25	; 0x03
    41ce:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    41d0:	8a 81       	ldd	r24, Y+2	; 0x02
    41d2:	9b 81       	ldd	r25, Y+3	; 0x03
    41d4:	0c 96       	adiw	r24, 0x0c	; 12
    41d6:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    41da:	80 91 c7 06 	lds	r24, 0x06C7
    41de:	88 23       	and	r24, r24
    41e0:	61 f5       	brne	.+88     	; 0x423a <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    41e2:	8a 81       	ldd	r24, Y+2	; 0x02
    41e4:	9b 81       	ldd	r25, Y+3	; 0x03
    41e6:	02 96       	adiw	r24, 0x02	; 2
    41e8:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    41ec:	ea 81       	ldd	r30, Y+2	; 0x02
    41ee:	fb 81       	ldd	r31, Y+3	; 0x03
    41f0:	96 89       	ldd	r25, Z+22	; 0x16
    41f2:	80 91 c5 06 	lds	r24, 0x06C5
    41f6:	89 17       	cp	r24, r25
    41f8:	28 f4       	brcc	.+10     	; 0x4204 <xTaskRemoveFromEventList+0x58>
    41fa:	ea 81       	ldd	r30, Y+2	; 0x02
    41fc:	fb 81       	ldd	r31, Y+3	; 0x03
    41fe:	86 89       	ldd	r24, Z+22	; 0x16
    4200:	80 93 c5 06 	sts	0x06C5, r24
    4204:	ea 81       	ldd	r30, Y+2	; 0x02
    4206:	fb 81       	ldd	r31, Y+3	; 0x03
    4208:	86 89       	ldd	r24, Z+22	; 0x16
    420a:	28 2f       	mov	r18, r24
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	c9 01       	movw	r24, r18
    4210:	88 0f       	add	r24, r24
    4212:	99 1f       	adc	r25, r25
    4214:	88 0f       	add	r24, r24
    4216:	99 1f       	adc	r25, r25
    4218:	88 0f       	add	r24, r24
    421a:	99 1f       	adc	r25, r25
    421c:	82 0f       	add	r24, r18
    421e:	93 1f       	adc	r25, r19
    4220:	ac 01       	movw	r20, r24
    4222:	44 53       	subi	r20, 0x34	; 52
    4224:	59 4f       	sbci	r21, 0xF9	; 249
    4226:	8a 81       	ldd	r24, Y+2	; 0x02
    4228:	9b 81       	ldd	r25, Y+3	; 0x03
    422a:	9c 01       	movw	r18, r24
    422c:	2e 5f       	subi	r18, 0xFE	; 254
    422e:	3f 4f       	sbci	r19, 0xFF	; 255
    4230:	ca 01       	movw	r24, r20
    4232:	b9 01       	movw	r22, r18
    4234:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
    4238:	0a c0       	rjmp	.+20     	; 0x424e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	9b 81       	ldd	r25, Y+3	; 0x03
    423e:	9c 01       	movw	r18, r24
    4240:	24 5f       	subi	r18, 0xF4	; 244
    4242:	3f 4f       	sbci	r19, 0xFF	; 255
    4244:	8f e0       	ldi	r24, 0x0F	; 15
    4246:	97 e0       	ldi	r25, 0x07	; 7
    4248:	b9 01       	movw	r22, r18
    424a:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    424e:	ea 81       	ldd	r30, Y+2	; 0x02
    4250:	fb 81       	ldd	r31, Y+3	; 0x03
    4252:	96 89       	ldd	r25, Z+22	; 0x16
    4254:	e0 91 be 06 	lds	r30, 0x06BE
    4258:	f0 91 bf 06 	lds	r31, 0x06BF
    425c:	86 89       	ldd	r24, Z+22	; 0x16
    425e:	98 17       	cp	r25, r24
    4260:	18 f0       	brcs	.+6      	; 0x4268 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4262:	81 e0       	ldi	r24, 0x01	; 1
    4264:	89 83       	std	Y+1, r24	; 0x01
    4266:	01 c0       	rjmp	.+2      	; 0x426a <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    4268:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    426a:	89 81       	ldd	r24, Y+1	; 0x01
}
    426c:	0f 90       	pop	r0
    426e:	0f 90       	pop	r0
    4270:	0f 90       	pop	r0
    4272:	0f 90       	pop	r0
    4274:	0f 90       	pop	r0
    4276:	cf 91       	pop	r28
    4278:	df 91       	pop	r29
    427a:	08 95       	ret

0000427c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    427c:	df 93       	push	r29
    427e:	cf 93       	push	r28
    4280:	00 d0       	rcall	.+0      	; 0x4282 <vTaskSetTimeOutState+0x6>
    4282:	cd b7       	in	r28, 0x3d	; 61
    4284:	de b7       	in	r29, 0x3e	; 62
    4286:	9a 83       	std	Y+2, r25	; 0x02
    4288:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    428a:	80 91 ca 06 	lds	r24, 0x06CA
    428e:	e9 81       	ldd	r30, Y+1	; 0x01
    4290:	fa 81       	ldd	r31, Y+2	; 0x02
    4292:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    4294:	80 91 c2 06 	lds	r24, 0x06C2
    4298:	90 91 c3 06 	lds	r25, 0x06C3
    429c:	e9 81       	ldd	r30, Y+1	; 0x01
    429e:	fa 81       	ldd	r31, Y+2	; 0x02
    42a0:	92 83       	std	Z+2, r25	; 0x02
    42a2:	81 83       	std	Z+1, r24	; 0x01
}
    42a4:	0f 90       	pop	r0
    42a6:	0f 90       	pop	r0
    42a8:	cf 91       	pop	r28
    42aa:	df 91       	pop	r29
    42ac:	08 95       	ret

000042ae <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    42ae:	df 93       	push	r29
    42b0:	cf 93       	push	r28
    42b2:	00 d0       	rcall	.+0      	; 0x42b4 <xTaskCheckForTimeOut+0x6>
    42b4:	00 d0       	rcall	.+0      	; 0x42b6 <xTaskCheckForTimeOut+0x8>
    42b6:	0f 92       	push	r0
    42b8:	cd b7       	in	r28, 0x3d	; 61
    42ba:	de b7       	in	r29, 0x3e	; 62
    42bc:	9b 83       	std	Y+3, r25	; 0x03
    42be:	8a 83       	std	Y+2, r24	; 0x02
    42c0:	7d 83       	std	Y+5, r23	; 0x05
    42c2:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    42c4:	0f b6       	in	r0, 0x3f	; 63
    42c6:	f8 94       	cli
    42c8:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    42ca:	ec 81       	ldd	r30, Y+4	; 0x04
    42cc:	fd 81       	ldd	r31, Y+5	; 0x05
    42ce:	80 81       	ld	r24, Z
    42d0:	91 81       	ldd	r25, Z+1	; 0x01
    42d2:	2f ef       	ldi	r18, 0xFF	; 255
    42d4:	8f 3f       	cpi	r24, 0xFF	; 255
    42d6:	92 07       	cpc	r25, r18
    42d8:	11 f4       	brne	.+4      	; 0x42de <xTaskCheckForTimeOut+0x30>
			{
				xReturn = pdFALSE;
    42da:	19 82       	std	Y+1, r1	; 0x01
    42dc:	44 c0       	rjmp	.+136    	; 0x4366 <xTaskCheckForTimeOut+0xb8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    42de:	ea 81       	ldd	r30, Y+2	; 0x02
    42e0:	fb 81       	ldd	r31, Y+3	; 0x03
    42e2:	90 81       	ld	r25, Z
    42e4:	80 91 ca 06 	lds	r24, 0x06CA
    42e8:	98 17       	cp	r25, r24
    42ea:	71 f0       	breq	.+28     	; 0x4308 <xTaskCheckForTimeOut+0x5a>
    42ec:	ea 81       	ldd	r30, Y+2	; 0x02
    42ee:	fb 81       	ldd	r31, Y+3	; 0x03
    42f0:	21 81       	ldd	r18, Z+1	; 0x01
    42f2:	32 81       	ldd	r19, Z+2	; 0x02
    42f4:	80 91 c2 06 	lds	r24, 0x06C2
    42f8:	90 91 c3 06 	lds	r25, 0x06C3
    42fc:	82 17       	cp	r24, r18
    42fe:	93 07       	cpc	r25, r19
    4300:	18 f0       	brcs	.+6      	; 0x4308 <xTaskCheckForTimeOut+0x5a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4302:	81 e0       	ldi	r24, 0x01	; 1
    4304:	89 83       	std	Y+1, r24	; 0x01
    4306:	2f c0       	rjmp	.+94     	; 0x4366 <xTaskCheckForTimeOut+0xb8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4308:	20 91 c2 06 	lds	r18, 0x06C2
    430c:	30 91 c3 06 	lds	r19, 0x06C3
    4310:	ea 81       	ldd	r30, Y+2	; 0x02
    4312:	fb 81       	ldd	r31, Y+3	; 0x03
    4314:	81 81       	ldd	r24, Z+1	; 0x01
    4316:	92 81       	ldd	r25, Z+2	; 0x02
    4318:	28 1b       	sub	r18, r24
    431a:	39 0b       	sbc	r19, r25
    431c:	ec 81       	ldd	r30, Y+4	; 0x04
    431e:	fd 81       	ldd	r31, Y+5	; 0x05
    4320:	80 81       	ld	r24, Z
    4322:	91 81       	ldd	r25, Z+1	; 0x01
    4324:	28 17       	cp	r18, r24
    4326:	39 07       	cpc	r19, r25
    4328:	e0 f4       	brcc	.+56     	; 0x4362 <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    432a:	ec 81       	ldd	r30, Y+4	; 0x04
    432c:	fd 81       	ldd	r31, Y+5	; 0x05
    432e:	40 81       	ld	r20, Z
    4330:	51 81       	ldd	r21, Z+1	; 0x01
    4332:	ea 81       	ldd	r30, Y+2	; 0x02
    4334:	fb 81       	ldd	r31, Y+3	; 0x03
    4336:	21 81       	ldd	r18, Z+1	; 0x01
    4338:	32 81       	ldd	r19, Z+2	; 0x02
    433a:	80 91 c2 06 	lds	r24, 0x06C2
    433e:	90 91 c3 06 	lds	r25, 0x06C3
    4342:	b9 01       	movw	r22, r18
    4344:	68 1b       	sub	r22, r24
    4346:	79 0b       	sbc	r23, r25
    4348:	cb 01       	movw	r24, r22
    434a:	84 0f       	add	r24, r20
    434c:	95 1f       	adc	r25, r21
    434e:	ec 81       	ldd	r30, Y+4	; 0x04
    4350:	fd 81       	ldd	r31, Y+5	; 0x05
    4352:	91 83       	std	Z+1, r25	; 0x01
    4354:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    4356:	8a 81       	ldd	r24, Y+2	; 0x02
    4358:	9b 81       	ldd	r25, Y+3	; 0x03
    435a:	0e 94 3e 21 	call	0x427c	; 0x427c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    435e:	19 82       	std	Y+1, r1	; 0x01
    4360:	02 c0       	rjmp	.+4      	; 0x4366 <xTaskCheckForTimeOut+0xb8>
		}
		else
		{
			xReturn = pdTRUE;
    4362:	81 e0       	ldi	r24, 0x01	; 1
    4364:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    4366:	0f 90       	pop	r0
    4368:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    436a:	89 81       	ldd	r24, Y+1	; 0x01
}
    436c:	0f 90       	pop	r0
    436e:	0f 90       	pop	r0
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	cf 91       	pop	r28
    4378:	df 91       	pop	r29
    437a:	08 95       	ret

0000437c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    437c:	df 93       	push	r29
    437e:	cf 93       	push	r28
    4380:	cd b7       	in	r28, 0x3d	; 61
    4382:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    4384:	81 e0       	ldi	r24, 0x01	; 1
    4386:	80 93 c9 06 	sts	0x06C9, r24
}
    438a:	cf 91       	pop	r28
    438c:	df 91       	pop	r29
    438e:	08 95       	ret

00004390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4390:	df 93       	push	r29
    4392:	cf 93       	push	r28
    4394:	00 d0       	rcall	.+0      	; 0x4396 <prvIdleTask+0x6>
    4396:	cd b7       	in	r28, 0x3d	; 61
    4398:	de b7       	in	r29, 0x3e	; 62
    439a:	9a 83       	std	Y+2, r25	; 0x02
    439c:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    439e:	0e 94 6e 22 	call	0x44dc	; 0x44dc <prvCheckTasksWaitingTermination>
    43a2:	fd cf       	rjmp	.-6      	; 0x439e <prvIdleTask+0xe>

000043a4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    43a4:	0f 93       	push	r16
    43a6:	1f 93       	push	r17
    43a8:	df 93       	push	r29
    43aa:	cf 93       	push	r28
    43ac:	cd b7       	in	r28, 0x3d	; 61
    43ae:	de b7       	in	r29, 0x3e	; 62
    43b0:	29 97       	sbiw	r28, 0x09	; 9
    43b2:	0f b6       	in	r0, 0x3f	; 63
    43b4:	f8 94       	cli
    43b6:	de bf       	out	0x3e, r29	; 62
    43b8:	0f be       	out	0x3f, r0	; 63
    43ba:	cd bf       	out	0x3d, r28	; 61
    43bc:	9a 83       	std	Y+2, r25	; 0x02
    43be:	89 83       	std	Y+1, r24	; 0x01
    43c0:	7c 83       	std	Y+4, r23	; 0x04
    43c2:	6b 83       	std	Y+3, r22	; 0x03
    43c4:	4d 83       	std	Y+5, r20	; 0x05
    43c6:	3f 83       	std	Y+7, r19	; 0x07
    43c8:	2e 83       	std	Y+6, r18	; 0x06
    43ca:	19 87       	std	Y+9, r17	; 0x09
    43cc:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    43ce:	89 81       	ldd	r24, Y+1	; 0x01
    43d0:	9a 81       	ldd	r25, Y+2	; 0x02
    43d2:	49 96       	adiw	r24, 0x19	; 25
    43d4:	2b 81       	ldd	r18, Y+3	; 0x03
    43d6:	3c 81       	ldd	r19, Y+4	; 0x04
    43d8:	b9 01       	movw	r22, r18
    43da:	48 e0       	ldi	r20, 0x08	; 8
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	0e 94 4e 2d 	call	0x5a9c	; 0x5a9c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    43e2:	e9 81       	ldd	r30, Y+1	; 0x01
    43e4:	fa 81       	ldd	r31, Y+2	; 0x02
    43e6:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    43e8:	8d 81       	ldd	r24, Y+5	; 0x05
    43ea:	85 30       	cpi	r24, 0x05	; 5
    43ec:	10 f0       	brcs	.+4      	; 0x43f2 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    43ee:	84 e0       	ldi	r24, 0x04	; 4
    43f0:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    43f2:	e9 81       	ldd	r30, Y+1	; 0x01
    43f4:	fa 81       	ldd	r31, Y+2	; 0x02
    43f6:	8d 81       	ldd	r24, Y+5	; 0x05
    43f8:	86 8b       	std	Z+22, r24	; 0x16
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    43fa:	e9 81       	ldd	r30, Y+1	; 0x01
    43fc:	fa 81       	ldd	r31, Y+2	; 0x02
    43fe:	8d 81       	ldd	r24, Y+5	; 0x05
    4400:	81 a3       	std	Z+33, r24	; 0x21
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4402:	89 81       	ldd	r24, Y+1	; 0x01
    4404:	9a 81       	ldd	r25, Y+2	; 0x02
    4406:	02 96       	adiw	r24, 0x02	; 2
    4408:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    440c:	89 81       	ldd	r24, Y+1	; 0x01
    440e:	9a 81       	ldd	r25, Y+2	; 0x02
    4410:	0c 96       	adiw	r24, 0x0c	; 12
    4412:	0e 94 f0 11 	call	0x23e0	; 0x23e0 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4416:	e9 81       	ldd	r30, Y+1	; 0x01
    4418:	fa 81       	ldd	r31, Y+2	; 0x02
    441a:	89 81       	ldd	r24, Y+1	; 0x01
    441c:	9a 81       	ldd	r25, Y+2	; 0x02
    441e:	91 87       	std	Z+9, r25	; 0x09
    4420:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4422:	8d 81       	ldd	r24, Y+5	; 0x05
    4424:	28 2f       	mov	r18, r24
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	85 e0       	ldi	r24, 0x05	; 5
    442a:	90 e0       	ldi	r25, 0x00	; 0
    442c:	82 1b       	sub	r24, r18
    442e:	93 0b       	sbc	r25, r19
    4430:	e9 81       	ldd	r30, Y+1	; 0x01
    4432:	fa 81       	ldd	r31, Y+2	; 0x02
    4434:	95 87       	std	Z+13, r25	; 0x0d
    4436:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4438:	e9 81       	ldd	r30, Y+1	; 0x01
    443a:	fa 81       	ldd	r31, Y+2	; 0x02
    443c:	89 81       	ldd	r24, Y+1	; 0x01
    443e:	9a 81       	ldd	r25, Y+2	; 0x02
    4440:	93 8b       	std	Z+19, r25	; 0x13
    4442:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4444:	29 96       	adiw	r28, 0x09	; 9
    4446:	0f b6       	in	r0, 0x3f	; 63
    4448:	f8 94       	cli
    444a:	de bf       	out	0x3e, r29	; 62
    444c:	0f be       	out	0x3f, r0	; 63
    444e:	cd bf       	out	0x3d, r28	; 61
    4450:	cf 91       	pop	r28
    4452:	df 91       	pop	r29
    4454:	1f 91       	pop	r17
    4456:	0f 91       	pop	r16
    4458:	08 95       	ret

0000445a <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    445a:	df 93       	push	r29
    445c:	cf 93       	push	r28
    445e:	0f 92       	push	r0
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4464:	19 82       	std	Y+1, r1	; 0x01
    4466:	13 c0       	rjmp	.+38     	; 0x448e <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    4468:	89 81       	ldd	r24, Y+1	; 0x01
    446a:	28 2f       	mov	r18, r24
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	c9 01       	movw	r24, r18
    4470:	88 0f       	add	r24, r24
    4472:	99 1f       	adc	r25, r25
    4474:	88 0f       	add	r24, r24
    4476:	99 1f       	adc	r25, r25
    4478:	88 0f       	add	r24, r24
    447a:	99 1f       	adc	r25, r25
    447c:	82 0f       	add	r24, r18
    447e:	93 1f       	adc	r25, r19
    4480:	84 53       	subi	r24, 0x34	; 52
    4482:	99 4f       	sbci	r25, 0xF9	; 249
    4484:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4488:	89 81       	ldd	r24, Y+1	; 0x01
    448a:	8f 5f       	subi	r24, 0xFF	; 255
    448c:	89 83       	std	Y+1, r24	; 0x01
    448e:	89 81       	ldd	r24, Y+1	; 0x01
    4490:	85 30       	cpi	r24, 0x05	; 5
    4492:	50 f3       	brcs	.-44     	; 0x4468 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4494:	89 ef       	ldi	r24, 0xF9	; 249
    4496:	96 e0       	ldi	r25, 0x06	; 6
    4498:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    449c:	82 e0       	ldi	r24, 0x02	; 2
    449e:	97 e0       	ldi	r25, 0x07	; 7
    44a0:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    44a4:	8f e0       	ldi	r24, 0x0F	; 15
    44a6:	97 e0       	ldi	r25, 0x07	; 7
    44a8:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    44ac:	88 e1       	ldi	r24, 0x18	; 24
    44ae:	97 e0       	ldi	r25, 0x07	; 7
    44b0:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    44b4:	81 e2       	ldi	r24, 0x21	; 33
    44b6:	97 e0       	ldi	r25, 0x07	; 7
    44b8:	0e 94 c6 11 	call	0x238c	; 0x238c <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    44bc:	89 ef       	ldi	r24, 0xF9	; 249
    44be:	96 e0       	ldi	r25, 0x06	; 6
    44c0:	90 93 0c 07 	sts	0x070C, r25
    44c4:	80 93 0b 07 	sts	0x070B, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    44c8:	82 e0       	ldi	r24, 0x02	; 2
    44ca:	97 e0       	ldi	r25, 0x07	; 7
    44cc:	90 93 0e 07 	sts	0x070E, r25
    44d0:	80 93 0d 07 	sts	0x070D, r24
}
    44d4:	0f 90       	pop	r0
    44d6:	cf 91       	pop	r28
    44d8:	df 91       	pop	r29
    44da:	08 95       	ret

000044dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    44dc:	df 93       	push	r29
    44de:	cf 93       	push	r28
    44e0:	00 d0       	rcall	.+0      	; 0x44e2 <prvCheckTasksWaitingTermination+0x6>
    44e2:	0f 92       	push	r0
    44e4:	cd b7       	in	r28, 0x3d	; 61
    44e6:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    44e8:	80 91 c0 06 	lds	r24, 0x06C0
    44ec:	88 23       	and	r24, r24
    44ee:	71 f1       	breq	.+92     	; 0x454c <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    44f0:	0e 94 87 1e 	call	0x3d0e	; 0x3d0e <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    44f4:	80 91 18 07 	lds	r24, 0x0718
    44f8:	1b 82       	std	Y+3, r1	; 0x03
    44fa:	88 23       	and	r24, r24
    44fc:	11 f4       	brne	.+4      	; 0x4502 <prvCheckTasksWaitingTermination+0x26>
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    4502:	0e 94 93 1e 	call	0x3d26	; 0x3d26 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4506:	8b 81       	ldd	r24, Y+3	; 0x03
    4508:	88 23       	and	r24, r24
    450a:	01 f5       	brne	.+64     	; 0x454c <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    450c:	0f b6       	in	r0, 0x3f	; 63
    450e:	f8 94       	cli
    4510:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4512:	e0 91 1d 07 	lds	r30, 0x071D
    4516:	f0 91 1e 07 	lds	r31, 0x071E
    451a:	86 81       	ldd	r24, Z+6	; 0x06
    451c:	97 81       	ldd	r25, Z+7	; 0x07
    451e:	9a 83       	std	Y+2, r25	; 0x02
    4520:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    4522:	89 81       	ldd	r24, Y+1	; 0x01
    4524:	9a 81       	ldd	r25, Y+2	; 0x02
    4526:	02 96       	adiw	r24, 0x02	; 2
    4528:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>
					--uxCurrentNumberOfTasks;
    452c:	80 91 c1 06 	lds	r24, 0x06C1
    4530:	81 50       	subi	r24, 0x01	; 1
    4532:	80 93 c1 06 	sts	0x06C1, r24
					--uxTasksDeleted;
    4536:	80 91 c0 06 	lds	r24, 0x06C0
    453a:	81 50       	subi	r24, 0x01	; 1
    453c:	80 93 c0 06 	sts	0x06C0, r24
				}
				taskEXIT_CRITICAL();
    4540:	0f 90       	pop	r0
    4542:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    4544:	89 81       	ldd	r24, Y+1	; 0x01
    4546:	9a 81       	ldd	r25, Y+2	; 0x02
    4548:	0e 94 45 23 	call	0x468a	; 0x468a <prvDeleteTCB>
			}
		}
	}
	#endif
}
    454c:	0f 90       	pop	r0
    454e:	0f 90       	pop	r0
    4550:	0f 90       	pop	r0
    4552:	cf 91       	pop	r28
    4554:	df 91       	pop	r29
    4556:	08 95       	ret

00004558 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    4558:	df 93       	push	r29
    455a:	cf 93       	push	r28
    455c:	00 d0       	rcall	.+0      	; 0x455e <prvAddCurrentTaskToDelayedList+0x6>
    455e:	cd b7       	in	r28, 0x3d	; 61
    4560:	de b7       	in	r29, 0x3e	; 62
    4562:	9a 83       	std	Y+2, r25	; 0x02
    4564:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4566:	e0 91 be 06 	lds	r30, 0x06BE
    456a:	f0 91 bf 06 	lds	r31, 0x06BF
    456e:	89 81       	ldd	r24, Y+1	; 0x01
    4570:	9a 81       	ldd	r25, Y+2	; 0x02
    4572:	93 83       	std	Z+3, r25	; 0x03
    4574:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    4576:	20 91 c2 06 	lds	r18, 0x06C2
    457a:	30 91 c3 06 	lds	r19, 0x06C3
    457e:	89 81       	ldd	r24, Y+1	; 0x01
    4580:	9a 81       	ldd	r25, Y+2	; 0x02
    4582:	82 17       	cp	r24, r18
    4584:	93 07       	cpc	r25, r19
    4586:	70 f4       	brcc	.+28     	; 0x45a4 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4588:	80 91 0d 07 	lds	r24, 0x070D
    458c:	90 91 0e 07 	lds	r25, 0x070E
    4590:	20 91 be 06 	lds	r18, 0x06BE
    4594:	30 91 bf 06 	lds	r19, 0x06BF
    4598:	2e 5f       	subi	r18, 0xFE	; 254
    459a:	3f 4f       	sbci	r19, 0xFF	; 255
    459c:	b9 01       	movw	r22, r18
    459e:	0e 94 4c 12 	call	0x2498	; 0x2498 <vListInsert>
    45a2:	1e c0       	rjmp	.+60     	; 0x45e0 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    45a4:	40 91 0b 07 	lds	r20, 0x070B
    45a8:	50 91 0c 07 	lds	r21, 0x070C
    45ac:	80 91 be 06 	lds	r24, 0x06BE
    45b0:	90 91 bf 06 	lds	r25, 0x06BF
    45b4:	9c 01       	movw	r18, r24
    45b6:	2e 5f       	subi	r18, 0xFE	; 254
    45b8:	3f 4f       	sbci	r19, 0xFF	; 255
    45ba:	ca 01       	movw	r24, r20
    45bc:	b9 01       	movw	r22, r18
    45be:	0e 94 4c 12 	call	0x2498	; 0x2498 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    45c2:	20 91 a5 01 	lds	r18, 0x01A5
    45c6:	30 91 a6 01 	lds	r19, 0x01A6
    45ca:	89 81       	ldd	r24, Y+1	; 0x01
    45cc:	9a 81       	ldd	r25, Y+2	; 0x02
    45ce:	82 17       	cp	r24, r18
    45d0:	93 07       	cpc	r25, r19
    45d2:	30 f4       	brcc	.+12     	; 0x45e0 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    45d4:	89 81       	ldd	r24, Y+1	; 0x01
    45d6:	9a 81       	ldd	r25, Y+2	; 0x02
    45d8:	90 93 a6 01 	sts	0x01A6, r25
    45dc:	80 93 a5 01 	sts	0x01A5, r24
		}
	}
}
    45e0:	0f 90       	pop	r0
    45e2:	0f 90       	pop	r0
    45e4:	cf 91       	pop	r28
    45e6:	df 91       	pop	r29
    45e8:	08 95       	ret

000045ea <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    45ea:	df 93       	push	r29
    45ec:	cf 93       	push	r28
    45ee:	cd b7       	in	r28, 0x3d	; 61
    45f0:	de b7       	in	r29, 0x3e	; 62
    45f2:	28 97       	sbiw	r28, 0x08	; 8
    45f4:	0f b6       	in	r0, 0x3f	; 63
    45f6:	f8 94       	cli
    45f8:	de bf       	out	0x3e, r29	; 62
    45fa:	0f be       	out	0x3f, r0	; 63
    45fc:	cd bf       	out	0x3d, r28	; 61
    45fe:	9c 83       	std	Y+4, r25	; 0x04
    4600:	8b 83       	std	Y+3, r24	; 0x03
    4602:	7e 83       	std	Y+6, r23	; 0x06
    4604:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4606:	82 e2       	ldi	r24, 0x22	; 34
    4608:	90 e0       	ldi	r25, 0x00	; 0
    460a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pvPortMalloc>
    460e:	9a 83       	std	Y+2, r25	; 0x02
    4610:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	9a 81       	ldd	r25, Y+2	; 0x02
    4616:	00 97       	sbiw	r24, 0x00	; 0
    4618:	69 f1       	breq	.+90     	; 0x4674 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    461a:	8d 81       	ldd	r24, Y+5	; 0x05
    461c:	9e 81       	ldd	r25, Y+6	; 0x06
    461e:	00 97       	sbiw	r24, 0x00	; 0
    4620:	39 f4       	brne	.+14     	; 0x4630 <prvAllocateTCBAndStack+0x46>
    4622:	8b 81       	ldd	r24, Y+3	; 0x03
    4624:	9c 81       	ldd	r25, Y+4	; 0x04
    4626:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <pvPortMalloc>
    462a:	98 87       	std	Y+8, r25	; 0x08
    462c:	8f 83       	std	Y+7, r24	; 0x07
    462e:	04 c0       	rjmp	.+8      	; 0x4638 <prvAllocateTCBAndStack+0x4e>
    4630:	8d 81       	ldd	r24, Y+5	; 0x05
    4632:	9e 81       	ldd	r25, Y+6	; 0x06
    4634:	98 87       	std	Y+8, r25	; 0x08
    4636:	8f 83       	std	Y+7, r24	; 0x07
    4638:	e9 81       	ldd	r30, Y+1	; 0x01
    463a:	fa 81       	ldd	r31, Y+2	; 0x02
    463c:	8f 81       	ldd	r24, Y+7	; 0x07
    463e:	98 85       	ldd	r25, Y+8	; 0x08
    4640:	90 8f       	std	Z+24, r25	; 0x18
    4642:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    4644:	e9 81       	ldd	r30, Y+1	; 0x01
    4646:	fa 81       	ldd	r31, Y+2	; 0x02
    4648:	87 89       	ldd	r24, Z+23	; 0x17
    464a:	90 8d       	ldd	r25, Z+24	; 0x18
    464c:	00 97       	sbiw	r24, 0x00	; 0
    464e:	39 f4       	brne	.+14     	; 0x465e <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4650:	89 81       	ldd	r24, Y+1	; 0x01
    4652:	9a 81       	ldd	r25, Y+2	; 0x02
    4654:	0e 94 a0 11 	call	0x2340	; 0x2340 <vPortFree>
			pxNewTCB = NULL;
    4658:	1a 82       	std	Y+2, r1	; 0x02
    465a:	19 82       	std	Y+1, r1	; 0x01
    465c:	0b c0       	rjmp	.+22     	; 0x4674 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    465e:	e9 81       	ldd	r30, Y+1	; 0x01
    4660:	fa 81       	ldd	r31, Y+2	; 0x02
    4662:	87 89       	ldd	r24, Z+23	; 0x17
    4664:	90 8d       	ldd	r25, Z+24	; 0x18
    4666:	2b 81       	ldd	r18, Y+3	; 0x03
    4668:	3c 81       	ldd	r19, Y+4	; 0x04
    466a:	65 ea       	ldi	r22, 0xA5	; 165
    466c:	70 e0       	ldi	r23, 0x00	; 0
    466e:	a9 01       	movw	r20, r18
    4670:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <memset>
		}
	}

	return pxNewTCB;
    4674:	89 81       	ldd	r24, Y+1	; 0x01
    4676:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4678:	28 96       	adiw	r28, 0x08	; 8
    467a:	0f b6       	in	r0, 0x3f	; 63
    467c:	f8 94       	cli
    467e:	de bf       	out	0x3e, r29	; 62
    4680:	0f be       	out	0x3f, r0	; 63
    4682:	cd bf       	out	0x3d, r28	; 61
    4684:	cf 91       	pop	r28
    4686:	df 91       	pop	r29
    4688:	08 95       	ret

0000468a <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    468a:	df 93       	push	r29
    468c:	cf 93       	push	r28
    468e:	00 d0       	rcall	.+0      	; 0x4690 <prvDeleteTCB+0x6>
    4690:	cd b7       	in	r28, 0x3d	; 61
    4692:	de b7       	in	r29, 0x3e	; 62
    4694:	9a 83       	std	Y+2, r25	; 0x02
    4696:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4698:	e9 81       	ldd	r30, Y+1	; 0x01
    469a:	fa 81       	ldd	r31, Y+2	; 0x02
    469c:	87 89       	ldd	r24, Z+23	; 0x17
    469e:	90 8d       	ldd	r25, Z+24	; 0x18
    46a0:	0e 94 a0 11 	call	0x2340	; 0x2340 <vPortFree>
		vPortFree( pxTCB );
    46a4:	89 81       	ldd	r24, Y+1	; 0x01
    46a6:	9a 81       	ldd	r25, Y+2	; 0x02
    46a8:	0e 94 a0 11 	call	0x2340	; 0x2340 <vPortFree>
	}
    46ac:	0f 90       	pop	r0
    46ae:	0f 90       	pop	r0
    46b0:	cf 91       	pop	r28
    46b2:	df 91       	pop	r29
    46b4:	08 95       	ret

000046b6 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    46b6:	df 93       	push	r29
    46b8:	cf 93       	push	r28
    46ba:	00 d0       	rcall	.+0      	; 0x46bc <xTaskGetCurrentTaskHandle+0x6>
    46bc:	cd b7       	in	r28, 0x3d	; 61
    46be:	de b7       	in	r29, 0x3e	; 62
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    46c0:	80 91 be 06 	lds	r24, 0x06BE
    46c4:	90 91 bf 06 	lds	r25, 0x06BF
    46c8:	9a 83       	std	Y+2, r25	; 0x02
    46ca:	89 83       	std	Y+1, r24	; 0x01

		return xReturn;
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    46d0:	0f 90       	pop	r0
    46d2:	0f 90       	pop	r0
    46d4:	cf 91       	pop	r28
    46d6:	df 91       	pop	r29
    46d8:	08 95       	ret

000046da <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    46da:	df 93       	push	r29
    46dc:	cf 93       	push	r28
    46de:	00 d0       	rcall	.+0      	; 0x46e0 <vTaskPriorityInherit+0x6>
    46e0:	00 d0       	rcall	.+0      	; 0x46e2 <vTaskPriorityInherit+0x8>
    46e2:	cd b7       	in	r28, 0x3d	; 61
    46e4:	de b7       	in	r29, 0x3e	; 62
    46e6:	9c 83       	std	Y+4, r25	; 0x04
    46e8:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    46ea:	8b 81       	ldd	r24, Y+3	; 0x03
    46ec:	9c 81       	ldd	r25, Y+4	; 0x04
    46ee:	9a 83       	std	Y+2, r25	; 0x02
    46f0:	89 83       	std	Y+1, r24	; 0x01

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    46f2:	e9 81       	ldd	r30, Y+1	; 0x01
    46f4:	fa 81       	ldd	r31, Y+2	; 0x02
    46f6:	96 89       	ldd	r25, Z+22	; 0x16
    46f8:	e0 91 be 06 	lds	r30, 0x06BE
    46fc:	f0 91 bf 06 	lds	r31, 0x06BF
    4700:	86 89       	ldd	r24, Z+22	; 0x16
    4702:	98 17       	cp	r25, r24
    4704:	08 f0       	brcs	.+2      	; 0x4708 <vTaskPriorityInherit+0x2e>
    4706:	62 c0       	rjmp	.+196    	; 0x47cc <vTaskPriorityInherit+0xf2>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    4708:	e0 91 be 06 	lds	r30, 0x06BE
    470c:	f0 91 bf 06 	lds	r31, 0x06BF
    4710:	86 89       	ldd	r24, Z+22	; 0x16
    4712:	28 2f       	mov	r18, r24
    4714:	30 e0       	ldi	r19, 0x00	; 0
    4716:	85 e0       	ldi	r24, 0x05	; 5
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	82 1b       	sub	r24, r18
    471c:	93 0b       	sbc	r25, r19
    471e:	e9 81       	ldd	r30, Y+1	; 0x01
    4720:	fa 81       	ldd	r31, Y+2	; 0x02
    4722:	95 87       	std	Z+13, r25	; 0x0d
    4724:	84 87       	std	Z+12, r24	; 0x0c

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    4726:	e9 81       	ldd	r30, Y+1	; 0x01
    4728:	fa 81       	ldd	r31, Y+2	; 0x02
    472a:	42 85       	ldd	r20, Z+10	; 0x0a
    472c:	53 85       	ldd	r21, Z+11	; 0x0b
    472e:	e9 81       	ldd	r30, Y+1	; 0x01
    4730:	fa 81       	ldd	r31, Y+2	; 0x02
    4732:	86 89       	ldd	r24, Z+22	; 0x16
    4734:	28 2f       	mov	r18, r24
    4736:	30 e0       	ldi	r19, 0x00	; 0
    4738:	c9 01       	movw	r24, r18
    473a:	88 0f       	add	r24, r24
    473c:	99 1f       	adc	r25, r25
    473e:	88 0f       	add	r24, r24
    4740:	99 1f       	adc	r25, r25
    4742:	88 0f       	add	r24, r24
    4744:	99 1f       	adc	r25, r25
    4746:	82 0f       	add	r24, r18
    4748:	93 1f       	adc	r25, r19
    474a:	84 53       	subi	r24, 0x34	; 52
    474c:	99 4f       	sbci	r25, 0xF9	; 249
    474e:	48 17       	cp	r20, r24
    4750:	59 07       	cpc	r21, r25
    4752:	a1 f5       	brne	.+104    	; 0x47bc <vTaskPriorityInherit+0xe2>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	9a 81       	ldd	r25, Y+2	; 0x02
    4758:	02 96       	adiw	r24, 0x02	; 2
    475a:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    475e:	e0 91 be 06 	lds	r30, 0x06BE
    4762:	f0 91 bf 06 	lds	r31, 0x06BF
    4766:	86 89       	ldd	r24, Z+22	; 0x16
    4768:	e9 81       	ldd	r30, Y+1	; 0x01
    476a:	fa 81       	ldd	r31, Y+2	; 0x02
    476c:	86 8b       	std	Z+22, r24	; 0x16
				prvAddTaskToReadyQueue( pxTCB );
    476e:	e9 81       	ldd	r30, Y+1	; 0x01
    4770:	fa 81       	ldd	r31, Y+2	; 0x02
    4772:	96 89       	ldd	r25, Z+22	; 0x16
    4774:	80 91 c5 06 	lds	r24, 0x06C5
    4778:	89 17       	cp	r24, r25
    477a:	28 f4       	brcc	.+10     	; 0x4786 <vTaskPriorityInherit+0xac>
    477c:	e9 81       	ldd	r30, Y+1	; 0x01
    477e:	fa 81       	ldd	r31, Y+2	; 0x02
    4780:	86 89       	ldd	r24, Z+22	; 0x16
    4782:	80 93 c5 06 	sts	0x06C5, r24
    4786:	e9 81       	ldd	r30, Y+1	; 0x01
    4788:	fa 81       	ldd	r31, Y+2	; 0x02
    478a:	86 89       	ldd	r24, Z+22	; 0x16
    478c:	28 2f       	mov	r18, r24
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	c9 01       	movw	r24, r18
    4792:	88 0f       	add	r24, r24
    4794:	99 1f       	adc	r25, r25
    4796:	88 0f       	add	r24, r24
    4798:	99 1f       	adc	r25, r25
    479a:	88 0f       	add	r24, r24
    479c:	99 1f       	adc	r25, r25
    479e:	82 0f       	add	r24, r18
    47a0:	93 1f       	adc	r25, r19
    47a2:	ac 01       	movw	r20, r24
    47a4:	44 53       	subi	r20, 0x34	; 52
    47a6:	59 4f       	sbci	r21, 0xF9	; 249
    47a8:	89 81       	ldd	r24, Y+1	; 0x01
    47aa:	9a 81       	ldd	r25, Y+2	; 0x02
    47ac:	9c 01       	movw	r18, r24
    47ae:	2e 5f       	subi	r18, 0xFE	; 254
    47b0:	3f 4f       	sbci	r19, 0xFF	; 255
    47b2:	ca 01       	movw	r24, r20
    47b4:	b9 01       	movw	r22, r18
    47b6:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
    47ba:	08 c0       	rjmp	.+16     	; 0x47cc <vTaskPriorityInherit+0xf2>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    47bc:	e0 91 be 06 	lds	r30, 0x06BE
    47c0:	f0 91 bf 06 	lds	r31, 0x06BF
    47c4:	86 89       	ldd	r24, Z+22	; 0x16
    47c6:	e9 81       	ldd	r30, Y+1	; 0x01
    47c8:	fa 81       	ldd	r31, Y+2	; 0x02
    47ca:	86 8b       	std	Z+22, r24	; 0x16
			}
		}
	}
    47cc:	0f 90       	pop	r0
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	0f 90       	pop	r0
    47d4:	cf 91       	pop	r28
    47d6:	df 91       	pop	r29
    47d8:	08 95       	ret

000047da <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    47da:	df 93       	push	r29
    47dc:	cf 93       	push	r28
    47de:	00 d0       	rcall	.+0      	; 0x47e0 <vTaskPriorityDisinherit+0x6>
    47e0:	00 d0       	rcall	.+0      	; 0x47e2 <vTaskPriorityDisinherit+0x8>
    47e2:	cd b7       	in	r28, 0x3d	; 61
    47e4:	de b7       	in	r29, 0x3e	; 62
    47e6:	9c 83       	std	Y+4, r25	; 0x04
    47e8:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    47ea:	8b 81       	ldd	r24, Y+3	; 0x03
    47ec:	9c 81       	ldd	r25, Y+4	; 0x04
    47ee:	9a 83       	std	Y+2, r25	; 0x02
    47f0:	89 83       	std	Y+1, r24	; 0x01

		if( pxMutexHolder != NULL )
    47f2:	8b 81       	ldd	r24, Y+3	; 0x03
    47f4:	9c 81       	ldd	r25, Y+4	; 0x04
    47f6:	00 97       	sbiw	r24, 0x00	; 0
    47f8:	09 f4       	brne	.+2      	; 0x47fc <vTaskPriorityDisinherit+0x22>
    47fa:	47 c0       	rjmp	.+142    	; 0x488a <vTaskPriorityDisinherit+0xb0>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    47fc:	e9 81       	ldd	r30, Y+1	; 0x01
    47fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4800:	96 89       	ldd	r25, Z+22	; 0x16
    4802:	e9 81       	ldd	r30, Y+1	; 0x01
    4804:	fa 81       	ldd	r31, Y+2	; 0x02
    4806:	81 a1       	ldd	r24, Z+33	; 0x21
    4808:	98 17       	cp	r25, r24
    480a:	09 f4       	brne	.+2      	; 0x480e <vTaskPriorityDisinherit+0x34>
    480c:	3e c0       	rjmp	.+124    	; 0x488a <vTaskPriorityDisinherit+0xb0>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    480e:	89 81       	ldd	r24, Y+1	; 0x01
    4810:	9a 81       	ldd	r25, Y+2	; 0x02
    4812:	02 96       	adiw	r24, 0x02	; 2
    4814:	0e 94 b8 12 	call	0x2570	; 0x2570 <vListRemove>

				/* Disinherit the priority before adding ourselves into the new
				ready list. */
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    4818:	e9 81       	ldd	r30, Y+1	; 0x01
    481a:	fa 81       	ldd	r31, Y+2	; 0x02
    481c:	81 a1       	ldd	r24, Z+33	; 0x21
    481e:	e9 81       	ldd	r30, Y+1	; 0x01
    4820:	fa 81       	ldd	r31, Y+2	; 0x02
    4822:	86 8b       	std	Z+22, r24	; 0x16
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    4824:	e9 81       	ldd	r30, Y+1	; 0x01
    4826:	fa 81       	ldd	r31, Y+2	; 0x02
    4828:	86 89       	ldd	r24, Z+22	; 0x16
    482a:	28 2f       	mov	r18, r24
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	85 e0       	ldi	r24, 0x05	; 5
    4830:	90 e0       	ldi	r25, 0x00	; 0
    4832:	82 1b       	sub	r24, r18
    4834:	93 0b       	sbc	r25, r19
    4836:	e9 81       	ldd	r30, Y+1	; 0x01
    4838:	fa 81       	ldd	r31, Y+2	; 0x02
    483a:	95 87       	std	Z+13, r25	; 0x0d
    483c:	84 87       	std	Z+12, r24	; 0x0c
				prvAddTaskToReadyQueue( pxTCB );
    483e:	e9 81       	ldd	r30, Y+1	; 0x01
    4840:	fa 81       	ldd	r31, Y+2	; 0x02
    4842:	96 89       	ldd	r25, Z+22	; 0x16
    4844:	80 91 c5 06 	lds	r24, 0x06C5
    4848:	89 17       	cp	r24, r25
    484a:	28 f4       	brcc	.+10     	; 0x4856 <vTaskPriorityDisinherit+0x7c>
    484c:	e9 81       	ldd	r30, Y+1	; 0x01
    484e:	fa 81       	ldd	r31, Y+2	; 0x02
    4850:	86 89       	ldd	r24, Z+22	; 0x16
    4852:	80 93 c5 06 	sts	0x06C5, r24
    4856:	e9 81       	ldd	r30, Y+1	; 0x01
    4858:	fa 81       	ldd	r31, Y+2	; 0x02
    485a:	86 89       	ldd	r24, Z+22	; 0x16
    485c:	28 2f       	mov	r18, r24
    485e:	30 e0       	ldi	r19, 0x00	; 0
    4860:	c9 01       	movw	r24, r18
    4862:	88 0f       	add	r24, r24
    4864:	99 1f       	adc	r25, r25
    4866:	88 0f       	add	r24, r24
    4868:	99 1f       	adc	r25, r25
    486a:	88 0f       	add	r24, r24
    486c:	99 1f       	adc	r25, r25
    486e:	82 0f       	add	r24, r18
    4870:	93 1f       	adc	r25, r19
    4872:	ac 01       	movw	r20, r24
    4874:	44 53       	subi	r20, 0x34	; 52
    4876:	59 4f       	sbci	r21, 0xF9	; 249
    4878:	89 81       	ldd	r24, Y+1	; 0x01
    487a:	9a 81       	ldd	r25, Y+2	; 0x02
    487c:	9c 01       	movw	r18, r24
    487e:	2e 5f       	subi	r18, 0xFE	; 254
    4880:	3f 4f       	sbci	r19, 0xFF	; 255
    4882:	ca 01       	movw	r24, r20
    4884:	b9 01       	movw	r22, r18
    4886:	0e 94 00 12 	call	0x2400	; 0x2400 <vListInsertEnd>
			}
		}
	}
    488a:	0f 90       	pop	r0
    488c:	0f 90       	pop	r0
    488e:	0f 90       	pop	r0
    4890:	0f 90       	pop	r0
    4892:	cf 91       	pop	r28
    4894:	df 91       	pop	r29
    4896:	08 95       	ret

00004898 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
    4898:	df 93       	push	r29
    489a:	cf 93       	push	r28
    489c:	0f 92       	push	r0
    489e:	cd b7       	in	r28, 0x3d	; 61
    48a0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    48a2:	19 82       	std	Y+1, r1	; 0x01

	DDRA = CONC(PA7_DIR,PA6_DIR,PA5_DIR,PA4_DIR,PA3_DIR,PA2_DIR,PA1_DIR,PA0_DIR);
    48a4:	ea e3       	ldi	r30, 0x3A	; 58
    48a6:	f0 e0       	ldi	r31, 0x00	; 0
    48a8:	85 e7       	ldi	r24, 0x75	; 117
    48aa:	80 83       	st	Z, r24

	PORTA = CONC(PA7_INIT_VAL,PA6_INIT_VAL,PA5_INIT_VAL,PA4_INIT_VAL,PA3_INIT_VAL,PA2_INIT_VAL,PA1_INIT_VAL,PA0_INIT_VAL);
    48ac:	eb e3       	ldi	r30, 0x3B	; 59
    48ae:	f0 e0       	ldi	r31, 0x00	; 0
    48b0:	89 ed       	ldi	r24, 0xD9	; 217
    48b2:	80 83       	st	Z, r24

#elif PA0_DIR == DIO_u8OUTPUT

#endif
*/
	return Local_enuErrorState;
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    48b6:	0f 90       	pop	r0
    48b8:	cf 91       	pop	r28
    48ba:	df 91       	pop	r29
    48bc:	08 95       	ret

000048be <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Direction)
{
    48be:	df 93       	push	r29
    48c0:	cf 93       	push	r28
    48c2:	00 d0       	rcall	.+0      	; 0x48c4 <DIO_enuSetPinDirection+0x6>
    48c4:	00 d0       	rcall	.+0      	; 0x48c6 <DIO_enuSetPinDirection+0x8>
    48c6:	00 d0       	rcall	.+0      	; 0x48c8 <DIO_enuSetPinDirection+0xa>
    48c8:	cd b7       	in	r28, 0x3d	; 61
    48ca:	de b7       	in	r29, 0x3e	; 62
    48cc:	8a 83       	std	Y+2, r24	; 0x02
    48ce:	6b 83       	std	Y+3, r22	; 0x03
    48d0:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    48d2:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    48d4:	8a 81       	ldd	r24, Y+2	; 0x02
    48d6:	84 30       	cpi	r24, 0x04	; 4
    48d8:	08 f0       	brcs	.+2      	; 0x48dc <DIO_enuSetPinDirection+0x1e>
    48da:	d1 c0       	rjmp	.+418    	; 0x4a7e <DIO_enuSetPinDirection+0x1c0>
    48dc:	8b 81       	ldd	r24, Y+3	; 0x03
    48de:	88 30       	cpi	r24, 0x08	; 8
    48e0:	08 f0       	brcs	.+2      	; 0x48e4 <DIO_enuSetPinDirection+0x26>
    48e2:	cd c0       	rjmp	.+410    	; 0x4a7e <DIO_enuSetPinDirection+0x1c0>
    48e4:	8c 81       	ldd	r24, Y+4	; 0x04
    48e6:	82 30       	cpi	r24, 0x02	; 2
    48e8:	08 f0       	brcs	.+2      	; 0x48ec <DIO_enuSetPinDirection+0x2e>
    48ea:	c9 c0       	rjmp	.+402    	; 0x4a7e <DIO_enuSetPinDirection+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
    48ec:	8a 81       	ldd	r24, Y+2	; 0x02
    48ee:	28 2f       	mov	r18, r24
    48f0:	30 e0       	ldi	r19, 0x00	; 0
    48f2:	3e 83       	std	Y+6, r19	; 0x06
    48f4:	2d 83       	std	Y+5, r18	; 0x05
    48f6:	6d 81       	ldd	r22, Y+5	; 0x05
    48f8:	7e 81       	ldd	r23, Y+6	; 0x06
    48fa:	61 30       	cpi	r22, 0x01	; 1
    48fc:	71 05       	cpc	r23, r1
    48fe:	09 f4       	brne	.+2      	; 0x4902 <DIO_enuSetPinDirection+0x44>
    4900:	41 c0       	rjmp	.+130    	; 0x4984 <DIO_enuSetPinDirection+0xc6>
    4902:	8d 81       	ldd	r24, Y+5	; 0x05
    4904:	9e 81       	ldd	r25, Y+6	; 0x06
    4906:	82 30       	cpi	r24, 0x02	; 2
    4908:	91 05       	cpc	r25, r1
    490a:	34 f4       	brge	.+12     	; 0x4918 <DIO_enuSetPinDirection+0x5a>
    490c:	2d 81       	ldd	r18, Y+5	; 0x05
    490e:	3e 81       	ldd	r19, Y+6	; 0x06
    4910:	21 15       	cp	r18, r1
    4912:	31 05       	cpc	r19, r1
    4914:	71 f0       	breq	.+28     	; 0x4932 <DIO_enuSetPinDirection+0x74>
    4916:	b0 c0       	rjmp	.+352    	; 0x4a78 <DIO_enuSetPinDirection+0x1ba>
    4918:	6d 81       	ldd	r22, Y+5	; 0x05
    491a:	7e 81       	ldd	r23, Y+6	; 0x06
    491c:	62 30       	cpi	r22, 0x02	; 2
    491e:	71 05       	cpc	r23, r1
    4920:	09 f4       	brne	.+2      	; 0x4924 <DIO_enuSetPinDirection+0x66>
    4922:	59 c0       	rjmp	.+178    	; 0x49d6 <DIO_enuSetPinDirection+0x118>
    4924:	8d 81       	ldd	r24, Y+5	; 0x05
    4926:	9e 81       	ldd	r25, Y+6	; 0x06
    4928:	83 30       	cpi	r24, 0x03	; 3
    492a:	91 05       	cpc	r25, r1
    492c:	09 f4       	brne	.+2      	; 0x4930 <DIO_enuSetPinDirection+0x72>
    492e:	7c c0       	rjmp	.+248    	; 0x4a28 <DIO_enuSetPinDirection+0x16a>
    4930:	a3 c0       	rjmp	.+326    	; 0x4a78 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4932:	aa e3       	ldi	r26, 0x3A	; 58
    4934:	b0 e0       	ldi	r27, 0x00	; 0
    4936:	ea e3       	ldi	r30, 0x3A	; 58
    4938:	f0 e0       	ldi	r31, 0x00	; 0
    493a:	80 81       	ld	r24, Z
    493c:	48 2f       	mov	r20, r24
    493e:	8b 81       	ldd	r24, Y+3	; 0x03
    4940:	28 2f       	mov	r18, r24
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	81 e0       	ldi	r24, 0x01	; 1
    4946:	90 e0       	ldi	r25, 0x00	; 0
    4948:	02 c0       	rjmp	.+4      	; 0x494e <DIO_enuSetPinDirection+0x90>
    494a:	88 0f       	add	r24, r24
    494c:	99 1f       	adc	r25, r25
    494e:	2a 95       	dec	r18
    4950:	e2 f7       	brpl	.-8      	; 0x494a <DIO_enuSetPinDirection+0x8c>
    4952:	80 95       	com	r24
    4954:	84 23       	and	r24, r20
    4956:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction<<Copy_u8PinID);
    4958:	aa e3       	ldi	r26, 0x3A	; 58
    495a:	b0 e0       	ldi	r27, 0x00	; 0
    495c:	ea e3       	ldi	r30, 0x3A	; 58
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	80 81       	ld	r24, Z
    4962:	48 2f       	mov	r20, r24
    4964:	8c 81       	ldd	r24, Y+4	; 0x04
    4966:	28 2f       	mov	r18, r24
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	8b 81       	ldd	r24, Y+3	; 0x03
    496c:	88 2f       	mov	r24, r24
    496e:	90 e0       	ldi	r25, 0x00	; 0
    4970:	b9 01       	movw	r22, r18
    4972:	02 c0       	rjmp	.+4      	; 0x4978 <DIO_enuSetPinDirection+0xba>
    4974:	66 0f       	add	r22, r22
    4976:	77 1f       	adc	r23, r23
    4978:	8a 95       	dec	r24
    497a:	e2 f7       	brpl	.-8      	; 0x4974 <DIO_enuSetPinDirection+0xb6>
    497c:	cb 01       	movw	r24, r22
    497e:	84 2b       	or	r24, r20
    4980:	8c 93       	st	X, r24
    4982:	7a c0       	rjmp	.+244    	; 0x4a78 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4984:	a7 e3       	ldi	r26, 0x37	; 55
    4986:	b0 e0       	ldi	r27, 0x00	; 0
    4988:	e7 e3       	ldi	r30, 0x37	; 55
    498a:	f0 e0       	ldi	r31, 0x00	; 0
    498c:	80 81       	ld	r24, Z
    498e:	48 2f       	mov	r20, r24
    4990:	8b 81       	ldd	r24, Y+3	; 0x03
    4992:	28 2f       	mov	r18, r24
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	81 e0       	ldi	r24, 0x01	; 1
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	02 c0       	rjmp	.+4      	; 0x49a0 <DIO_enuSetPinDirection+0xe2>
    499c:	88 0f       	add	r24, r24
    499e:	99 1f       	adc	r25, r25
    49a0:	2a 95       	dec	r18
    49a2:	e2 f7       	brpl	.-8      	; 0x499c <DIO_enuSetPinDirection+0xde>
    49a4:	80 95       	com	r24
    49a6:	84 23       	and	r24, r20
    49a8:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction<<Copy_u8PinID);
    49aa:	a7 e3       	ldi	r26, 0x37	; 55
    49ac:	b0 e0       	ldi	r27, 0x00	; 0
    49ae:	e7 e3       	ldi	r30, 0x37	; 55
    49b0:	f0 e0       	ldi	r31, 0x00	; 0
    49b2:	80 81       	ld	r24, Z
    49b4:	48 2f       	mov	r20, r24
    49b6:	8c 81       	ldd	r24, Y+4	; 0x04
    49b8:	28 2f       	mov	r18, r24
    49ba:	30 e0       	ldi	r19, 0x00	; 0
    49bc:	8b 81       	ldd	r24, Y+3	; 0x03
    49be:	88 2f       	mov	r24, r24
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	b9 01       	movw	r22, r18
    49c4:	02 c0       	rjmp	.+4      	; 0x49ca <DIO_enuSetPinDirection+0x10c>
    49c6:	66 0f       	add	r22, r22
    49c8:	77 1f       	adc	r23, r23
    49ca:	8a 95       	dec	r24
    49cc:	e2 f7       	brpl	.-8      	; 0x49c6 <DIO_enuSetPinDirection+0x108>
    49ce:	cb 01       	movw	r24, r22
    49d0:	84 2b       	or	r24, r20
    49d2:	8c 93       	st	X, r24
    49d4:	51 c0       	rjmp	.+162    	; 0x4a78 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    49d6:	a4 e3       	ldi	r26, 0x34	; 52
    49d8:	b0 e0       	ldi	r27, 0x00	; 0
    49da:	e4 e3       	ldi	r30, 0x34	; 52
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	80 81       	ld	r24, Z
    49e0:	48 2f       	mov	r20, r24
    49e2:	8b 81       	ldd	r24, Y+3	; 0x03
    49e4:	28 2f       	mov	r18, r24
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	81 e0       	ldi	r24, 0x01	; 1
    49ea:	90 e0       	ldi	r25, 0x00	; 0
    49ec:	02 c0       	rjmp	.+4      	; 0x49f2 <DIO_enuSetPinDirection+0x134>
    49ee:	88 0f       	add	r24, r24
    49f0:	99 1f       	adc	r25, r25
    49f2:	2a 95       	dec	r18
    49f4:	e2 f7       	brpl	.-8      	; 0x49ee <DIO_enuSetPinDirection+0x130>
    49f6:	80 95       	com	r24
    49f8:	84 23       	and	r24, r20
    49fa:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction<<Copy_u8PinID);
    49fc:	a4 e3       	ldi	r26, 0x34	; 52
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	e4 e3       	ldi	r30, 0x34	; 52
    4a02:	f0 e0       	ldi	r31, 0x00	; 0
    4a04:	80 81       	ld	r24, Z
    4a06:	48 2f       	mov	r20, r24
    4a08:	8c 81       	ldd	r24, Y+4	; 0x04
    4a0a:	28 2f       	mov	r18, r24
    4a0c:	30 e0       	ldi	r19, 0x00	; 0
    4a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4a10:	88 2f       	mov	r24, r24
    4a12:	90 e0       	ldi	r25, 0x00	; 0
    4a14:	b9 01       	movw	r22, r18
    4a16:	02 c0       	rjmp	.+4      	; 0x4a1c <DIO_enuSetPinDirection+0x15e>
    4a18:	66 0f       	add	r22, r22
    4a1a:	77 1f       	adc	r23, r23
    4a1c:	8a 95       	dec	r24
    4a1e:	e2 f7       	brpl	.-8      	; 0x4a18 <DIO_enuSetPinDirection+0x15a>
    4a20:	cb 01       	movw	r24, r22
    4a22:	84 2b       	or	r24, r20
    4a24:	8c 93       	st	X, r24
    4a26:	28 c0       	rjmp	.+80     	; 0x4a78 <DIO_enuSetPinDirection+0x1ba>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4a28:	a1 e3       	ldi	r26, 0x31	; 49
    4a2a:	b0 e0       	ldi	r27, 0x00	; 0
    4a2c:	e1 e3       	ldi	r30, 0x31	; 49
    4a2e:	f0 e0       	ldi	r31, 0x00	; 0
    4a30:	80 81       	ld	r24, Z
    4a32:	48 2f       	mov	r20, r24
    4a34:	8b 81       	ldd	r24, Y+3	; 0x03
    4a36:	28 2f       	mov	r18, r24
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <DIO_enuSetPinDirection+0x186>
    4a40:	88 0f       	add	r24, r24
    4a42:	99 1f       	adc	r25, r25
    4a44:	2a 95       	dec	r18
    4a46:	e2 f7       	brpl	.-8      	; 0x4a40 <DIO_enuSetPinDirection+0x182>
    4a48:	80 95       	com	r24
    4a4a:	84 23       	and	r24, r20
    4a4c:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction<<Copy_u8PinID);
    4a4e:	a1 e3       	ldi	r26, 0x31	; 49
    4a50:	b0 e0       	ldi	r27, 0x00	; 0
    4a52:	e1 e3       	ldi	r30, 0x31	; 49
    4a54:	f0 e0       	ldi	r31, 0x00	; 0
    4a56:	80 81       	ld	r24, Z
    4a58:	48 2f       	mov	r20, r24
    4a5a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a5c:	28 2f       	mov	r18, r24
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	8b 81       	ldd	r24, Y+3	; 0x03
    4a62:	88 2f       	mov	r24, r24
    4a64:	90 e0       	ldi	r25, 0x00	; 0
    4a66:	b9 01       	movw	r22, r18
    4a68:	02 c0       	rjmp	.+4      	; 0x4a6e <DIO_enuSetPinDirection+0x1b0>
    4a6a:	66 0f       	add	r22, r22
    4a6c:	77 1f       	adc	r23, r23
    4a6e:	8a 95       	dec	r24
    4a70:	e2 f7       	brpl	.-8      	; 0x4a6a <DIO_enuSetPinDirection+0x1ac>
    4a72:	cb 01       	movw	r24, r22
    4a74:	84 2b       	or	r24, r20
    4a76:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4a78:	81 e0       	ldi	r24, 0x01	; 1
    4a7a:	89 83       	std	Y+1, r24	; 0x01
    4a7c:	02 c0       	rjmp	.+4      	; 0x4a82 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    4a7e:	82 e0       	ldi	r24, 0x02	; 2
    4a80:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a84:	26 96       	adiw	r28, 0x06	; 6
    4a86:	0f b6       	in	r0, 0x3f	; 63
    4a88:	f8 94       	cli
    4a8a:	de bf       	out	0x3e, r29	; 62
    4a8c:	0f be       	out	0x3f, r0	; 63
    4a8e:	cd bf       	out	0x3d, r28	; 61
    4a90:	cf 91       	pop	r28
    4a92:	df 91       	pop	r29
    4a94:	08 95       	ret

00004a96 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 Copy_u8Value)
{
    4a96:	df 93       	push	r29
    4a98:	cf 93       	push	r28
    4a9a:	00 d0       	rcall	.+0      	; 0x4a9c <DIO_enuSetPinValue+0x6>
    4a9c:	00 d0       	rcall	.+0      	; 0x4a9e <DIO_enuSetPinValue+0x8>
    4a9e:	00 d0       	rcall	.+0      	; 0x4aa0 <DIO_enuSetPinValue+0xa>
    4aa0:	cd b7       	in	r28, 0x3d	; 61
    4aa2:	de b7       	in	r29, 0x3e	; 62
    4aa4:	8a 83       	std	Y+2, r24	; 0x02
    4aa6:	6b 83       	std	Y+3, r22	; 0x03
    4aa8:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4aaa:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    4aac:	8a 81       	ldd	r24, Y+2	; 0x02
    4aae:	84 30       	cpi	r24, 0x04	; 4
    4ab0:	08 f0       	brcs	.+2      	; 0x4ab4 <DIO_enuSetPinValue+0x1e>
    4ab2:	d1 c0       	rjmp	.+418    	; 0x4c56 <DIO_enuSetPinValue+0x1c0>
    4ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab6:	88 30       	cpi	r24, 0x08	; 8
    4ab8:	08 f0       	brcs	.+2      	; 0x4abc <DIO_enuSetPinValue+0x26>
    4aba:	cd c0       	rjmp	.+410    	; 0x4c56 <DIO_enuSetPinValue+0x1c0>
    4abc:	8c 81       	ldd	r24, Y+4	; 0x04
    4abe:	82 30       	cpi	r24, 0x02	; 2
    4ac0:	08 f0       	brcs	.+2      	; 0x4ac4 <DIO_enuSetPinValue+0x2e>
    4ac2:	c9 c0       	rjmp	.+402    	; 0x4c56 <DIO_enuSetPinValue+0x1c0>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Value <= DIO_u8OUTPUT)
	{
		switch (Copy_u8GroupID)
    4ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ac6:	28 2f       	mov	r18, r24
    4ac8:	30 e0       	ldi	r19, 0x00	; 0
    4aca:	3e 83       	std	Y+6, r19	; 0x06
    4acc:	2d 83       	std	Y+5, r18	; 0x05
    4ace:	6d 81       	ldd	r22, Y+5	; 0x05
    4ad0:	7e 81       	ldd	r23, Y+6	; 0x06
    4ad2:	61 30       	cpi	r22, 0x01	; 1
    4ad4:	71 05       	cpc	r23, r1
    4ad6:	09 f4       	brne	.+2      	; 0x4ada <DIO_enuSetPinValue+0x44>
    4ad8:	41 c0       	rjmp	.+130    	; 0x4b5c <DIO_enuSetPinValue+0xc6>
    4ada:	8d 81       	ldd	r24, Y+5	; 0x05
    4adc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ade:	82 30       	cpi	r24, 0x02	; 2
    4ae0:	91 05       	cpc	r25, r1
    4ae2:	34 f4       	brge	.+12     	; 0x4af0 <DIO_enuSetPinValue+0x5a>
    4ae4:	2d 81       	ldd	r18, Y+5	; 0x05
    4ae6:	3e 81       	ldd	r19, Y+6	; 0x06
    4ae8:	21 15       	cp	r18, r1
    4aea:	31 05       	cpc	r19, r1
    4aec:	71 f0       	breq	.+28     	; 0x4b0a <DIO_enuSetPinValue+0x74>
    4aee:	b0 c0       	rjmp	.+352    	; 0x4c50 <DIO_enuSetPinValue+0x1ba>
    4af0:	6d 81       	ldd	r22, Y+5	; 0x05
    4af2:	7e 81       	ldd	r23, Y+6	; 0x06
    4af4:	62 30       	cpi	r22, 0x02	; 2
    4af6:	71 05       	cpc	r23, r1
    4af8:	09 f4       	brne	.+2      	; 0x4afc <DIO_enuSetPinValue+0x66>
    4afa:	59 c0       	rjmp	.+178    	; 0x4bae <DIO_enuSetPinValue+0x118>
    4afc:	8d 81       	ldd	r24, Y+5	; 0x05
    4afe:	9e 81       	ldd	r25, Y+6	; 0x06
    4b00:	83 30       	cpi	r24, 0x03	; 3
    4b02:	91 05       	cpc	r25, r1
    4b04:	09 f4       	brne	.+2      	; 0x4b08 <DIO_enuSetPinValue+0x72>
    4b06:	7c c0       	rjmp	.+248    	; 0x4c00 <DIO_enuSetPinValue+0x16a>
    4b08:	a3 c0       	rjmp	.+326    	; 0x4c50 <DIO_enuSetPinValue+0x1ba>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4b0a:	ab e3       	ldi	r26, 0x3B	; 59
    4b0c:	b0 e0       	ldi	r27, 0x00	; 0
    4b0e:	eb e3       	ldi	r30, 0x3B	; 59
    4b10:	f0 e0       	ldi	r31, 0x00	; 0
    4b12:	80 81       	ld	r24, Z
    4b14:	48 2f       	mov	r20, r24
    4b16:	8b 81       	ldd	r24, Y+3	; 0x03
    4b18:	28 2f       	mov	r18, r24
    4b1a:	30 e0       	ldi	r19, 0x00	; 0
    4b1c:	81 e0       	ldi	r24, 0x01	; 1
    4b1e:	90 e0       	ldi	r25, 0x00	; 0
    4b20:	02 c0       	rjmp	.+4      	; 0x4b26 <DIO_enuSetPinValue+0x90>
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	2a 95       	dec	r18
    4b28:	e2 f7       	brpl	.-8      	; 0x4b22 <DIO_enuSetPinValue+0x8c>
    4b2a:	80 95       	com	r24
    4b2c:	84 23       	and	r24, r20
    4b2e:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value<<Copy_u8PinID);
    4b30:	ab e3       	ldi	r26, 0x3B	; 59
    4b32:	b0 e0       	ldi	r27, 0x00	; 0
    4b34:	eb e3       	ldi	r30, 0x3B	; 59
    4b36:	f0 e0       	ldi	r31, 0x00	; 0
    4b38:	80 81       	ld	r24, Z
    4b3a:	48 2f       	mov	r20, r24
    4b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b3e:	28 2f       	mov	r18, r24
    4b40:	30 e0       	ldi	r19, 0x00	; 0
    4b42:	8b 81       	ldd	r24, Y+3	; 0x03
    4b44:	88 2f       	mov	r24, r24
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	b9 01       	movw	r22, r18
    4b4a:	02 c0       	rjmp	.+4      	; 0x4b50 <DIO_enuSetPinValue+0xba>
    4b4c:	66 0f       	add	r22, r22
    4b4e:	77 1f       	adc	r23, r23
    4b50:	8a 95       	dec	r24
    4b52:	e2 f7       	brpl	.-8      	; 0x4b4c <DIO_enuSetPinValue+0xb6>
    4b54:	cb 01       	movw	r24, r22
    4b56:	84 2b       	or	r24, r20
    4b58:	8c 93       	st	X, r24
    4b5a:	7a c0       	rjmp	.+244    	; 0x4c50 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4b5c:	a8 e3       	ldi	r26, 0x38	; 56
    4b5e:	b0 e0       	ldi	r27, 0x00	; 0
    4b60:	e8 e3       	ldi	r30, 0x38	; 56
    4b62:	f0 e0       	ldi	r31, 0x00	; 0
    4b64:	80 81       	ld	r24, Z
    4b66:	48 2f       	mov	r20, r24
    4b68:	8b 81       	ldd	r24, Y+3	; 0x03
    4b6a:	28 2f       	mov	r18, r24
    4b6c:	30 e0       	ldi	r19, 0x00	; 0
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	90 e0       	ldi	r25, 0x00	; 0
    4b72:	02 c0       	rjmp	.+4      	; 0x4b78 <DIO_enuSetPinValue+0xe2>
    4b74:	88 0f       	add	r24, r24
    4b76:	99 1f       	adc	r25, r25
    4b78:	2a 95       	dec	r18
    4b7a:	e2 f7       	brpl	.-8      	; 0x4b74 <DIO_enuSetPinValue+0xde>
    4b7c:	80 95       	com	r24
    4b7e:	84 23       	and	r24, r20
    4b80:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value<<Copy_u8PinID);
    4b82:	a8 e3       	ldi	r26, 0x38	; 56
    4b84:	b0 e0       	ldi	r27, 0x00	; 0
    4b86:	e8 e3       	ldi	r30, 0x38	; 56
    4b88:	f0 e0       	ldi	r31, 0x00	; 0
    4b8a:	80 81       	ld	r24, Z
    4b8c:	48 2f       	mov	r20, r24
    4b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b90:	28 2f       	mov	r18, r24
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	8b 81       	ldd	r24, Y+3	; 0x03
    4b96:	88 2f       	mov	r24, r24
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	b9 01       	movw	r22, r18
    4b9c:	02 c0       	rjmp	.+4      	; 0x4ba2 <DIO_enuSetPinValue+0x10c>
    4b9e:	66 0f       	add	r22, r22
    4ba0:	77 1f       	adc	r23, r23
    4ba2:	8a 95       	dec	r24
    4ba4:	e2 f7       	brpl	.-8      	; 0x4b9e <DIO_enuSetPinValue+0x108>
    4ba6:	cb 01       	movw	r24, r22
    4ba8:	84 2b       	or	r24, r20
    4baa:	8c 93       	st	X, r24
    4bac:	51 c0       	rjmp	.+162    	; 0x4c50 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4bae:	a5 e3       	ldi	r26, 0x35	; 53
    4bb0:	b0 e0       	ldi	r27, 0x00	; 0
    4bb2:	e5 e3       	ldi	r30, 0x35	; 53
    4bb4:	f0 e0       	ldi	r31, 0x00	; 0
    4bb6:	80 81       	ld	r24, Z
    4bb8:	48 2f       	mov	r20, r24
    4bba:	8b 81       	ldd	r24, Y+3	; 0x03
    4bbc:	28 2f       	mov	r18, r24
    4bbe:	30 e0       	ldi	r19, 0x00	; 0
    4bc0:	81 e0       	ldi	r24, 0x01	; 1
    4bc2:	90 e0       	ldi	r25, 0x00	; 0
    4bc4:	02 c0       	rjmp	.+4      	; 0x4bca <DIO_enuSetPinValue+0x134>
    4bc6:	88 0f       	add	r24, r24
    4bc8:	99 1f       	adc	r25, r25
    4bca:	2a 95       	dec	r18
    4bcc:	e2 f7       	brpl	.-8      	; 0x4bc6 <DIO_enuSetPinValue+0x130>
    4bce:	80 95       	com	r24
    4bd0:	84 23       	and	r24, r20
    4bd2:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value<<Copy_u8PinID);
    4bd4:	a5 e3       	ldi	r26, 0x35	; 53
    4bd6:	b0 e0       	ldi	r27, 0x00	; 0
    4bd8:	e5 e3       	ldi	r30, 0x35	; 53
    4bda:	f0 e0       	ldi	r31, 0x00	; 0
    4bdc:	80 81       	ld	r24, Z
    4bde:	48 2f       	mov	r20, r24
    4be0:	8c 81       	ldd	r24, Y+4	; 0x04
    4be2:	28 2f       	mov	r18, r24
    4be4:	30 e0       	ldi	r19, 0x00	; 0
    4be6:	8b 81       	ldd	r24, Y+3	; 0x03
    4be8:	88 2f       	mov	r24, r24
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	b9 01       	movw	r22, r18
    4bee:	02 c0       	rjmp	.+4      	; 0x4bf4 <DIO_enuSetPinValue+0x15e>
    4bf0:	66 0f       	add	r22, r22
    4bf2:	77 1f       	adc	r23, r23
    4bf4:	8a 95       	dec	r24
    4bf6:	e2 f7       	brpl	.-8      	; 0x4bf0 <DIO_enuSetPinValue+0x15a>
    4bf8:	cb 01       	movw	r24, r22
    4bfa:	84 2b       	or	r24, r20
    4bfc:	8c 93       	st	X, r24
    4bfe:	28 c0       	rjmp	.+80     	; 0x4c50 <DIO_enuSetPinValue+0x1ba>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK<<Copy_u8PinID);
    4c00:	a2 e3       	ldi	r26, 0x32	; 50
    4c02:	b0 e0       	ldi	r27, 0x00	; 0
    4c04:	e2 e3       	ldi	r30, 0x32	; 50
    4c06:	f0 e0       	ldi	r31, 0x00	; 0
    4c08:	80 81       	ld	r24, Z
    4c0a:	48 2f       	mov	r20, r24
    4c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4c0e:	28 2f       	mov	r18, r24
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	81 e0       	ldi	r24, 0x01	; 1
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	02 c0       	rjmp	.+4      	; 0x4c1c <DIO_enuSetPinValue+0x186>
    4c18:	88 0f       	add	r24, r24
    4c1a:	99 1f       	adc	r25, r25
    4c1c:	2a 95       	dec	r18
    4c1e:	e2 f7       	brpl	.-8      	; 0x4c18 <DIO_enuSetPinValue+0x182>
    4c20:	80 95       	com	r24
    4c22:	84 23       	and	r24, r20
    4c24:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value<<Copy_u8PinID);
    4c26:	a2 e3       	ldi	r26, 0x32	; 50
    4c28:	b0 e0       	ldi	r27, 0x00	; 0
    4c2a:	e2 e3       	ldi	r30, 0x32	; 50
    4c2c:	f0 e0       	ldi	r31, 0x00	; 0
    4c2e:	80 81       	ld	r24, Z
    4c30:	48 2f       	mov	r20, r24
    4c32:	8c 81       	ldd	r24, Y+4	; 0x04
    4c34:	28 2f       	mov	r18, r24
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	8b 81       	ldd	r24, Y+3	; 0x03
    4c3a:	88 2f       	mov	r24, r24
    4c3c:	90 e0       	ldi	r25, 0x00	; 0
    4c3e:	b9 01       	movw	r22, r18
    4c40:	02 c0       	rjmp	.+4      	; 0x4c46 <DIO_enuSetPinValue+0x1b0>
    4c42:	66 0f       	add	r22, r22
    4c44:	77 1f       	adc	r23, r23
    4c46:	8a 95       	dec	r24
    4c48:	e2 f7       	brpl	.-8      	; 0x4c42 <DIO_enuSetPinValue+0x1ac>
    4c4a:	cb 01       	movw	r24, r22
    4c4c:	84 2b       	or	r24, r20
    4c4e:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    4c50:	81 e0       	ldi	r24, 0x01	; 1
    4c52:	89 83       	std	Y+1, r24	; 0x01
    4c54:	02 c0       	rjmp	.+4      	; 0x4c5a <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    4c56:	82 e0       	ldi	r24, 0x02	; 2
    4c58:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4c5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    4c5c:	26 96       	adiw	r28, 0x06	; 6
    4c5e:	0f b6       	in	r0, 0x3f	; 63
    4c60:	f8 94       	cli
    4c62:	de bf       	out	0x3e, r29	; 62
    4c64:	0f be       	out	0x3f, r0	; 63
    4c66:	cd bf       	out	0x3d, r28	; 61
    4c68:	cf 91       	pop	r28
    4c6a:	df 91       	pop	r29
    4c6c:	08 95       	ret

00004c6e <DIO_enuTogglePinValue>:

ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
    4c6e:	df 93       	push	r29
    4c70:	cf 93       	push	r28
    4c72:	00 d0       	rcall	.+0      	; 0x4c74 <DIO_enuTogglePinValue+0x6>
    4c74:	00 d0       	rcall	.+0      	; 0x4c76 <DIO_enuTogglePinValue+0x8>
    4c76:	0f 92       	push	r0
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	8a 83       	std	Y+2, r24	; 0x02
    4c7e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    4c80:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    4c82:	8a 81       	ldd	r24, Y+2	; 0x02
    4c84:	84 30       	cpi	r24, 0x04	; 4
    4c86:	08 f0       	brcs	.+2      	; 0x4c8a <DIO_enuTogglePinValue+0x1c>
    4c88:	75 c0       	rjmp	.+234    	; 0x4d74 <DIO_enuTogglePinValue+0x106>
    4c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c8c:	88 30       	cpi	r24, 0x08	; 8
    4c8e:	08 f0       	brcs	.+2      	; 0x4c92 <DIO_enuTogglePinValue+0x24>
    4c90:	71 c0       	rjmp	.+226    	; 0x4d74 <DIO_enuTogglePinValue+0x106>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    4c92:	8a 81       	ldd	r24, Y+2	; 0x02
    4c94:	28 2f       	mov	r18, r24
    4c96:	30 e0       	ldi	r19, 0x00	; 0
    4c98:	3d 83       	std	Y+5, r19	; 0x05
    4c9a:	2c 83       	std	Y+4, r18	; 0x04
    4c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    4ca0:	81 30       	cpi	r24, 0x01	; 1
    4ca2:	91 05       	cpc	r25, r1
    4ca4:	49 f1       	breq	.+82     	; 0x4cf8 <DIO_enuTogglePinValue+0x8a>
    4ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    4ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    4caa:	22 30       	cpi	r18, 0x02	; 2
    4cac:	31 05       	cpc	r19, r1
    4cae:	2c f4       	brge	.+10     	; 0x4cba <DIO_enuTogglePinValue+0x4c>
    4cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    4cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    4cb4:	00 97       	sbiw	r24, 0x00	; 0
    4cb6:	61 f0       	breq	.+24     	; 0x4cd0 <DIO_enuTogglePinValue+0x62>
    4cb8:	5a c0       	rjmp	.+180    	; 0x4d6e <DIO_enuTogglePinValue+0x100>
    4cba:	2c 81       	ldd	r18, Y+4	; 0x04
    4cbc:	3d 81       	ldd	r19, Y+5	; 0x05
    4cbe:	22 30       	cpi	r18, 0x02	; 2
    4cc0:	31 05       	cpc	r19, r1
    4cc2:	71 f1       	breq	.+92     	; 0x4d20 <DIO_enuTogglePinValue+0xb2>
    4cc4:	8c 81       	ldd	r24, Y+4	; 0x04
    4cc6:	9d 81       	ldd	r25, Y+5	; 0x05
    4cc8:	83 30       	cpi	r24, 0x03	; 3
    4cca:	91 05       	cpc	r25, r1
    4ccc:	e9 f1       	breq	.+122    	; 0x4d48 <DIO_enuTogglePinValue+0xda>
    4cce:	4f c0       	rjmp	.+158    	; 0x4d6e <DIO_enuTogglePinValue+0x100>
			{
			case DIO_u8GROUP_A:
				PORTA ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    4cd0:	ab e3       	ldi	r26, 0x3B	; 59
    4cd2:	b0 e0       	ldi	r27, 0x00	; 0
    4cd4:	eb e3       	ldi	r30, 0x3B	; 59
    4cd6:	f0 e0       	ldi	r31, 0x00	; 0
    4cd8:	80 81       	ld	r24, Z
    4cda:	48 2f       	mov	r20, r24
    4cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    4cde:	28 2f       	mov	r18, r24
    4ce0:	30 e0       	ldi	r19, 0x00	; 0
    4ce2:	81 e0       	ldi	r24, 0x01	; 1
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	02 2e       	mov	r0, r18
    4ce8:	02 c0       	rjmp	.+4      	; 0x4cee <DIO_enuTogglePinValue+0x80>
    4cea:	88 0f       	add	r24, r24
    4cec:	99 1f       	adc	r25, r25
    4cee:	0a 94       	dec	r0
    4cf0:	e2 f7       	brpl	.-8      	; 0x4cea <DIO_enuTogglePinValue+0x7c>
    4cf2:	84 27       	eor	r24, r20
    4cf4:	8c 93       	st	X, r24
    4cf6:	3b c0       	rjmp	.+118    	; 0x4d6e <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_B:
				PORTB ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    4cf8:	a8 e3       	ldi	r26, 0x38	; 56
    4cfa:	b0 e0       	ldi	r27, 0x00	; 0
    4cfc:	e8 e3       	ldi	r30, 0x38	; 56
    4cfe:	f0 e0       	ldi	r31, 0x00	; 0
    4d00:	80 81       	ld	r24, Z
    4d02:	48 2f       	mov	r20, r24
    4d04:	8b 81       	ldd	r24, Y+3	; 0x03
    4d06:	28 2f       	mov	r18, r24
    4d08:	30 e0       	ldi	r19, 0x00	; 0
    4d0a:	81 e0       	ldi	r24, 0x01	; 1
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	02 2e       	mov	r0, r18
    4d10:	02 c0       	rjmp	.+4      	; 0x4d16 <DIO_enuTogglePinValue+0xa8>
    4d12:	88 0f       	add	r24, r24
    4d14:	99 1f       	adc	r25, r25
    4d16:	0a 94       	dec	r0
    4d18:	e2 f7       	brpl	.-8      	; 0x4d12 <DIO_enuTogglePinValue+0xa4>
    4d1a:	84 27       	eor	r24, r20
    4d1c:	8c 93       	st	X, r24
    4d1e:	27 c0       	rjmp	.+78     	; 0x4d6e <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_C:
				PORTC ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    4d20:	a5 e3       	ldi	r26, 0x35	; 53
    4d22:	b0 e0       	ldi	r27, 0x00	; 0
    4d24:	e5 e3       	ldi	r30, 0x35	; 53
    4d26:	f0 e0       	ldi	r31, 0x00	; 0
    4d28:	80 81       	ld	r24, Z
    4d2a:	48 2f       	mov	r20, r24
    4d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d2e:	28 2f       	mov	r18, r24
    4d30:	30 e0       	ldi	r19, 0x00	; 0
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	02 2e       	mov	r0, r18
    4d38:	02 c0       	rjmp	.+4      	; 0x4d3e <DIO_enuTogglePinValue+0xd0>
    4d3a:	88 0f       	add	r24, r24
    4d3c:	99 1f       	adc	r25, r25
    4d3e:	0a 94       	dec	r0
    4d40:	e2 f7       	brpl	.-8      	; 0x4d3a <DIO_enuTogglePinValue+0xcc>
    4d42:	84 27       	eor	r24, r20
    4d44:	8c 93       	st	X, r24
    4d46:	13 c0       	rjmp	.+38     	; 0x4d6e <DIO_enuTogglePinValue+0x100>
				break;
			case DIO_u8GROUP_D:
				PORTD ^=  (DIO_BIT_MASK<<Copy_u8PinID);
    4d48:	a2 e3       	ldi	r26, 0x32	; 50
    4d4a:	b0 e0       	ldi	r27, 0x00	; 0
    4d4c:	e2 e3       	ldi	r30, 0x32	; 50
    4d4e:	f0 e0       	ldi	r31, 0x00	; 0
    4d50:	80 81       	ld	r24, Z
    4d52:	48 2f       	mov	r20, r24
    4d54:	8b 81       	ldd	r24, Y+3	; 0x03
    4d56:	28 2f       	mov	r18, r24
    4d58:	30 e0       	ldi	r19, 0x00	; 0
    4d5a:	81 e0       	ldi	r24, 0x01	; 1
    4d5c:	90 e0       	ldi	r25, 0x00	; 0
    4d5e:	02 2e       	mov	r0, r18
    4d60:	02 c0       	rjmp	.+4      	; 0x4d66 <DIO_enuTogglePinValue+0xf8>
    4d62:	88 0f       	add	r24, r24
    4d64:	99 1f       	adc	r25, r25
    4d66:	0a 94       	dec	r0
    4d68:	e2 f7       	brpl	.-8      	; 0x4d62 <DIO_enuTogglePinValue+0xf4>
    4d6a:	84 27       	eor	r24, r20
    4d6c:	8c 93       	st	X, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
    4d70:	89 83       	std	Y+1, r24	; 0x01
    4d72:	02 c0       	rjmp	.+4      	; 0x4d78 <DIO_enuTogglePinValue+0x10a>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    4d74:	82 e0       	ldi	r24, 0x02	; 2
    4d76:	89 83       	std	Y+1, r24	; 0x01
		}

	return Local_enuErrorState;
    4d78:	89 81       	ldd	r24, Y+1	; 0x01
}
    4d7a:	0f 90       	pop	r0
    4d7c:	0f 90       	pop	r0
    4d7e:	0f 90       	pop	r0
    4d80:	0f 90       	pop	r0
    4d82:	0f 90       	pop	r0
    4d84:	cf 91       	pop	r28
    4d86:	df 91       	pop	r29
    4d88:	08 95       	ret

00004d8a <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID, u8 *Copy_pu8Value)
{
    4d8a:	df 93       	push	r29
    4d8c:	cf 93       	push	r28
    4d8e:	cd b7       	in	r28, 0x3d	; 61
    4d90:	de b7       	in	r29, 0x3e	; 62
    4d92:	27 97       	sbiw	r28, 0x07	; 7
    4d94:	0f b6       	in	r0, 0x3f	; 63
    4d96:	f8 94       	cli
    4d98:	de bf       	out	0x3e, r29	; 62
    4d9a:	0f be       	out	0x3f, r0	; 63
    4d9c:	cd bf       	out	0x3d, r28	; 61
    4d9e:	8a 83       	std	Y+2, r24	; 0x02
    4da0:	6b 83       	std	Y+3, r22	; 0x03
    4da2:	5d 83       	std	Y+5, r21	; 0x05
    4da4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    4da6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    4da8:	8c 81       	ldd	r24, Y+4	; 0x04
    4daa:	9d 81       	ldd	r25, Y+5	; 0x05
    4dac:	00 97       	sbiw	r24, 0x00	; 0
    4dae:	09 f4       	brne	.+2      	; 0x4db2 <DIO_enuGetPinValue+0x28>
    4db0:	7e c0       	rjmp	.+252    	; 0x4eae <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8GroupID <= DIO_u8GROUP_D &&
    4db2:	8a 81       	ldd	r24, Y+2	; 0x02
    4db4:	84 30       	cpi	r24, 0x04	; 4
    4db6:	08 f0       	brcs	.+2      	; 0x4dba <DIO_enuGetPinValue+0x30>
    4db8:	77 c0       	rjmp	.+238    	; 0x4ea8 <DIO_enuGetPinValue+0x11e>
    4dba:	8b 81       	ldd	r24, Y+3	; 0x03
    4dbc:	88 30       	cpi	r24, 0x08	; 8
    4dbe:	08 f0       	brcs	.+2      	; 0x4dc2 <DIO_enuGetPinValue+0x38>
    4dc0:	73 c0       	rjmp	.+230    	; 0x4ea8 <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
    4dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    4dc4:	28 2f       	mov	r18, r24
    4dc6:	30 e0       	ldi	r19, 0x00	; 0
    4dc8:	3f 83       	std	Y+7, r19	; 0x07
    4dca:	2e 83       	std	Y+6, r18	; 0x06
    4dcc:	4e 81       	ldd	r20, Y+6	; 0x06
    4dce:	5f 81       	ldd	r21, Y+7	; 0x07
    4dd0:	41 30       	cpi	r20, 0x01	; 1
    4dd2:	51 05       	cpc	r21, r1
    4dd4:	59 f1       	breq	.+86     	; 0x4e2c <DIO_enuGetPinValue+0xa2>
    4dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    4dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    4dda:	82 30       	cpi	r24, 0x02	; 2
    4ddc:	91 05       	cpc	r25, r1
    4dde:	34 f4       	brge	.+12     	; 0x4dec <DIO_enuGetPinValue+0x62>
    4de0:	2e 81       	ldd	r18, Y+6	; 0x06
    4de2:	3f 81       	ldd	r19, Y+7	; 0x07
    4de4:	21 15       	cp	r18, r1
    4de6:	31 05       	cpc	r19, r1
    4de8:	69 f0       	breq	.+26     	; 0x4e04 <DIO_enuGetPinValue+0x7a>
    4dea:	5b c0       	rjmp	.+182    	; 0x4ea2 <DIO_enuGetPinValue+0x118>
    4dec:	4e 81       	ldd	r20, Y+6	; 0x06
    4dee:	5f 81       	ldd	r21, Y+7	; 0x07
    4df0:	42 30       	cpi	r20, 0x02	; 2
    4df2:	51 05       	cpc	r21, r1
    4df4:	79 f1       	breq	.+94     	; 0x4e54 <DIO_enuGetPinValue+0xca>
    4df6:	8e 81       	ldd	r24, Y+6	; 0x06
    4df8:	9f 81       	ldd	r25, Y+7	; 0x07
    4dfa:	83 30       	cpi	r24, 0x03	; 3
    4dfc:	91 05       	cpc	r25, r1
    4dfe:	09 f4       	brne	.+2      	; 0x4e02 <DIO_enuGetPinValue+0x78>
    4e00:	3d c0       	rjmp	.+122    	; 0x4e7c <DIO_enuGetPinValue+0xf2>
    4e02:	4f c0       	rjmp	.+158    	; 0x4ea2 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( (PINA>>Copy_u8PinID) & DIO_BIT_MASK);
    4e04:	e9 e3       	ldi	r30, 0x39	; 57
    4e06:	f0 e0       	ldi	r31, 0x00	; 0
    4e08:	80 81       	ld	r24, Z
    4e0a:	28 2f       	mov	r18, r24
    4e0c:	30 e0       	ldi	r19, 0x00	; 0
    4e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e10:	88 2f       	mov	r24, r24
    4e12:	90 e0       	ldi	r25, 0x00	; 0
    4e14:	a9 01       	movw	r20, r18
    4e16:	02 c0       	rjmp	.+4      	; 0x4e1c <DIO_enuGetPinValue+0x92>
    4e18:	55 95       	asr	r21
    4e1a:	47 95       	ror	r20
    4e1c:	8a 95       	dec	r24
    4e1e:	e2 f7       	brpl	.-8      	; 0x4e18 <DIO_enuGetPinValue+0x8e>
    4e20:	ca 01       	movw	r24, r20
    4e22:	81 70       	andi	r24, 0x01	; 1
    4e24:	ec 81       	ldd	r30, Y+4	; 0x04
    4e26:	fd 81       	ldd	r31, Y+5	; 0x05
    4e28:	80 83       	st	Z, r24
    4e2a:	3b c0       	rjmp	.+118    	; 0x4ea2 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( (PINB>>Copy_u8PinID) & DIO_BIT_MASK);
    4e2c:	e6 e3       	ldi	r30, 0x36	; 54
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	80 81       	ld	r24, Z
    4e32:	28 2f       	mov	r18, r24
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	8b 81       	ldd	r24, Y+3	; 0x03
    4e38:	88 2f       	mov	r24, r24
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	a9 01       	movw	r20, r18
    4e3e:	02 c0       	rjmp	.+4      	; 0x4e44 <DIO_enuGetPinValue+0xba>
    4e40:	55 95       	asr	r21
    4e42:	47 95       	ror	r20
    4e44:	8a 95       	dec	r24
    4e46:	e2 f7       	brpl	.-8      	; 0x4e40 <DIO_enuGetPinValue+0xb6>
    4e48:	ca 01       	movw	r24, r20
    4e4a:	81 70       	andi	r24, 0x01	; 1
    4e4c:	ec 81       	ldd	r30, Y+4	; 0x04
    4e4e:	fd 81       	ldd	r31, Y+5	; 0x05
    4e50:	80 83       	st	Z, r24
    4e52:	27 c0       	rjmp	.+78     	; 0x4ea2 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( (PINC>>Copy_u8PinID) & DIO_BIT_MASK);
    4e54:	e3 e3       	ldi	r30, 0x33	; 51
    4e56:	f0 e0       	ldi	r31, 0x00	; 0
    4e58:	80 81       	ld	r24, Z
    4e5a:	28 2f       	mov	r18, r24
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e60:	88 2f       	mov	r24, r24
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	a9 01       	movw	r20, r18
    4e66:	02 c0       	rjmp	.+4      	; 0x4e6c <DIO_enuGetPinValue+0xe2>
    4e68:	55 95       	asr	r21
    4e6a:	47 95       	ror	r20
    4e6c:	8a 95       	dec	r24
    4e6e:	e2 f7       	brpl	.-8      	; 0x4e68 <DIO_enuGetPinValue+0xde>
    4e70:	ca 01       	movw	r24, r20
    4e72:	81 70       	andi	r24, 0x01	; 1
    4e74:	ec 81       	ldd	r30, Y+4	; 0x04
    4e76:	fd 81       	ldd	r31, Y+5	; 0x05
    4e78:	80 83       	st	Z, r24
    4e7a:	13 c0       	rjmp	.+38     	; 0x4ea2 <DIO_enuGetPinValue+0x118>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( (PIND>>Copy_u8PinID) & DIO_BIT_MASK);
    4e7c:	e0 e3       	ldi	r30, 0x30	; 48
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	80 81       	ld	r24, Z
    4e82:	28 2f       	mov	r18, r24
    4e84:	30 e0       	ldi	r19, 0x00	; 0
    4e86:	8b 81       	ldd	r24, Y+3	; 0x03
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	a9 01       	movw	r20, r18
    4e8e:	02 c0       	rjmp	.+4      	; 0x4e94 <DIO_enuGetPinValue+0x10a>
    4e90:	55 95       	asr	r21
    4e92:	47 95       	ror	r20
    4e94:	8a 95       	dec	r24
    4e96:	e2 f7       	brpl	.-8      	; 0x4e90 <DIO_enuGetPinValue+0x106>
    4e98:	ca 01       	movw	r24, r20
    4e9a:	81 70       	andi	r24, 0x01	; 1
    4e9c:	ec 81       	ldd	r30, Y+4	; 0x04
    4e9e:	fd 81       	ldd	r31, Y+5	; 0x05
    4ea0:	80 83       	st	Z, r24
				break;
			}

			Local_enuErrorState = ES_OK;
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	89 83       	std	Y+1, r24	; 0x01
    4ea6:	05 c0       	rjmp	.+10     	; 0x4eb2 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    4ea8:	82 e0       	ldi	r24, 0x02	; 2
    4eaa:	89 83       	std	Y+1, r24	; 0x01
    4eac:	02 c0       	rjmp	.+4      	; 0x4eb2 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    4eae:	83 e0       	ldi	r24, 0x03	; 3
    4eb0:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    4eb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    4eb4:	27 96       	adiw	r28, 0x07	; 7
    4eb6:	0f b6       	in	r0, 0x3f	; 63
    4eb8:	f8 94       	cli
    4eba:	de bf       	out	0x3e, r29	; 62
    4ebc:	0f be       	out	0x3f, r0	; 63
    4ebe:	cd bf       	out	0x3d, r28	; 61
    4ec0:	cf 91       	pop	r28
    4ec2:	df 91       	pop	r29
    4ec4:	08 95       	ret

00004ec6 <ADC_enuInit>:
static volatile void (* ADC_pfunISRFun)(void) =NULL;
//static void * ADC_pvidISRParameter= NULL;


ES_t ADC_enuInit(void)
{
    4ec6:	df 93       	push	r29
    4ec8:	cf 93       	push	r28
    4eca:	0f 92       	push	r0
    4ecc:	cd b7       	in	r28, 0x3d	; 61
    4ece:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    4ed0:	19 82       	std	Y+1, r1	; 0x01

#if ADC_PRES == PRES_64
	ADCSRA &= ~(7<<0);
    4ed2:	a6 e2       	ldi	r26, 0x26	; 38
    4ed4:	b0 e0       	ldi	r27, 0x00	; 0
    4ed6:	e6 e2       	ldi	r30, 0x26	; 38
    4ed8:	f0 e0       	ldi	r31, 0x00	; 0
    4eda:	80 81       	ld	r24, Z
    4edc:	88 7f       	andi	r24, 0xF8	; 248
    4ede:	8c 93       	st	X, r24
	ADCSRA |=  (6<<0);
    4ee0:	a6 e2       	ldi	r26, 0x26	; 38
    4ee2:	b0 e0       	ldi	r27, 0x00	; 0
    4ee4:	e6 e2       	ldi	r30, 0x26	; 38
    4ee6:	f0 e0       	ldi	r31, 0x00	; 0
    4ee8:	80 81       	ld	r24, Z
    4eea:	86 60       	ori	r24, 0x06	; 6
    4eec:	8c 93       	st	X, r24
#error "ADC prescaler is wrong"
#endif

#if INIT_CHNL >=0 && INIT_CHNL <=31

	ADMUX &= 0xE0;
    4eee:	a7 e2       	ldi	r26, 0x27	; 39
    4ef0:	b0 e0       	ldi	r27, 0x00	; 0
    4ef2:	e7 e2       	ldi	r30, 0x27	; 39
    4ef4:	f0 e0       	ldi	r31, 0x00	; 0
    4ef6:	80 81       	ld	r24, Z
    4ef8:	80 7e       	andi	r24, 0xE0	; 224
    4efa:	8c 93       	st	X, r24
	ADMUX |= (INIT_CHNL <<0);
    4efc:	a7 e2       	ldi	r26, 0x27	; 39
    4efe:	b0 e0       	ldi	r27, 0x00	; 0
    4f00:	e7 e2       	ldi	r30, 0x27	; 39
    4f02:	f0 e0       	ldi	r31, 0x00	; 0
    4f04:	80 81       	ld	r24, Z
    4f06:	87 60       	ori	r24, 0x07	; 7
    4f08:	8c 93       	st	X, r24
#else
#error "ADC Channel is Wrong"
#endif

#if INIT_MODE == NORMAL
	ADCSRA &= ~(1<<5);
    4f0a:	a6 e2       	ldi	r26, 0x26	; 38
    4f0c:	b0 e0       	ldi	r27, 0x00	; 0
    4f0e:	e6 e2       	ldi	r30, 0x26	; 38
    4f10:	f0 e0       	ldi	r31, 0x00	; 0
    4f12:	80 81       	ld	r24, Z
    4f14:	8f 7d       	andi	r24, 0xDF	; 223
    4f16:	8c 93       	st	X, r24
#endif

#if INIT_INT_MODE == POLLING
		ADCSRA &= ~(1<<3);
#elif INIT_INT_MODE == ENABLED
		ADCSRA |= (1<<3);
    4f18:	a6 e2       	ldi	r26, 0x26	; 38
    4f1a:	b0 e0       	ldi	r27, 0x00	; 0
    4f1c:	e6 e2       	ldi	r30, 0x26	; 38
    4f1e:	f0 e0       	ldi	r31, 0x00	; 0
    4f20:	80 81       	ld	r24, Z
    4f22:	88 60       	ori	r24, 0x08	; 8
    4f24:	8c 93       	st	X, r24
#else
#error "ADC interrupt mode is wrong"
#endif

#if ADC_VREF == AVCC_REF
	ADMUX &= 0x3F;
    4f26:	a7 e2       	ldi	r26, 0x27	; 39
    4f28:	b0 e0       	ldi	r27, 0x00	; 0
    4f2a:	e7 e2       	ldi	r30, 0x27	; 39
    4f2c:	f0 e0       	ldi	r31, 0x00	; 0
    4f2e:	80 81       	ld	r24, Z
    4f30:	8f 73       	andi	r24, 0x3F	; 63
    4f32:	8c 93       	st	X, r24
	ADMUX |= (1<<6);
    4f34:	a7 e2       	ldi	r26, 0x27	; 39
    4f36:	b0 e0       	ldi	r27, 0x00	; 0
    4f38:	e7 e2       	ldi	r30, 0x27	; 39
    4f3a:	f0 e0       	ldi	r31, 0x00	; 0
    4f3c:	80 81       	ld	r24, Z
    4f3e:	80 64       	ori	r24, 0x40	; 64
    4f40:	8c 93       	st	X, r24
#error "ADC voltage ref is wrong"
#endif


#if ADC_ADJ == LEFT_ADJ
	ADMUX |= (1<<5);
    4f42:	a7 e2       	ldi	r26, 0x27	; 39
    4f44:	b0 e0       	ldi	r27, 0x00	; 0
    4f46:	e7 e2       	ldi	r30, 0x27	; 39
    4f48:	f0 e0       	ldi	r31, 0x00	; 0
    4f4a:	80 81       	ld	r24, Z
    4f4c:	80 62       	ori	r24, 0x20	; 32
    4f4e:	8c 93       	st	X, r24
	ADMUX &= ~(1<<5);
#else
#error"ADC Adjustment is wrong"
#endif

	return Local_enuErrorState;
    4f50:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f52:	0f 90       	pop	r0
    4f54:	cf 91       	pop	r28
    4f56:	df 91       	pop	r29
    4f58:	08 95       	ret

00004f5a <ADC_enuStartConversion>:




ES_t ADC_enuStartConversion(void)
{
    4f5a:	df 93       	push	r29
    4f5c:	cf 93       	push	r28
    4f5e:	cd b7       	in	r28, 0x3d	; 61
    4f60:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |=(1<<6);
    4f62:	a6 e2       	ldi	r26, 0x26	; 38
    4f64:	b0 e0       	ldi	r27, 0x00	; 0
    4f66:	e6 e2       	ldi	r30, 0x26	; 38
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	80 81       	ld	r24, Z
    4f6c:	80 64       	ori	r24, 0x40	; 64
    4f6e:	8c 93       	st	X, r24
	return ES_OK;
    4f70:	81 e0       	ldi	r24, 0x01	; 1
}
    4f72:	cf 91       	pop	r28
    4f74:	df 91       	pop	r29
    4f76:	08 95       	ret

00004f78 <ADC_enuReadHighRegister>:

ES_t ADC_enuReadHighRegister(u8 * Copy_pu8ReadValue)
{
    4f78:	df 93       	push	r29
    4f7a:	cf 93       	push	r28
    4f7c:	00 d0       	rcall	.+0      	; 0x4f7e <ADC_enuReadHighRegister+0x6>
    4f7e:	0f 92       	push	r0
    4f80:	cd b7       	in	r28, 0x3d	; 61
    4f82:	de b7       	in	r29, 0x3e	; 62
    4f84:	9b 83       	std	Y+3, r25	; 0x03
    4f86:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4f88:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ == LEFT_ADJ
	*Copy_pu8ReadValue = ADCH;
    4f8a:	e5 e2       	ldi	r30, 0x25	; 37
    4f8c:	f0 e0       	ldi	r31, 0x00	; 0
    4f8e:	80 81       	ld	r24, Z
    4f90:	ea 81       	ldd	r30, Y+2	; 0x02
    4f92:	fb 81       	ldd	r31, Y+3	; 0x03
    4f94:	80 83       	st	Z, r24
#else
#error"ADC ADJ selection is wrong"
#endif


	return Local_enuErrorState;
    4f96:	89 81       	ldd	r24, Y+1	; 0x01
}
    4f98:	0f 90       	pop	r0
    4f9a:	0f 90       	pop	r0
    4f9c:	0f 90       	pop	r0
    4f9e:	cf 91       	pop	r28
    4fa0:	df 91       	pop	r29
    4fa2:	08 95       	ret

00004fa4 <ADC_enuRead>:

ES_t ADC_enuRead(u16 * Copy_pu16ReadValue)
{
    4fa4:	df 93       	push	r29
    4fa6:	cf 93       	push	r28
    4fa8:	00 d0       	rcall	.+0      	; 0x4faa <ADC_enuRead+0x6>
    4faa:	0f 92       	push	r0
    4fac:	cd b7       	in	r28, 0x3d	; 61
    4fae:	de b7       	in	r29, 0x3e	; 62
    4fb0:	9b 83       	std	Y+3, r25	; 0x03
    4fb2:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    4fb4:	19 82       	std	Y+1, r1	; 0x01

#if ADC_ADJ == LEFT_ADJ
	*Copy_pu16ReadValue  = (ADCL>>6);
    4fb6:	e4 e2       	ldi	r30, 0x24	; 36
    4fb8:	f0 e0       	ldi	r31, 0x00	; 0
    4fba:	80 81       	ld	r24, Z
    4fbc:	82 95       	swap	r24
    4fbe:	86 95       	lsr	r24
    4fc0:	86 95       	lsr	r24
    4fc2:	83 70       	andi	r24, 0x03	; 3
    4fc4:	88 2f       	mov	r24, r24
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	ea 81       	ldd	r30, Y+2	; 0x02
    4fca:	fb 81       	ldd	r31, Y+3	; 0x03
    4fcc:	91 83       	std	Z+1, r25	; 0x01
    4fce:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH<<2);
    4fd0:	ea 81       	ldd	r30, Y+2	; 0x02
    4fd2:	fb 81       	ldd	r31, Y+3	; 0x03
    4fd4:	20 81       	ld	r18, Z
    4fd6:	31 81       	ldd	r19, Z+1	; 0x01
    4fd8:	e5 e2       	ldi	r30, 0x25	; 37
    4fda:	f0 e0       	ldi	r31, 0x00	; 0
    4fdc:	80 81       	ld	r24, Z
    4fde:	88 2f       	mov	r24, r24
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	88 0f       	add	r24, r24
    4fe4:	99 1f       	adc	r25, r25
    4fe6:	88 0f       	add	r24, r24
    4fe8:	99 1f       	adc	r25, r25
    4fea:	82 2b       	or	r24, r18
    4fec:	93 2b       	or	r25, r19
    4fee:	ea 81       	ldd	r30, Y+2	; 0x02
    4ff0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ff2:	91 83       	std	Z+1, r25	; 0x01
    4ff4:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= ((u16)ADCH<<8);
#else
#error"ADC ADJ selection is wrong"
#endif

	return Local_enuErrorState;
    4ff6:	89 81       	ldd	r24, Y+1	; 0x01
}
    4ff8:	0f 90       	pop	r0
    4ffa:	0f 90       	pop	r0
    4ffc:	0f 90       	pop	r0
    4ffe:	cf 91       	pop	r28
    5000:	df 91       	pop	r29
    5002:	08 95       	ret

00005004 <ADC_enuCallBack>:

ES_t ADC_enuCallBack(void (*Copy_pfunAppFun)(void))
{
    5004:	df 93       	push	r29
    5006:	cf 93       	push	r28
    5008:	00 d0       	rcall	.+0      	; 0x500a <ADC_enuCallBack+0x6>
    500a:	0f 92       	push	r0
    500c:	cd b7       	in	r28, 0x3d	; 61
    500e:	de b7       	in	r29, 0x3e	; 62
    5010:	9b 83       	std	Y+3, r25	; 0x03
    5012:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5014:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pfunAppFun != NULL)
    5016:	8a 81       	ldd	r24, Y+2	; 0x02
    5018:	9b 81       	ldd	r25, Y+3	; 0x03
    501a:	00 97       	sbiw	r24, 0x00	; 0
    501c:	31 f0       	breq	.+12     	; 0x502a <ADC_enuCallBack+0x26>
	{
		ADC_pfunISRFun = Copy_pfunAppFun;
    501e:	8a 81       	ldd	r24, Y+2	; 0x02
    5020:	9b 81       	ldd	r25, Y+3	; 0x03
    5022:	90 93 2b 07 	sts	0x072B, r25
    5026:	80 93 2a 07 	sts	0x072A, r24
		//ADC_pvidISRParameter = Copy_pvidAppParameter;
	}

	return Local_enuErrorState;
    502a:	89 81       	ldd	r24, Y+1	; 0x01
}
    502c:	0f 90       	pop	r0
    502e:	0f 90       	pop	r0
    5030:	0f 90       	pop	r0
    5032:	cf 91       	pop	r28
    5034:	df 91       	pop	r29
    5036:	08 95       	ret

00005038 <ADC_enuSelectChannel>:

ES_t ADC_enuSelectChannel(u8 Copy_u8ChannelID)
{
    5038:	df 93       	push	r29
    503a:	cf 93       	push	r28
    503c:	00 d0       	rcall	.+0      	; 0x503e <ADC_enuSelectChannel+0x6>
    503e:	cd b7       	in	r28, 0x3d	; 61
    5040:	de b7       	in	r29, 0x3e	; 62
    5042:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5044:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8ChannelID <= 31 )
    5046:	8a 81       	ldd	r24, Y+2	; 0x02
    5048:	80 32       	cpi	r24, 0x20	; 32
    504a:	78 f4       	brcc	.+30     	; 0x506a <ADC_enuSelectChannel+0x32>
	{
		ADMUX &= ~0x1F; //0xE0 // 0b11100000
    504c:	a7 e2       	ldi	r26, 0x27	; 39
    504e:	b0 e0       	ldi	r27, 0x00	; 0
    5050:	e7 e2       	ldi	r30, 0x27	; 39
    5052:	f0 e0       	ldi	r31, 0x00	; 0
    5054:	80 81       	ld	r24, Z
    5056:	80 7e       	andi	r24, 0xE0	; 224
    5058:	8c 93       	st	X, r24
		ADMUX |= Copy_u8ChannelID;
    505a:	a7 e2       	ldi	r26, 0x27	; 39
    505c:	b0 e0       	ldi	r27, 0x00	; 0
    505e:	e7 e2       	ldi	r30, 0x27	; 39
    5060:	f0 e0       	ldi	r31, 0x00	; 0
    5062:	90 81       	ld	r25, Z
    5064:	8a 81       	ldd	r24, Y+2	; 0x02
    5066:	89 2b       	or	r24, r25
    5068:	8c 93       	st	X, r24
	else
	{

	}

	return Local_enuErrorState;
    506a:	89 81       	ldd	r24, Y+1	; 0x01
}
    506c:	0f 90       	pop	r0
    506e:	0f 90       	pop	r0
    5070:	cf 91       	pop	r28
    5072:	df 91       	pop	r29
    5074:	08 95       	ret

00005076 <ADC_enuEnableAutoTrigger>:

ES_t ADC_enuEnableAutoTrigger(u8 Copy_u8IntSource)
{
    5076:	df 93       	push	r29
    5078:	cf 93       	push	r28
    507a:	00 d0       	rcall	.+0      	; 0x507c <ADC_enuEnableAutoTrigger+0x6>
    507c:	cd b7       	in	r28, 0x3d	; 61
    507e:	de b7       	in	r29, 0x3e	; 62
    5080:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorState = ES_NOK;
    5082:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8IntSource <= 7)
    5084:	8a 81       	ldd	r24, Y+2	; 0x02
    5086:	88 30       	cpi	r24, 0x08	; 8
    5088:	40 f5       	brcc	.+80     	; 0x50da <ADC_enuEnableAutoTrigger+0x64>
	{
		ADCSRA &=~(1<<5);
    508a:	a6 e2       	ldi	r26, 0x26	; 38
    508c:	b0 e0       	ldi	r27, 0x00	; 0
    508e:	e6 e2       	ldi	r30, 0x26	; 38
    5090:	f0 e0       	ldi	r31, 0x00	; 0
    5092:	80 81       	ld	r24, Z
    5094:	8f 7d       	andi	r24, 0xDF	; 223
    5096:	8c 93       	st	X, r24
		SFIOR  &= 0x1F;
    5098:	a0 e5       	ldi	r26, 0x50	; 80
    509a:	b0 e0       	ldi	r27, 0x00	; 0
    509c:	e0 e5       	ldi	r30, 0x50	; 80
    509e:	f0 e0       	ldi	r31, 0x00	; 0
    50a0:	80 81       	ld	r24, Z
    50a2:	8f 71       	andi	r24, 0x1F	; 31
    50a4:	8c 93       	st	X, r24

		SFIOR  |= (Copy_u8IntSource <<5);
    50a6:	a0 e5       	ldi	r26, 0x50	; 80
    50a8:	b0 e0       	ldi	r27, 0x00	; 0
    50aa:	e0 e5       	ldi	r30, 0x50	; 80
    50ac:	f0 e0       	ldi	r31, 0x00	; 0
    50ae:	80 81       	ld	r24, Z
    50b0:	28 2f       	mov	r18, r24
    50b2:	8a 81       	ldd	r24, Y+2	; 0x02
    50b4:	88 2f       	mov	r24, r24
    50b6:	90 e0       	ldi	r25, 0x00	; 0
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	82 95       	swap	r24
    50be:	92 95       	swap	r25
    50c0:	90 7f       	andi	r25, 0xF0	; 240
    50c2:	98 27       	eor	r25, r24
    50c4:	80 7f       	andi	r24, 0xF0	; 240
    50c6:	98 27       	eor	r25, r24
    50c8:	82 2b       	or	r24, r18
    50ca:	8c 93       	st	X, r24
		ADCSRA |= (1<<5);
    50cc:	a6 e2       	ldi	r26, 0x26	; 38
    50ce:	b0 e0       	ldi	r27, 0x00	; 0
    50d0:	e6 e2       	ldi	r30, 0x26	; 38
    50d2:	f0 e0       	ldi	r31, 0x00	; 0
    50d4:	80 81       	ld	r24, Z
    50d6:	80 62       	ori	r24, 0x20	; 32
    50d8:	8c 93       	st	X, r24
	else
	{

	}

	return Local_enuErrorState;
    50da:	89 81       	ldd	r24, Y+1	; 0x01
}
    50dc:	0f 90       	pop	r0
    50de:	0f 90       	pop	r0
    50e0:	cf 91       	pop	r28
    50e2:	df 91       	pop	r29
    50e4:	08 95       	ret

000050e6 <ADC_enuDisableAutoTrigger>:

ES_t ADC_enuDisableAutoTrigger(void)
{
    50e6:	df 93       	push	r29
    50e8:	cf 93       	push	r28
    50ea:	cd b7       	in	r28, 0x3d	; 61
    50ec:	de b7       	in	r29, 0x3e	; 62
	ADCSRA &=~(1<<5);
    50ee:	a6 e2       	ldi	r26, 0x26	; 38
    50f0:	b0 e0       	ldi	r27, 0x00	; 0
    50f2:	e6 e2       	ldi	r30, 0x26	; 38
    50f4:	f0 e0       	ldi	r31, 0x00	; 0
    50f6:	80 81       	ld	r24, Z
    50f8:	8f 7d       	andi	r24, 0xDF	; 223
    50fa:	8c 93       	st	X, r24
	return ES_OK;
    50fc:	81 e0       	ldi	r24, 0x01	; 1
}
    50fe:	cf 91       	pop	r28
    5100:	df 91       	pop	r29
    5102:	08 95       	ret

00005104 <ADC_enuPolling>:

ES_t ADC_enuPolling(void)
{
    5104:	df 93       	push	r29
    5106:	cf 93       	push	r28
    5108:	cd b7       	in	r28, 0x3d	; 61
    510a:	de b7       	in	r29, 0x3e	; 62
	while (! ((ADCSRA>>4)&1) );
    510c:	e6 e2       	ldi	r30, 0x26	; 38
    510e:	f0 e0       	ldi	r31, 0x00	; 0
    5110:	80 81       	ld	r24, Z
    5112:	82 95       	swap	r24
    5114:	8f 70       	andi	r24, 0x0F	; 15
    5116:	88 2f       	mov	r24, r24
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	81 70       	andi	r24, 0x01	; 1
    511c:	90 70       	andi	r25, 0x00	; 0
    511e:	00 97       	sbiw	r24, 0x00	; 0
    5120:	a9 f3       	breq	.-22     	; 0x510c <ADC_enuPolling+0x8>
	return ES_OK;
    5122:	81 e0       	ldi	r24, 0x01	; 1
}
    5124:	cf 91       	pop	r28
    5126:	df 91       	pop	r29
    5128:	08 95       	ret

0000512a <ADC_enuClearFlag>:


ES_t ADC_enuClearFlag(void)
{
    512a:	df 93       	push	r29
    512c:	cf 93       	push	r28
    512e:	cd b7       	in	r28, 0x3d	; 61
    5130:	de b7       	in	r29, 0x3e	; 62
	ADCSRA |=(1<<4);
    5132:	a6 e2       	ldi	r26, 0x26	; 38
    5134:	b0 e0       	ldi	r27, 0x00	; 0
    5136:	e6 e2       	ldi	r30, 0x26	; 38
    5138:	f0 e0       	ldi	r31, 0x00	; 0
    513a:	80 81       	ld	r24, Z
    513c:	80 61       	ori	r24, 0x10	; 16
    513e:	8c 93       	st	X, r24
	return ES_OK;
    5140:	81 e0       	ldi	r24, 0x01	; 1
}
    5142:	cf 91       	pop	r28
    5144:	df 91       	pop	r29
    5146:	08 95       	ret

00005148 <ADC_enuEnableADC>:


ES_t ADC_enuEnableADC(void)
{
    5148:	df 93       	push	r29
    514a:	cf 93       	push	r28
    514c:	0f 92       	push	r0
    514e:	cd b7       	in	r28, 0x3d	; 61
    5150:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    5152:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<7);
    5154:	a6 e2       	ldi	r26, 0x26	; 38
    5156:	b0 e0       	ldi	r27, 0x00	; 0
    5158:	e6 e2       	ldi	r30, 0x26	; 38
    515a:	f0 e0       	ldi	r31, 0x00	; 0
    515c:	80 81       	ld	r24, Z
    515e:	80 68       	ori	r24, 0x80	; 128
    5160:	8c 93       	st	X, r24

	return Local_enuErrorState;
    5162:	89 81       	ldd	r24, Y+1	; 0x01
}
    5164:	0f 90       	pop	r0
    5166:	cf 91       	pop	r28
    5168:	df 91       	pop	r29
    516a:	08 95       	ret

0000516c <ADC_enuDisableADC>:

ES_t ADC_enuDisableADC(void)
{
    516c:	df 93       	push	r29
    516e:	cf 93       	push	r28
    5170:	0f 92       	push	r0
    5172:	cd b7       	in	r28, 0x3d	; 61
    5174:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    5176:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &=~(1<<7);
    5178:	a6 e2       	ldi	r26, 0x26	; 38
    517a:	b0 e0       	ldi	r27, 0x00	; 0
    517c:	e6 e2       	ldi	r30, 0x26	; 38
    517e:	f0 e0       	ldi	r31, 0x00	; 0
    5180:	80 81       	ld	r24, Z
    5182:	8f 77       	andi	r24, 0x7F	; 127
    5184:	8c 93       	st	X, r24

	return Local_enuErrorState;
    5186:	89 81       	ldd	r24, Y+1	; 0x01
}
    5188:	0f 90       	pop	r0
    518a:	cf 91       	pop	r28
    518c:	df 91       	pop	r29
    518e:	08 95       	ret

00005190 <ADC_enuEnableADC_INT>:

ES_t ADC_enuEnableADC_INT(void)
{
    5190:	df 93       	push	r29
    5192:	cf 93       	push	r28
    5194:	0f 92       	push	r0
    5196:	cd b7       	in	r28, 0x3d	; 61
    5198:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    519a:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<3);
    519c:	a6 e2       	ldi	r26, 0x26	; 38
    519e:	b0 e0       	ldi	r27, 0x00	; 0
    51a0:	e6 e2       	ldi	r30, 0x26	; 38
    51a2:	f0 e0       	ldi	r31, 0x00	; 0
    51a4:	80 81       	ld	r24, Z
    51a6:	88 60       	ori	r24, 0x08	; 8
    51a8:	8c 93       	st	X, r24

	return Local_enuErrorState;
    51aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    51ac:	0f 90       	pop	r0
    51ae:	cf 91       	pop	r28
    51b0:	df 91       	pop	r29
    51b2:	08 95       	ret

000051b4 <ADC_enuDisableADC_INT>:

ES_t ADC_enuDisableADC_INT(void)
{
    51b4:	df 93       	push	r29
    51b6:	cf 93       	push	r28
    51b8:	0f 92       	push	r0
    51ba:	cd b7       	in	r28, 0x3d	; 61
    51bc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    51be:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &=~(1<<3);
    51c0:	a6 e2       	ldi	r26, 0x26	; 38
    51c2:	b0 e0       	ldi	r27, 0x00	; 0
    51c4:	e6 e2       	ldi	r30, 0x26	; 38
    51c6:	f0 e0       	ldi	r31, 0x00	; 0
    51c8:	80 81       	ld	r24, Z
    51ca:	87 7f       	andi	r24, 0xF7	; 247
    51cc:	8c 93       	st	X, r24

	return Local_enuErrorState;
    51ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    51d0:	0f 90       	pop	r0
    51d2:	cf 91       	pop	r28
    51d4:	df 91       	pop	r29
    51d6:	08 95       	ret

000051d8 <__vector_16>:

ISR(ADC_vect)
{
    51d8:	1f 92       	push	r1
    51da:	0f 92       	push	r0
    51dc:	0f b6       	in	r0, 0x3f	; 63
    51de:	0f 92       	push	r0
    51e0:	11 24       	eor	r1, r1
    51e2:	2f 93       	push	r18
    51e4:	3f 93       	push	r19
    51e6:	4f 93       	push	r20
    51e8:	5f 93       	push	r21
    51ea:	6f 93       	push	r22
    51ec:	7f 93       	push	r23
    51ee:	8f 93       	push	r24
    51f0:	9f 93       	push	r25
    51f2:	af 93       	push	r26
    51f4:	bf 93       	push	r27
    51f6:	ef 93       	push	r30
    51f8:	ff 93       	push	r31
    51fa:	df 93       	push	r29
    51fc:	cf 93       	push	r28
    51fe:	cd b7       	in	r28, 0x3d	; 61
    5200:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfunISRFun != NULL)
    5202:	80 91 2a 07 	lds	r24, 0x072A
    5206:	90 91 2b 07 	lds	r25, 0x072B
    520a:	00 97       	sbiw	r24, 0x00	; 0
    520c:	29 f0       	breq	.+10     	; 0x5218 <__vector_16+0x40>
	{
		ADC_pfunISRFun();
    520e:	e0 91 2a 07 	lds	r30, 0x072A
    5212:	f0 91 2b 07 	lds	r31, 0x072B
    5216:	09 95       	icall
	}
}
    5218:	cf 91       	pop	r28
    521a:	df 91       	pop	r29
    521c:	ff 91       	pop	r31
    521e:	ef 91       	pop	r30
    5220:	bf 91       	pop	r27
    5222:	af 91       	pop	r26
    5224:	9f 91       	pop	r25
    5226:	8f 91       	pop	r24
    5228:	7f 91       	pop	r23
    522a:	6f 91       	pop	r22
    522c:	5f 91       	pop	r21
    522e:	4f 91       	pop	r20
    5230:	3f 91       	pop	r19
    5232:	2f 91       	pop	r18
    5234:	0f 90       	pop	r0
    5236:	0f be       	out	0x3f, r0	; 63
    5238:	0f 90       	pop	r0
    523a:	1f 90       	pop	r1
    523c:	18 95       	reti

0000523e <main>:
/*xTaskHandle ADC_Handler;
xTaskHandle TEMP_Handler;*/
xSemaphoreHandle LCD_semphr;
xSemaphoreHandle ADC_semphr;
int main ()
{
    523e:	af 92       	push	r10
    5240:	bf 92       	push	r11
    5242:	cf 92       	push	r12
    5244:	df 92       	push	r13
    5246:	ef 92       	push	r14
    5248:	ff 92       	push	r15
    524a:	0f 93       	push	r16
    524c:	df 93       	push	r29
    524e:	cf 93       	push	r28
    5250:	cd b7       	in	r28, 0x3d	; 61
    5252:	de b7       	in	r29, 0x3e	; 62
	// initialize  all modules
	LCD_enuInit();
    5254:	0e 94 17 07 	call	0xe2e	; 0xe2e <LCD_enuInit>
	Keypad_enuInit();
    5258:	0e 94 87 0c 	call	0x190e	; 0x190e <Keypad_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_B, DIO_u8PIN4, DIO_u8OUTPUT);
    525c:	81 e0       	ldi	r24, 0x01	; 1
    525e:	64 e0       	ldi	r22, 0x04	; 4
    5260:	41 e0       	ldi	r20, 0x01	; 1
    5262:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8GROUP_B, DIO_u8PIN5, DIO_u8OUTPUT);
    5266:	81 e0       	ldi	r24, 0x01	; 1
    5268:	65 e0       	ldi	r22, 0x05	; 5
    526a:	41 e0       	ldi	r20, 0x01	; 1
    526c:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8GROUP_B, DIO_u8PIN7, DIO_u8OUTPUT);
    5270:	81 e0       	ldi	r24, 0x01	; 1
    5272:	67 e0       	ldi	r22, 0x07	; 7
    5274:	41 e0       	ldi	r20, 0x01	; 1
    5276:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	 * 4- enable ADC interrupt
	 * 5- set callback
	 * 6- enable ADC
	 * 7- start conversion
	 */
	ADC_enuSelectChannel(7);
    527a:	87 e0       	ldi	r24, 0x07	; 7
    527c:	0e 94 1c 28 	call	0x5038	; 0x5038 <ADC_enuSelectChannel>
	DIO_enuSetPinDirection(DIO_u8GROUP_A , DIO_u8PIN7 , DIO_u8INPUT);
    5280:	80 e0       	ldi	r24, 0x00	; 0
    5282:	67 e0       	ldi	r22, 0x07	; 7
    5284:	40 e0       	ldi	r20, 0x00	; 0
    5286:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_A , DIO_u8PIN7 , DIO_u8FLOAT);
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	67 e0       	ldi	r22, 0x07	; 7
    528e:	40 e0       	ldi	r20, 0x00	; 0
    5290:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	DIO_enuSetPinDirection(DIO_u8GROUP_A , DIO_u8PIN0 , DIO_u8INPUT);
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	60 e0       	ldi	r22, 0x00	; 0
    5298:	40 e0       	ldi	r20, 0x00	; 0
    529a:	0e 94 5f 24 	call	0x48be	; 0x48be <DIO_enuSetPinDirection>
	DIO_enuSetPinValue(DIO_u8GROUP_A , DIO_u8PIN0 , DIO_u8FLOAT);
    529e:	80 e0       	ldi	r24, 0x00	; 0
    52a0:	60 e0       	ldi	r22, 0x00	; 0
    52a2:	40 e0       	ldi	r20, 0x00	; 0
    52a4:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	ADC_enuInit();
    52a8:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <ADC_enuInit>
	ADC_enuEnableADC();
    52ac:	0e 94 a4 28 	call	0x5148	; 0x5148 <ADC_enuEnableADC>
	ADC_enuEnableADC_INT();
    52b0:	0e 94 c8 28 	call	0x5190	; 0x5190 <ADC_enuEnableADC_INT>
	GIE_enuEnable();
    52b4:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <GIE_enuEnable>
	ADC_enuCallBack(adc_isr);
    52b8:	86 ee       	ldi	r24, 0xE6	; 230
    52ba:	9b e2       	ldi	r25, 0x2B	; 43
    52bc:	0e 94 02 28 	call	0x5004	; 0x5004 <ADC_enuCallBack>
	ADC_enuStartConversion();
    52c0:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <ADC_enuStartConversion>
	 * 3- stack depth
	 * 4- parameters
	 * 5- priority
	 * Task Handler
	 */
	ADC_semphr = xSemaphoreCreateCounting(1,0);
    52c4:	81 e0       	ldi	r24, 0x01	; 1
    52c6:	60 e0       	ldi	r22, 0x00	; 0
    52c8:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <xQueueCreateCountingSemaphore>
    52cc:	90 93 39 07 	sts	0x0739, r25
    52d0:	80 93 38 07 	sts	0x0738, r24
	xTaskCreate(LCD , NULL , 200 , NULL,3,NULL);
    52d4:	8b ed       	ldi	r24, 0xDB	; 219
    52d6:	99 e2       	ldi	r25, 0x29	; 41
    52d8:	60 e0       	ldi	r22, 0x00	; 0
    52da:	70 e0       	ldi	r23, 0x00	; 0
    52dc:	48 ec       	ldi	r20, 0xC8	; 200
    52de:	50 e0       	ldi	r21, 0x00	; 0
    52e0:	20 e0       	ldi	r18, 0x00	; 0
    52e2:	30 e0       	ldi	r19, 0x00	; 0
    52e4:	03 e0       	ldi	r16, 0x03	; 3
    52e6:	ee 24       	eor	r14, r14
    52e8:	ff 24       	eor	r15, r15
    52ea:	cc 24       	eor	r12, r12
    52ec:	dd 24       	eor	r13, r13
    52ee:	aa 24       	eor	r10, r10
    52f0:	bb 24       	eor	r11, r11
    52f2:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <xTaskGenericCreate>
	xTaskCreate(KeyPad , NULL , 200 , NULL,2,NULL);
    52f6:	85 ea       	ldi	r24, 0xA5	; 165
    52f8:	9a e2       	ldi	r25, 0x2A	; 42
    52fa:	60 e0       	ldi	r22, 0x00	; 0
    52fc:	70 e0       	ldi	r23, 0x00	; 0
    52fe:	48 ec       	ldi	r20, 0xC8	; 200
    5300:	50 e0       	ldi	r21, 0x00	; 0
    5302:	20 e0       	ldi	r18, 0x00	; 0
    5304:	30 e0       	ldi	r19, 0x00	; 0
    5306:	02 e0       	ldi	r16, 0x02	; 2
    5308:	ee 24       	eor	r14, r14
    530a:	ff 24       	eor	r15, r15
    530c:	cc 24       	eor	r12, r12
    530e:	dd 24       	eor	r13, r13
    5310:	aa 24       	eor	r10, r10
    5312:	bb 24       	eor	r11, r11
    5314:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <xTaskGenericCreate>
	xTaskCreate(Door_Action , NULL , 80 , NULL,2,NULL);
    5318:	8e e4       	ldi	r24, 0x4E	; 78
    531a:	9b e2       	ldi	r25, 0x2B	; 43
    531c:	60 e0       	ldi	r22, 0x00	; 0
    531e:	70 e0       	ldi	r23, 0x00	; 0
    5320:	40 e5       	ldi	r20, 0x50	; 80
    5322:	50 e0       	ldi	r21, 0x00	; 0
    5324:	20 e0       	ldi	r18, 0x00	; 0
    5326:	30 e0       	ldi	r19, 0x00	; 0
    5328:	02 e0       	ldi	r16, 0x02	; 2
    532a:	ee 24       	eor	r14, r14
    532c:	ff 24       	eor	r15, r15
    532e:	cc 24       	eor	r12, r12
    5330:	dd 24       	eor	r13, r13
    5332:	aa 24       	eor	r10, r10
    5334:	bb 24       	eor	r11, r11
    5336:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <xTaskGenericCreate>
	xTaskCreate(ReadTemp , NULL , 80 , NULL,2,NULL);
    533a:	88 ef       	ldi	r24, 0xF8	; 248
    533c:	9b e2       	ldi	r25, 0x2B	; 43
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	70 e0       	ldi	r23, 0x00	; 0
    5342:	40 e5       	ldi	r20, 0x50	; 80
    5344:	50 e0       	ldi	r21, 0x00	; 0
    5346:	20 e0       	ldi	r18, 0x00	; 0
    5348:	30 e0       	ldi	r19, 0x00	; 0
    534a:	02 e0       	ldi	r16, 0x02	; 2
    534c:	ee 24       	eor	r14, r14
    534e:	ff 24       	eor	r15, r15
    5350:	cc 24       	eor	r12, r12
    5352:	dd 24       	eor	r13, r13
    5354:	aa 24       	eor	r10, r10
    5356:	bb 24       	eor	r11, r11
    5358:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <xTaskGenericCreate>
	xTaskCreate(ADC_Read , NULL , 80 , NULL,3,NULL);
    535c:	84 eb       	ldi	r24, 0xB4	; 180
    535e:	9b e2       	ldi	r25, 0x2B	; 43
    5360:	60 e0       	ldi	r22, 0x00	; 0
    5362:	70 e0       	ldi	r23, 0x00	; 0
    5364:	40 e5       	ldi	r20, 0x50	; 80
    5366:	50 e0       	ldi	r21, 0x00	; 0
    5368:	20 e0       	ldi	r18, 0x00	; 0
    536a:	30 e0       	ldi	r19, 0x00	; 0
    536c:	03 e0       	ldi	r16, 0x03	; 3
    536e:	ee 24       	eor	r14, r14
    5370:	ff 24       	eor	r15, r15
    5372:	cc 24       	eor	r12, r12
    5374:	dd 24       	eor	r13, r13
    5376:	aa 24       	eor	r10, r10
    5378:	bb 24       	eor	r11, r11
    537a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <xTaskGenericCreate>
	//xTaskCreate(Fan , NULL , 80 , NULL,2,NULL);
	// initiate semaphore
	vSemaphoreCreateBinary(LCD_semphr);
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	60 e0       	ldi	r22, 0x00	; 0
    5382:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <xQueueCreate>
    5386:	90 93 37 07 	sts	0x0737, r25
    538a:	80 93 36 07 	sts	0x0736, r24
    538e:	80 91 36 07 	lds	r24, 0x0736
    5392:	90 91 37 07 	lds	r25, 0x0737
    5396:	00 97       	sbiw	r24, 0x00	; 0
    5398:	59 f0       	breq	.+22     	; 0x53b0 <main+0x172>
    539a:	80 91 36 07 	lds	r24, 0x0736
    539e:	90 91 37 07 	lds	r25, 0x0737
    53a2:	60 e0       	ldi	r22, 0x00	; 0
    53a4:	70 e0       	ldi	r23, 0x00	; 0
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	50 e0       	ldi	r21, 0x00	; 0
    53aa:	20 e0       	ldi	r18, 0x00	; 0
    53ac:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xQueueGenericSend>
	//vTaskSuspend(LCD_Handler);
	//start the scheduler
	vTaskStartScheduler();
    53b0:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <vTaskStartScheduler>
    53b4:	ff cf       	rjmp	.-2      	; 0x53b4 <main+0x176>

000053b6 <LCD>:
	while(1);
}
void LCD (void *pv)
{
    53b6:	df 93       	push	r29
    53b8:	cf 93       	push	r28
    53ba:	00 d0       	rcall	.+0      	; 0x53bc <LCD+0x6>
    53bc:	0f 92       	push	r0
    53be:	cd b7       	in	r28, 0x3d	; 61
    53c0:	de b7       	in	r29, 0x3e	; 62
    53c2:	9b 83       	std	Y+3, r25	; 0x03
    53c4:	8a 83       	std	Y+2, r24	; 0x02
		LCD_enuWriteCommand(0x01);
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <LCD_enuWriteCommand>
		LCD_enuGoToPosition(1, 1);
    53cc:	81 e0       	ldi	r24, 0x01	; 1
    53ce:	61 e0       	ldi	r22, 0x01	; 1
    53d0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
		LCD_enuWriteString("pass:");
    53d4:	85 e6       	ldi	r24, 0x65	; 101
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
		LCD_enuGoToPosition(2, 1);
    53dc:	82 e0       	ldi	r24, 0x02	; 2
    53de:	61 e0       	ldi	r22, 0x01	; 1
    53e0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
		LCD_enuWriteString("Door:");
    53e4:	8b e6       	ldi	r24, 0x6B	; 107
    53e6:	90 e0       	ldi	r25, 0x00	; 0
    53e8:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
		LCD_enuGoToPosition(2, 9);
    53ec:	82 e0       	ldi	r24, 0x02	; 2
    53ee:	69 e0       	ldi	r22, 0x09	; 9
    53f0:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
		LCD_enuWriteString("|fan:");
    53f4:	81 e7       	ldi	r24, 0x71	; 113
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
		LCD_enuGoToPosition(3, 1);
    53fc:	83 e0       	ldi	r24, 0x03	; 3
    53fe:	61 e0       	ldi	r22, 0x01	; 1
    5400:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
		LCD_enuWriteString("Temp:");
    5404:	87 e7       	ldi	r24, 0x77	; 119
    5406:	90 e0       	ldi	r25, 0x00	; 0
    5408:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
		LCD_enuGoToPosition(3, 9);
    540c:	83 e0       	ldi	r24, 0x03	; 3
    540e:	69 e0       	ldi	r22, 0x09	; 9
    5410:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
		LCD_enuWriteString("|Gas:");
    5414:	8d e7       	ldi	r24, 0x7D	; 125
    5416:	90 e0       	ldi	r25, 0x00	; 0
    5418:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
	while (1)
	{
		if(xSemaphoreTake(LCD_semphr , 35) == pdPASS )
    541c:	80 91 36 07 	lds	r24, 0x0736
    5420:	90 91 37 07 	lds	r25, 0x0737
    5424:	60 e0       	ldi	r22, 0x00	; 0
    5426:	70 e0       	ldi	r23, 0x00	; 0
    5428:	43 e2       	ldi	r20, 0x23	; 35
    542a:	50 e0       	ldi	r21, 0x00	; 0
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xQueueGenericReceive>
    5432:	81 30       	cpi	r24, 0x01	; 1
    5434:	09 f0       	breq	.+2      	; 0x5438 <LCD+0x82>
    5436:	84 c0       	rjmp	.+264    	; 0x5540 <LCD+0x18a>
		{
			LCD_enuGoToPosition(2, 6);
    5438:	82 e0       	ldi	r24, 0x02	; 2
    543a:	66 e0       	ldi	r22, 0x06	; 6
    543c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
			LCD_enuWriteString(doorStatus);
    5440:	87 ea       	ldi	r24, 0xA7	; 167
    5442:	91 e0       	ldi	r25, 0x01	; 1
    5444:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
			if(strlen(doorStatus) < 3)
    5448:	87 ea       	ldi	r24, 0xA7	; 167
    544a:	91 e0       	ldi	r25, 0x01	; 1
    544c:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <strlen>
    5450:	83 30       	cpi	r24, 0x03	; 3
    5452:	91 05       	cpc	r25, r1
    5454:	18 f4       	brcc	.+6      	; 0x545c <LCD+0xa6>
				LCD_enuWriteData(' ');
    5456:	80 e2       	ldi	r24, 0x20	; 32
    5458:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_enuWriteData>
			LCD_enuGoToPosition(2, 14);
    545c:	82 e0       	ldi	r24, 0x02	; 2
    545e:	6e e0       	ldi	r22, 0x0E	; 14
    5460:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
			LCD_enuWriteString(FanState);
    5464:	8b eb       	ldi	r24, 0xBB	; 187
    5466:	91 e0       	ldi	r25, 0x01	; 1
    5468:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
			if(strlen(FanState) < 3)
    546c:	8b eb       	ldi	r24, 0xBB	; 187
    546e:	91 e0       	ldi	r25, 0x01	; 1
    5470:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <strlen>
    5474:	83 30       	cpi	r24, 0x03	; 3
    5476:	91 05       	cpc	r25, r1
    5478:	18 f4       	brcc	.+6      	; 0x5480 <LCD+0xca>
				LCD_enuWriteData(' ');
    547a:	80 e2       	ldi	r24, 0x20	; 32
    547c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_enuWriteData>
			LCD_enuGoToPosition(3, 6);
    5480:	83 e0       	ldi	r24, 0x03	; 3
    5482:	66 e0       	ldi	r22, 0x06	; 6
    5484:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
			LCD_enuWriteIntegerNum(Temp);
    5488:	80 91 32 07 	lds	r24, 0x0732
    548c:	90 91 33 07 	lds	r25, 0x0733
    5490:	cc 01       	movw	r24, r24
    5492:	a0 e0       	ldi	r26, 0x00	; 0
    5494:	b0 e0       	ldi	r27, 0x00	; 0
    5496:	bc 01       	movw	r22, r24
    5498:	cd 01       	movw	r24, r26
    549a:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_enuWriteIntegerNum>
			if(Temp < 10)
    549e:	80 91 32 07 	lds	r24, 0x0732
    54a2:	90 91 33 07 	lds	r25, 0x0733
    54a6:	8a 30       	cpi	r24, 0x0A	; 10
    54a8:	91 05       	cpc	r25, r1
    54aa:	20 f4       	brcc	.+8      	; 0x54b4 <LCD+0xfe>
				LCD_enuWriteString(" ");
    54ac:	83 e8       	ldi	r24, 0x83	; 131
    54ae:	90 e0       	ldi	r25, 0x00	; 0
    54b0:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
			LCD_enuGoToPosition(3, 14);
    54b4:	83 e0       	ldi	r24, 0x03	; 3
    54b6:	6e e0       	ldi	r22, 0x0E	; 14
    54b8:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
			LCD_enuWriteIntegerNum(Gas);
    54bc:	80 91 34 07 	lds	r24, 0x0734
    54c0:	90 91 35 07 	lds	r25, 0x0735
    54c4:	cc 01       	movw	r24, r24
    54c6:	a0 e0       	ldi	r26, 0x00	; 0
    54c8:	b0 e0       	ldi	r27, 0x00	; 0
    54ca:	bc 01       	movw	r22, r24
    54cc:	cd 01       	movw	r24, r26
    54ce:	0e 94 3a 09 	call	0x1274	; 0x1274 <LCD_enuWriteIntegerNum>
			if(Gas < 100)
    54d2:	80 91 34 07 	lds	r24, 0x0734
    54d6:	90 91 35 07 	lds	r25, 0x0735
    54da:	84 36       	cpi	r24, 0x64	; 100
    54dc:	91 05       	cpc	r25, r1
    54de:	20 f4       	brcc	.+8      	; 0x54e8 <LCD+0x132>
				LCD_enuWriteString("  ");
    54e0:	85 e8       	ldi	r24, 0x85	; 133
    54e2:	90 e0       	ldi	r25, 0x00	; 0
    54e4:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
			LCD_enuGoToPosition(4, 1);
    54e8:	84 e0       	ldi	r24, 0x04	; 4
    54ea:	61 e0       	ldi	r22, 0x01	; 1
    54ec:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
			for(u8 i = 1 ; i<=16;i++)
    54f0:	81 e0       	ldi	r24, 0x01	; 1
    54f2:	89 83       	std	Y+1, r24	; 0x01
    54f4:	06 c0       	rjmp	.+12     	; 0x5502 <LCD+0x14c>
			{
				LCD_enuWriteData(' ');
    54f6:	80 e2       	ldi	r24, 0x20	; 32
    54f8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_enuWriteData>
			LCD_enuGoToPosition(3, 14);
			LCD_enuWriteIntegerNum(Gas);
			if(Gas < 100)
				LCD_enuWriteString("  ");
			LCD_enuGoToPosition(4, 1);
			for(u8 i = 1 ; i<=16;i++)
    54fc:	89 81       	ldd	r24, Y+1	; 0x01
    54fe:	8f 5f       	subi	r24, 0xFF	; 255
    5500:	89 83       	std	Y+1, r24	; 0x01
    5502:	89 81       	ldd	r24, Y+1	; 0x01
    5504:	81 31       	cpi	r24, 0x11	; 17
    5506:	b8 f3       	brcs	.-18     	; 0x54f6 <LCD+0x140>
			{
				LCD_enuWriteData(' ');
			}
			LCD_enuGoToPosition(4, 1);
    5508:	84 e0       	ldi	r24, 0x04	; 4
    550a:	61 e0       	ldi	r22, 0x01	; 1
    550c:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
			LCD_enuWriteString(warning);
    5510:	8b ea       	ldi	r24, 0xAB	; 171
    5512:	91 e0       	ldi	r25, 0x01	; 1
    5514:	0e 94 0d 09 	call	0x121a	; 0x121a <LCD_enuWriteString>
			strcpy(warning,"");
    5518:	8b ea       	ldi	r24, 0xAB	; 171
    551a:	91 e0       	ldi	r25, 0x01	; 1
    551c:	28 e8       	ldi	r18, 0x88	; 136
    551e:	30 e0       	ldi	r19, 0x00	; 0
    5520:	b9 01       	movw	r22, r18
    5522:	41 e0       	ldi	r20, 0x01	; 1
    5524:	50 e0       	ldi	r21, 0x00	; 0
    5526:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
			xSemaphoreGive(LCD_semphr);
    552a:	80 91 36 07 	lds	r24, 0x0736
    552e:	90 91 37 07 	lds	r25, 0x0737
    5532:	60 e0       	ldi	r22, 0x00	; 0
    5534:	70 e0       	ldi	r23, 0x00	; 0
    5536:	40 e0       	ldi	r20, 0x00	; 0
    5538:	50 e0       	ldi	r21, 0x00	; 0
    553a:	20 e0       	ldi	r18, 0x00	; 0
    553c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xQueueGenericSend>
		}
		vTaskDelay(40);
    5540:	88 e2       	ldi	r24, 0x28	; 40
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
    5548:	69 cf       	rjmp	.-302    	; 0x541c <LCD+0x66>

0000554a <KeyPad>:
	}
}
void KeyPad (void *pv)
{
    554a:	df 93       	push	r29
    554c:	cf 93       	push	r28
    554e:	cd b7       	in	r28, 0x3d	; 61
    5550:	de b7       	in	r29, 0x3e	; 62
    5552:	2c 97       	sbiw	r28, 0x0c	; 12
    5554:	0f b6       	in	r0, 0x3f	; 63
    5556:	f8 94       	cli
    5558:	de bf       	out	0x3e, r29	; 62
    555a:	0f be       	out	0x3f, r0	; 63
    555c:	cd bf       	out	0x3d, r28	; 61
    555e:	98 87       	std	Y+8, r25	; 0x08
    5560:	8f 83       	std	Y+7, r24	; 0x07
	u8  value [5] ;
	while (1)
	{
		if(xSemaphoreTake(LCD_semphr , 35) == pdPASS)
    5562:	80 91 36 07 	lds	r24, 0x0736
    5566:	90 91 37 07 	lds	r25, 0x0737
    556a:	60 e0       	ldi	r22, 0x00	; 0
    556c:	70 e0       	ldi	r23, 0x00	; 0
    556e:	43 e2       	ldi	r20, 0x23	; 35
    5570:	50 e0       	ldi	r21, 0x00	; 0
    5572:	20 e0       	ldi	r18, 0x00	; 0
    5574:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xQueueGenericReceive>
    5578:	81 30       	cpi	r24, 0x01	; 1
    557a:	09 f0       	breq	.+2      	; 0x557e <KeyPad+0x34>
    557c:	8a c0       	rjmp	.+276    	; 0x5692 <KeyPad+0x148>
		{
			LCD_enuGoToPosition(1, 6);
    557e:	81 e0       	ldi	r24, 0x01	; 1
    5580:	66 e0       	ldi	r22, 0x06	; 6
    5582:	0e 94 dd 09 	call	0x13ba	; 0x13ba <LCD_enuGoToPosition>
			//(pass != 0) ? LCD_enuWriteString("Enter Pass:") :LCD_enuWriteString("Select Pass:");
			for (u8 i = 0 ; i <4;i++)
    5586:	19 82       	std	Y+1, r1	; 0x01
    5588:	30 c0       	rjmp	.+96     	; 0x55ea <KeyPad+0xa0>
				{
				Keypad_GetPressedKey(&value[i]);
    558a:	89 81       	ldd	r24, Y+1	; 0x01
    558c:	28 2f       	mov	r18, r24
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	ce 01       	movw	r24, r28
    5592:	02 96       	adiw	r24, 0x02	; 2
    5594:	82 0f       	add	r24, r18
    5596:	93 1f       	adc	r25, r19
    5598:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <Keypad_GetPressedKey>
				if(value[i] == 0xff)
    559c:	89 81       	ldd	r24, Y+1	; 0x01
    559e:	28 2f       	mov	r18, r24
    55a0:	30 e0       	ldi	r19, 0x00	; 0
    55a2:	ce 01       	movw	r24, r28
    55a4:	02 96       	adiw	r24, 0x02	; 2
    55a6:	fc 01       	movw	r30, r24
    55a8:	e2 0f       	add	r30, r18
    55aa:	f3 1f       	adc	r31, r19
    55ac:	80 81       	ld	r24, Z
    55ae:	8f 3f       	cpi	r24, 0xFF	; 255
    55b0:	21 f4       	brne	.+8      	; 0x55ba <KeyPad+0x70>
					i--;
    55b2:	89 81       	ldd	r24, Y+1	; 0x01
    55b4:	81 50       	subi	r24, 0x01	; 1
    55b6:	89 83       	std	Y+1, r24	; 0x01
    55b8:	15 c0       	rjmp	.+42     	; 0x55e4 <KeyPad+0x9a>
				else
					{
					(pass != 0) ? LCD_enuWriteData('*') :LCD_enuWriteData(value[i]) ;
    55ba:	80 91 2c 07 	lds	r24, 0x072C
    55be:	90 91 2d 07 	lds	r25, 0x072D
    55c2:	00 97       	sbiw	r24, 0x00	; 0
    55c4:	21 f0       	breq	.+8      	; 0x55ce <KeyPad+0x84>
    55c6:	8a e2       	ldi	r24, 0x2A	; 42
    55c8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_enuWriteData>
    55cc:	0b c0       	rjmp	.+22     	; 0x55e4 <KeyPad+0x9a>
    55ce:	89 81       	ldd	r24, Y+1	; 0x01
    55d0:	28 2f       	mov	r18, r24
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	ce 01       	movw	r24, r28
    55d6:	02 96       	adiw	r24, 0x02	; 2
    55d8:	fc 01       	movw	r30, r24
    55da:	e2 0f       	add	r30, r18
    55dc:	f3 1f       	adc	r31, r19
    55de:	80 81       	ld	r24, Z
    55e0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <LCD_enuWriteData>
	{
		if(xSemaphoreTake(LCD_semphr , 35) == pdPASS)
		{
			LCD_enuGoToPosition(1, 6);
			//(pass != 0) ? LCD_enuWriteString("Enter Pass:") :LCD_enuWriteString("Select Pass:");
			for (u8 i = 0 ; i <4;i++)
    55e4:	89 81       	ldd	r24, Y+1	; 0x01
    55e6:	8f 5f       	subi	r24, 0xFF	; 255
    55e8:	89 83       	std	Y+1, r24	; 0x01
    55ea:	89 81       	ldd	r24, Y+1	; 0x01
    55ec:	84 30       	cpi	r24, 0x04	; 4
    55ee:	68 f2       	brcs	.-102    	; 0x558a <KeyPad+0x40>
				else
					{
					(pass != 0) ? LCD_enuWriteData('*') :LCD_enuWriteData(value[i]) ;
					}
				}
		value[4] = '\0';
    55f0:	1e 82       	std	Y+6, r1	; 0x06
		if(pass == 0)
    55f2:	80 91 2c 07 	lds	r24, 0x072C
    55f6:	90 91 2d 07 	lds	r25, 0x072D
    55fa:	00 97       	sbiw	r24, 0x00	; 0
    55fc:	49 f4       	brne	.+18     	; 0x5610 <KeyPad+0xc6>
			pass = atoi(value);
    55fe:	ce 01       	movw	r24, r28
    5600:	02 96       	adiw	r24, 0x02	; 2
    5602:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
    5606:	90 93 2d 07 	sts	0x072D, r25
    560a:	80 93 2c 07 	sts	0x072C, r24
    560e:	1f c0       	rjmp	.+62     	; 0x564e <KeyPad+0x104>
		else
			{
				current_value = atoi(value);
    5610:	ce 01       	movw	r24, r28
    5612:	02 96       	adiw	r24, 0x02	; 2
    5614:	0e 94 17 2d 	call	0x5a2e	; 0x5a2e <atoi>
    5618:	90 93 c0 01 	sts	0x01C0, r25
    561c:	80 93 bf 01 	sts	0x01BF, r24
				current_value = (current_value == pass);
    5620:	20 91 bf 01 	lds	r18, 0x01BF
    5624:	30 91 c0 01 	lds	r19, 0x01C0
    5628:	80 91 2c 07 	lds	r24, 0x072C
    562c:	90 91 2d 07 	lds	r25, 0x072D
    5630:	1c 86       	std	Y+12, r1	; 0x0c
    5632:	1b 86       	std	Y+11, r1	; 0x0b
    5634:	28 17       	cp	r18, r24
    5636:	39 07       	cpc	r19, r25
    5638:	21 f4       	brne	.+8      	; 0x5642 <KeyPad+0xf8>
    563a:	81 e0       	ldi	r24, 0x01	; 1
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	9c 87       	std	Y+12, r25	; 0x0c
    5640:	8b 87       	std	Y+11, r24	; 0x0b
    5642:	8b 85       	ldd	r24, Y+11	; 0x0b
    5644:	9c 85       	ldd	r25, Y+12	; 0x0c
    5646:	90 93 c0 01 	sts	0x01C0, r25
    564a:	80 93 bf 01 	sts	0x01BF, r24
			}
	//	LCD_enuGoToPosition(2, 1);
		if (current_value == 1)
    564e:	80 91 bf 01 	lds	r24, 0x01BF
    5652:	90 91 c0 01 	lds	r25, 0x01C0
    5656:	81 30       	cpi	r24, 0x01	; 1
    5658:	91 05       	cpc	r25, r1
    565a:	61 f4       	brne	.+24     	; 0x5674 <KeyPad+0x12a>
		{
			//LCD_enuWriteString("pass is correct");
			xSemaphoreGive(LCD_semphr);
    565c:	80 91 36 07 	lds	r24, 0x0736
    5660:	90 91 37 07 	lds	r25, 0x0737
    5664:	60 e0       	ldi	r22, 0x00	; 0
    5666:	70 e0       	ldi	r23, 0x00	; 0
    5668:	40 e0       	ldi	r20, 0x00	; 0
    566a:	50 e0       	ldi	r21, 0x00	; 0
    566c:	20 e0       	ldi	r18, 0x00	; 0
    566e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xQueueGenericSend>
    5672:	04 c0       	rjmp	.+8      	; 0x567c <KeyPad+0x132>
			//vTaskResume(LCD_Handler);
			//vTaskDelete(keypad_Handler);
		}
		else if (current_value == 0)
    5674:	80 91 bf 01 	lds	r24, 0x01BF
    5678:	90 91 c0 01 	lds	r25, 0x01C0
			}
		else if (current_value == 2)
		{
			//LCD_enuWriteString("pass saved");
		}
		xSemaphoreGive(LCD_semphr);
    567c:	80 91 36 07 	lds	r24, 0x0736
    5680:	90 91 37 07 	lds	r25, 0x0737
    5684:	60 e0       	ldi	r22, 0x00	; 0
    5686:	70 e0       	ldi	r23, 0x00	; 0
    5688:	40 e0       	ldi	r20, 0x00	; 0
    568a:	50 e0       	ldi	r21, 0x00	; 0
    568c:	20 e0       	ldi	r18, 0x00	; 0
    568e:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xQueueGenericSend>
		}
		vTaskDelay(41);
    5692:	89 e2       	ldi	r24, 0x29	; 41
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
    569a:	63 cf       	rjmp	.-314    	; 0x5562 <KeyPad+0x18>

0000569c <Door_Action>:
	}
}
void Door_Action (void *pv)
{
    569c:	df 93       	push	r29
    569e:	cf 93       	push	r28
    56a0:	00 d0       	rcall	.+0      	; 0x56a2 <Door_Action+0x6>
    56a2:	0f 92       	push	r0
    56a4:	cd b7       	in	r28, 0x3d	; 61
    56a6:	de b7       	in	r29, 0x3e	; 62
    56a8:	9b 83       	std	Y+3, r25	; 0x03
    56aa:	8a 83       	std	Y+2, r24	; 0x02
	u8 error = 0;
    56ac:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
			if(current_value == 2)
    56ae:	80 91 bf 01 	lds	r24, 0x01BF
    56b2:	90 91 c0 01 	lds	r25, 0x01C0
    56b6:	82 30       	cpi	r24, 0x02	; 2
    56b8:	91 05       	cpc	r25, r1
    56ba:	51 f4       	brne	.+20     	; 0x56d0 <Door_Action+0x34>
			{
				strcpy(doorStatus,"off");
    56bc:	87 ea       	ldi	r24, 0xA7	; 167
    56be:	91 e0       	ldi	r25, 0x01	; 1
    56c0:	29 e8       	ldi	r18, 0x89	; 137
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	b9 01       	movw	r22, r18
    56c6:	44 e0       	ldi	r20, 0x04	; 4
    56c8:	50 e0       	ldi	r21, 0x00	; 0
    56ca:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
    56ce:	47 c0       	rjmp	.+142    	; 0x575e <Door_Action+0xc2>
			}
			else if( (current_value == 1) )
    56d0:	80 91 bf 01 	lds	r24, 0x01BF
    56d4:	90 91 c0 01 	lds	r25, 0x01C0
    56d8:	81 30       	cpi	r24, 0x01	; 1
    56da:	91 05       	cpc	r25, r1
    56dc:	c9 f4       	brne	.+50     	; 0x5710 <Door_Action+0x74>
			{
				error = 0;
    56de:	19 82       	std	Y+1, r1	; 0x01
				strcpy(doorStatus,"on");
    56e0:	87 ea       	ldi	r24, 0xA7	; 167
    56e2:	91 e0       	ldi	r25, 0x01	; 1
    56e4:	2d e8       	ldi	r18, 0x8D	; 141
    56e6:	30 e0       	ldi	r19, 0x00	; 0
    56e8:	b9 01       	movw	r22, r18
    56ea:	43 e0       	ldi	r20, 0x03	; 3
    56ec:	50 e0       	ldi	r21, 0x00	; 0
    56ee:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
				DIO_enuSetPinValue(DIO_u8GROUP_B, DIO_u8PIN4, DIO_u8HIGH);
    56f2:	81 e0       	ldi	r24, 0x01	; 1
    56f4:	64 e0       	ldi	r22, 0x04	; 4
    56f6:	41 e0       	ldi	r20, 0x01	; 1
    56f8:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
				vTaskDelay(10);
    56fc:	8a e0       	ldi	r24, 0x0A	; 10
    56fe:	90 e0       	ldi	r25, 0x00	; 0
    5700:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
				DIO_enuSetPinValue(DIO_u8GROUP_B, DIO_u8PIN4, DIO_u8LOW);
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	64 e0       	ldi	r22, 0x04	; 4
    5708:	40 e0       	ldi	r20, 0x00	; 0
    570a:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
    570e:	27 c0       	rjmp	.+78     	; 0x575e <Door_Action+0xc2>
				//vTaskDelete(Door_Handler);
			}
			else
			{
				strcpy(doorStatus,"off");
    5710:	87 ea       	ldi	r24, 0xA7	; 167
    5712:	91 e0       	ldi	r25, 0x01	; 1
    5714:	29 e8       	ldi	r18, 0x89	; 137
    5716:	30 e0       	ldi	r19, 0x00	; 0
    5718:	b9 01       	movw	r22, r18
    571a:	44 e0       	ldi	r20, 0x04	; 4
    571c:	50 e0       	ldi	r21, 0x00	; 0
    571e:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
				error ++;
    5722:	89 81       	ldd	r24, Y+1	; 0x01
    5724:	8f 5f       	subi	r24, 0xFF	; 255
    5726:	89 83       	std	Y+1, r24	; 0x01
				if(error > 2)
    5728:	89 81       	ldd	r24, Y+1	; 0x01
    572a:	83 30       	cpi	r24, 0x03	; 3
    572c:	c0 f0       	brcs	.+48     	; 0x575e <Door_Action+0xc2>
				{
					DIO_enuSetPinValue(DIO_u8GROUP_B, DIO_u8PIN5, DIO_u8HIGH);
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	65 e0       	ldi	r22, 0x05	; 5
    5732:	41 e0       	ldi	r20, 0x01	; 1
    5734:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
					vTaskDelay(10);
    5738:	8a e0       	ldi	r24, 0x0A	; 10
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
					DIO_enuSetPinValue(DIO_u8GROUP_B, DIO_u8PIN5, DIO_u8LOW);
    5740:	81 e0       	ldi	r24, 0x01	; 1
    5742:	65 e0       	ldi	r22, 0x05	; 5
    5744:	40 e0       	ldi	r20, 0x00	; 0
    5746:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
					error = 0;
    574a:	19 82       	std	Y+1, r1	; 0x01
					strcpy(warning,"pass wrong*3");
    574c:	8b ea       	ldi	r24, 0xAB	; 171
    574e:	91 e0       	ldi	r25, 0x01	; 1
    5750:	20 e9       	ldi	r18, 0x90	; 144
    5752:	30 e0       	ldi	r19, 0x00	; 0
    5754:	b9 01       	movw	r22, r18
    5756:	4d e0       	ldi	r20, 0x0D	; 13
    5758:	50 e0       	ldi	r21, 0x00	; 0
    575a:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
				}
			}
		vTaskDelay(30);
    575e:	8e e1       	ldi	r24, 0x1E	; 30
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
    5766:	a3 cf       	rjmp	.-186    	; 0x56ae <Door_Action+0x12>

00005768 <ADC_Read>:
	}
}
void ADC_Read (void *pv)
{
    5768:	df 93       	push	r29
    576a:	cf 93       	push	r28
    576c:	00 d0       	rcall	.+0      	; 0x576e <ADC_Read+0x6>
    576e:	0f 92       	push	r0
    5770:	cd b7       	in	r28, 0x3d	; 61
    5772:	de b7       	in	r29, 0x3e	; 62
    5774:	9b 83       	std	Y+3, r25	; 0x03
    5776:	8a 83       	std	Y+2, r24	; 0x02
	u8 current = 0;
    5778:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		if (xSemaphoreTake(ADC_semphr,5) == pdPASS)
    577a:	80 91 38 07 	lds	r24, 0x0738
    577e:	90 91 39 07 	lds	r25, 0x0739
    5782:	60 e0       	ldi	r22, 0x00	; 0
    5784:	70 e0       	ldi	r23, 0x00	; 0
    5786:	45 e0       	ldi	r20, 0x05	; 5
    5788:	50 e0       	ldi	r21, 0x00	; 0
    578a:	20 e0       	ldi	r18, 0x00	; 0
    578c:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <xQueueGenericReceive>
    5790:	81 30       	cpi	r24, 0x01	; 1
    5792:	b9 f4       	brne	.+46     	; 0x57c2 <ADC_Read+0x5a>
		{
			if(current == 0)
    5794:	89 81       	ldd	r24, Y+1	; 0x01
    5796:	88 23       	and	r24, r24
    5798:	51 f4       	brne	.+20     	; 0x57ae <ADC_Read+0x46>
			{
				ADC_enuRead(&Digital[0]);
    579a:	8e e2       	ldi	r24, 0x2E	; 46
    579c:	97 e0       	ldi	r25, 0x07	; 7
    579e:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <ADC_enuRead>
				ADC_enuSelectChannel(0);
    57a2:	80 e0       	ldi	r24, 0x00	; 0
    57a4:	0e 94 1c 28 	call	0x5038	; 0x5038 <ADC_enuSelectChannel>
				current = 1;
    57a8:	81 e0       	ldi	r24, 0x01	; 1
    57aa:	89 83       	std	Y+1, r24	; 0x01
    57ac:	08 c0       	rjmp	.+16     	; 0x57be <ADC_Read+0x56>
			}
			else
			{
				ADC_enuRead(&Digital[1]);
    57ae:	80 e3       	ldi	r24, 0x30	; 48
    57b0:	97 e0       	ldi	r25, 0x07	; 7
    57b2:	0e 94 d2 27 	call	0x4fa4	; 0x4fa4 <ADC_enuRead>
				ADC_enuSelectChannel(7);
    57b6:	87 e0       	ldi	r24, 0x07	; 7
    57b8:	0e 94 1c 28 	call	0x5038	; 0x5038 <ADC_enuSelectChannel>
				current = 0;
    57bc:	19 82       	std	Y+1, r1	; 0x01
			}

			ADC_enuStartConversion();
    57be:	0e 94 ad 27 	call	0x4f5a	; 0x4f5a <ADC_enuStartConversion>
		}
		vTaskDelay(10);
    57c2:	8a e0       	ldi	r24, 0x0A	; 10
    57c4:	90 e0       	ldi	r25, 0x00	; 0
    57c6:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
    57ca:	d7 cf       	rjmp	.-82     	; 0x577a <ADC_Read+0x12>

000057cc <adc_isr>:
	}
}
void adc_isr(void)
{
    57cc:	df 93       	push	r29
    57ce:	cf 93       	push	r28
    57d0:	cd b7       	in	r28, 0x3d	; 61
    57d2:	de b7       	in	r29, 0x3e	; 62
		xSemaphoreGive(ADC_semphr);
    57d4:	80 91 38 07 	lds	r24, 0x0738
    57d8:	90 91 39 07 	lds	r25, 0x0739
    57dc:	60 e0       	ldi	r22, 0x00	; 0
    57de:	70 e0       	ldi	r23, 0x00	; 0
    57e0:	40 e0       	ldi	r20, 0x00	; 0
    57e2:	50 e0       	ldi	r21, 0x00	; 0
    57e4:	20 e0       	ldi	r18, 0x00	; 0
    57e6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xQueueGenericSend>
}
    57ea:	cf 91       	pop	r28
    57ec:	df 91       	pop	r29
    57ee:	08 95       	ret

000057f0 <ReadTemp>:
void ReadTemp (void *pv)
{
    57f0:	df 93       	push	r29
    57f2:	cf 93       	push	r28
    57f4:	00 d0       	rcall	.+0      	; 0x57f6 <ReadTemp+0x6>
    57f6:	cd b7       	in	r28, 0x3d	; 61
    57f8:	de b7       	in	r29, 0x3e	; 62
    57fa:	9a 83       	std	Y+2, r25	; 0x02
    57fc:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		Temp = Digital[0] / 2.f;
    57fe:	80 91 2e 07 	lds	r24, 0x072E
    5802:	90 91 2f 07 	lds	r25, 0x072F
    5806:	cc 01       	movw	r24, r24
    5808:	a0 e0       	ldi	r26, 0x00	; 0
    580a:	b0 e0       	ldi	r27, 0x00	; 0
    580c:	bc 01       	movw	r22, r24
    580e:	cd 01       	movw	r24, r26
    5810:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    5814:	dc 01       	movw	r26, r24
    5816:	cb 01       	movw	r24, r22
    5818:	bc 01       	movw	r22, r24
    581a:	cd 01       	movw	r24, r26
    581c:	20 e0       	ldi	r18, 0x00	; 0
    581e:	30 e0       	ldi	r19, 0x00	; 0
    5820:	40 e0       	ldi	r20, 0x00	; 0
    5822:	50 e4       	ldi	r21, 0x40	; 64
    5824:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    5828:	dc 01       	movw	r26, r24
    582a:	cb 01       	movw	r24, r22
    582c:	bc 01       	movw	r22, r24
    582e:	cd 01       	movw	r24, r26
    5830:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5834:	dc 01       	movw	r26, r24
    5836:	cb 01       	movw	r24, r22
    5838:	90 93 33 07 	sts	0x0733, r25
    583c:	80 93 32 07 	sts	0x0732, r24
		Gas = (Digital[1]*5000ul )/ 1024.f;
    5840:	80 91 30 07 	lds	r24, 0x0730
    5844:	90 91 31 07 	lds	r25, 0x0731
    5848:	cc 01       	movw	r24, r24
    584a:	a0 e0       	ldi	r26, 0x00	; 0
    584c:	b0 e0       	ldi	r27, 0x00	; 0
    584e:	28 e8       	ldi	r18, 0x88	; 136
    5850:	33 e1       	ldi	r19, 0x13	; 19
    5852:	40 e0       	ldi	r20, 0x00	; 0
    5854:	50 e0       	ldi	r21, 0x00	; 0
    5856:	bc 01       	movw	r22, r24
    5858:	cd 01       	movw	r24, r26
    585a:	0e 94 84 2c 	call	0x5908	; 0x5908 <__mulsi3>
    585e:	dc 01       	movw	r26, r24
    5860:	cb 01       	movw	r24, r22
    5862:	bc 01       	movw	r22, r24
    5864:	cd 01       	movw	r24, r26
    5866:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    586a:	dc 01       	movw	r26, r24
    586c:	cb 01       	movw	r24, r22
    586e:	bc 01       	movw	r22, r24
    5870:	cd 01       	movw	r24, r26
    5872:	20 e0       	ldi	r18, 0x00	; 0
    5874:	30 e0       	ldi	r19, 0x00	; 0
    5876:	40 e8       	ldi	r20, 0x80	; 128
    5878:	54 e4       	ldi	r21, 0x44	; 68
    587a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    587e:	dc 01       	movw	r26, r24
    5880:	cb 01       	movw	r24, r22
    5882:	bc 01       	movw	r22, r24
    5884:	cd 01       	movw	r24, r26
    5886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588a:	dc 01       	movw	r26, r24
    588c:	cb 01       	movw	r24, r22
    588e:	90 93 35 07 	sts	0x0735, r25
    5892:	80 93 34 07 	sts	0x0734, r24
		vTaskDelay(15);
    5896:	8f e0       	ldi	r24, 0x0F	; 15
    5898:	90 e0       	ldi	r25, 0x00	; 0
    589a:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
    589e:	af cf       	rjmp	.-162    	; 0x57fe <ReadTemp+0xe>

000058a0 <Fan>:
	}
}
void Fan (void *pv)
{
    58a0:	df 93       	push	r29
    58a2:	cf 93       	push	r28
    58a4:	00 d0       	rcall	.+0      	; 0x58a6 <Fan+0x6>
    58a6:	cd b7       	in	r28, 0x3d	; 61
    58a8:	de b7       	in	r29, 0x3e	; 62
    58aa:	9a 83       	std	Y+2, r25	; 0x02
    58ac:	89 83       	std	Y+1, r24	; 0x01
	if(Temp > 24)
    58ae:	80 91 32 07 	lds	r24, 0x0732
    58b2:	90 91 33 07 	lds	r25, 0x0733
    58b6:	89 31       	cpi	r24, 0x19	; 25
    58b8:	91 05       	cpc	r25, r1
    58ba:	78 f0       	brcs	.+30     	; 0x58da <Fan+0x3a>
	{
		strcpy(FanState,"on");
    58bc:	8b eb       	ldi	r24, 0xBB	; 187
    58be:	91 e0       	ldi	r25, 0x01	; 1
    58c0:	2d e8       	ldi	r18, 0x8D	; 141
    58c2:	30 e0       	ldi	r19, 0x00	; 0
    58c4:	b9 01       	movw	r22, r18
    58c6:	43 e0       	ldi	r20, 0x03	; 3
    58c8:	50 e0       	ldi	r21, 0x00	; 0
    58ca:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
		DIO_enuSetPinValue(DIO_u8GROUP_B, DIO_u8PIN7, DIO_u8HIGH);
    58ce:	81 e0       	ldi	r24, 0x01	; 1
    58d0:	67 e0       	ldi	r22, 0x07	; 7
    58d2:	41 e0       	ldi	r20, 0x01	; 1
    58d4:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
    58d8:	0e c0       	rjmp	.+28     	; 0x58f6 <Fan+0x56>
	}
	else
	{
		strcpy(FanState,"off");
    58da:	8b eb       	ldi	r24, 0xBB	; 187
    58dc:	91 e0       	ldi	r25, 0x01	; 1
    58de:	29 e8       	ldi	r18, 0x89	; 137
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	b9 01       	movw	r22, r18
    58e4:	44 e0       	ldi	r20, 0x04	; 4
    58e6:	50 e0       	ldi	r21, 0x00	; 0
    58e8:	0e 94 35 2d 	call	0x5a6a	; 0x5a6a <memcpy>
		DIO_enuSetPinValue(DIO_u8GROUP_B, DIO_u8PIN7, DIO_u8LOW);
    58ec:	81 e0       	ldi	r24, 0x01	; 1
    58ee:	67 e0       	ldi	r22, 0x07	; 7
    58f0:	40 e0       	ldi	r20, 0x00	; 0
    58f2:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <DIO_enuSetPinValue>
	}
	vTaskDelay(23);
    58f6:	87 e1       	ldi	r24, 0x17	; 23
    58f8:	90 e0       	ldi	r25, 0x00	; 0
    58fa:	0e 94 b0 1c 	call	0x3960	; 0x3960 <vTaskDelay>
}
    58fe:	0f 90       	pop	r0
    5900:	0f 90       	pop	r0
    5902:	cf 91       	pop	r28
    5904:	df 91       	pop	r29
    5906:	08 95       	ret

00005908 <__mulsi3>:
    5908:	62 9f       	mul	r22, r18
    590a:	d0 01       	movw	r26, r0
    590c:	73 9f       	mul	r23, r19
    590e:	f0 01       	movw	r30, r0
    5910:	82 9f       	mul	r24, r18
    5912:	e0 0d       	add	r30, r0
    5914:	f1 1d       	adc	r31, r1
    5916:	64 9f       	mul	r22, r20
    5918:	e0 0d       	add	r30, r0
    591a:	f1 1d       	adc	r31, r1
    591c:	92 9f       	mul	r25, r18
    591e:	f0 0d       	add	r31, r0
    5920:	83 9f       	mul	r24, r19
    5922:	f0 0d       	add	r31, r0
    5924:	74 9f       	mul	r23, r20
    5926:	f0 0d       	add	r31, r0
    5928:	65 9f       	mul	r22, r21
    592a:	f0 0d       	add	r31, r0
    592c:	99 27       	eor	r25, r25
    592e:	72 9f       	mul	r23, r18
    5930:	b0 0d       	add	r27, r0
    5932:	e1 1d       	adc	r30, r1
    5934:	f9 1f       	adc	r31, r25
    5936:	63 9f       	mul	r22, r19
    5938:	b0 0d       	add	r27, r0
    593a:	e1 1d       	adc	r30, r1
    593c:	f9 1f       	adc	r31, r25
    593e:	bd 01       	movw	r22, r26
    5940:	cf 01       	movw	r24, r30
    5942:	11 24       	eor	r1, r1
    5944:	08 95       	ret

00005946 <__divmodsi4>:
    5946:	97 fb       	bst	r25, 7
    5948:	09 2e       	mov	r0, r25
    594a:	05 26       	eor	r0, r21
    594c:	0e d0       	rcall	.+28     	; 0x596a <__divmodsi4_neg1>
    594e:	57 fd       	sbrc	r21, 7
    5950:	04 d0       	rcall	.+8      	; 0x595a <__divmodsi4_neg2>
    5952:	14 d0       	rcall	.+40     	; 0x597c <__udivmodsi4>
    5954:	0a d0       	rcall	.+20     	; 0x596a <__divmodsi4_neg1>
    5956:	00 1c       	adc	r0, r0
    5958:	38 f4       	brcc	.+14     	; 0x5968 <__divmodsi4_exit>

0000595a <__divmodsi4_neg2>:
    595a:	50 95       	com	r21
    595c:	40 95       	com	r20
    595e:	30 95       	com	r19
    5960:	21 95       	neg	r18
    5962:	3f 4f       	sbci	r19, 0xFF	; 255
    5964:	4f 4f       	sbci	r20, 0xFF	; 255
    5966:	5f 4f       	sbci	r21, 0xFF	; 255

00005968 <__divmodsi4_exit>:
    5968:	08 95       	ret

0000596a <__divmodsi4_neg1>:
    596a:	f6 f7       	brtc	.-4      	; 0x5968 <__divmodsi4_exit>
    596c:	90 95       	com	r25
    596e:	80 95       	com	r24
    5970:	70 95       	com	r23
    5972:	61 95       	neg	r22
    5974:	7f 4f       	sbci	r23, 0xFF	; 255
    5976:	8f 4f       	sbci	r24, 0xFF	; 255
    5978:	9f 4f       	sbci	r25, 0xFF	; 255
    597a:	08 95       	ret

0000597c <__udivmodsi4>:
    597c:	a1 e2       	ldi	r26, 0x21	; 33
    597e:	1a 2e       	mov	r1, r26
    5980:	aa 1b       	sub	r26, r26
    5982:	bb 1b       	sub	r27, r27
    5984:	fd 01       	movw	r30, r26
    5986:	0d c0       	rjmp	.+26     	; 0x59a2 <__udivmodsi4_ep>

00005988 <__udivmodsi4_loop>:
    5988:	aa 1f       	adc	r26, r26
    598a:	bb 1f       	adc	r27, r27
    598c:	ee 1f       	adc	r30, r30
    598e:	ff 1f       	adc	r31, r31
    5990:	a2 17       	cp	r26, r18
    5992:	b3 07       	cpc	r27, r19
    5994:	e4 07       	cpc	r30, r20
    5996:	f5 07       	cpc	r31, r21
    5998:	20 f0       	brcs	.+8      	; 0x59a2 <__udivmodsi4_ep>
    599a:	a2 1b       	sub	r26, r18
    599c:	b3 0b       	sbc	r27, r19
    599e:	e4 0b       	sbc	r30, r20
    59a0:	f5 0b       	sbc	r31, r21

000059a2 <__udivmodsi4_ep>:
    59a2:	66 1f       	adc	r22, r22
    59a4:	77 1f       	adc	r23, r23
    59a6:	88 1f       	adc	r24, r24
    59a8:	99 1f       	adc	r25, r25
    59aa:	1a 94       	dec	r1
    59ac:	69 f7       	brne	.-38     	; 0x5988 <__udivmodsi4_loop>
    59ae:	60 95       	com	r22
    59b0:	70 95       	com	r23
    59b2:	80 95       	com	r24
    59b4:	90 95       	com	r25
    59b6:	9b 01       	movw	r18, r22
    59b8:	ac 01       	movw	r20, r24
    59ba:	bd 01       	movw	r22, r26
    59bc:	cf 01       	movw	r24, r30
    59be:	08 95       	ret

000059c0 <__prologue_saves__>:
    59c0:	2f 92       	push	r2
    59c2:	3f 92       	push	r3
    59c4:	4f 92       	push	r4
    59c6:	5f 92       	push	r5
    59c8:	6f 92       	push	r6
    59ca:	7f 92       	push	r7
    59cc:	8f 92       	push	r8
    59ce:	9f 92       	push	r9
    59d0:	af 92       	push	r10
    59d2:	bf 92       	push	r11
    59d4:	cf 92       	push	r12
    59d6:	df 92       	push	r13
    59d8:	ef 92       	push	r14
    59da:	ff 92       	push	r15
    59dc:	0f 93       	push	r16
    59de:	1f 93       	push	r17
    59e0:	cf 93       	push	r28
    59e2:	df 93       	push	r29
    59e4:	cd b7       	in	r28, 0x3d	; 61
    59e6:	de b7       	in	r29, 0x3e	; 62
    59e8:	ca 1b       	sub	r28, r26
    59ea:	db 0b       	sbc	r29, r27
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	f8 94       	cli
    59f0:	de bf       	out	0x3e, r29	; 62
    59f2:	0f be       	out	0x3f, r0	; 63
    59f4:	cd bf       	out	0x3d, r28	; 61
    59f6:	09 94       	ijmp

000059f8 <__epilogue_restores__>:
    59f8:	2a 88       	ldd	r2, Y+18	; 0x12
    59fa:	39 88       	ldd	r3, Y+17	; 0x11
    59fc:	48 88       	ldd	r4, Y+16	; 0x10
    59fe:	5f 84       	ldd	r5, Y+15	; 0x0f
    5a00:	6e 84       	ldd	r6, Y+14	; 0x0e
    5a02:	7d 84       	ldd	r7, Y+13	; 0x0d
    5a04:	8c 84       	ldd	r8, Y+12	; 0x0c
    5a06:	9b 84       	ldd	r9, Y+11	; 0x0b
    5a08:	aa 84       	ldd	r10, Y+10	; 0x0a
    5a0a:	b9 84       	ldd	r11, Y+9	; 0x09
    5a0c:	c8 84       	ldd	r12, Y+8	; 0x08
    5a0e:	df 80       	ldd	r13, Y+7	; 0x07
    5a10:	ee 80       	ldd	r14, Y+6	; 0x06
    5a12:	fd 80       	ldd	r15, Y+5	; 0x05
    5a14:	0c 81       	ldd	r16, Y+4	; 0x04
    5a16:	1b 81       	ldd	r17, Y+3	; 0x03
    5a18:	aa 81       	ldd	r26, Y+2	; 0x02
    5a1a:	b9 81       	ldd	r27, Y+1	; 0x01
    5a1c:	ce 0f       	add	r28, r30
    5a1e:	d1 1d       	adc	r29, r1
    5a20:	0f b6       	in	r0, 0x3f	; 63
    5a22:	f8 94       	cli
    5a24:	de bf       	out	0x3e, r29	; 62
    5a26:	0f be       	out	0x3f, r0	; 63
    5a28:	cd bf       	out	0x3d, r28	; 61
    5a2a:	ed 01       	movw	r28, r26
    5a2c:	08 95       	ret

00005a2e <atoi>:
    5a2e:	fc 01       	movw	r30, r24
    5a30:	88 27       	eor	r24, r24
    5a32:	99 27       	eor	r25, r25
    5a34:	e8 94       	clt
    5a36:	21 91       	ld	r18, Z+
    5a38:	20 32       	cpi	r18, 0x20	; 32
    5a3a:	e9 f3       	breq	.-6      	; 0x5a36 <atoi+0x8>
    5a3c:	29 30       	cpi	r18, 0x09	; 9
    5a3e:	10 f0       	brcs	.+4      	; 0x5a44 <atoi+0x16>
    5a40:	2e 30       	cpi	r18, 0x0E	; 14
    5a42:	c8 f3       	brcs	.-14     	; 0x5a36 <atoi+0x8>
    5a44:	2b 32       	cpi	r18, 0x2B	; 43
    5a46:	41 f0       	breq	.+16     	; 0x5a58 <atoi+0x2a>
    5a48:	2d 32       	cpi	r18, 0x2D	; 45
    5a4a:	39 f4       	brne	.+14     	; 0x5a5a <atoi+0x2c>
    5a4c:	68 94       	set
    5a4e:	04 c0       	rjmp	.+8      	; 0x5a58 <atoi+0x2a>
    5a50:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <__mulhi_const_10>
    5a54:	82 0f       	add	r24, r18
    5a56:	91 1d       	adc	r25, r1
    5a58:	21 91       	ld	r18, Z+
    5a5a:	20 53       	subi	r18, 0x30	; 48
    5a5c:	2a 30       	cpi	r18, 0x0A	; 10
    5a5e:	c0 f3       	brcs	.-16     	; 0x5a50 <atoi+0x22>
    5a60:	1e f4       	brtc	.+6      	; 0x5a68 <atoi+0x3a>
    5a62:	90 95       	com	r25
    5a64:	81 95       	neg	r24
    5a66:	9f 4f       	sbci	r25, 0xFF	; 255
    5a68:	08 95       	ret

00005a6a <memcpy>:
    5a6a:	fb 01       	movw	r30, r22
    5a6c:	dc 01       	movw	r26, r24
    5a6e:	02 c0       	rjmp	.+4      	; 0x5a74 <memcpy+0xa>
    5a70:	01 90       	ld	r0, Z+
    5a72:	0d 92       	st	X+, r0
    5a74:	41 50       	subi	r20, 0x01	; 1
    5a76:	50 40       	sbci	r21, 0x00	; 0
    5a78:	d8 f7       	brcc	.-10     	; 0x5a70 <memcpy+0x6>
    5a7a:	08 95       	ret

00005a7c <memset>:
    5a7c:	dc 01       	movw	r26, r24
    5a7e:	01 c0       	rjmp	.+2      	; 0x5a82 <memset+0x6>
    5a80:	6d 93       	st	X+, r22
    5a82:	41 50       	subi	r20, 0x01	; 1
    5a84:	50 40       	sbci	r21, 0x00	; 0
    5a86:	e0 f7       	brcc	.-8      	; 0x5a80 <memset+0x4>
    5a88:	08 95       	ret

00005a8a <strlen>:
    5a8a:	fc 01       	movw	r30, r24
    5a8c:	01 90       	ld	r0, Z+
    5a8e:	00 20       	and	r0, r0
    5a90:	e9 f7       	brne	.-6      	; 0x5a8c <strlen+0x2>
    5a92:	80 95       	com	r24
    5a94:	90 95       	com	r25
    5a96:	8e 0f       	add	r24, r30
    5a98:	9f 1f       	adc	r25, r31
    5a9a:	08 95       	ret

00005a9c <strncpy>:
    5a9c:	fb 01       	movw	r30, r22
    5a9e:	dc 01       	movw	r26, r24
    5aa0:	41 50       	subi	r20, 0x01	; 1
    5aa2:	50 40       	sbci	r21, 0x00	; 0
    5aa4:	48 f0       	brcs	.+18     	; 0x5ab8 <strncpy+0x1c>
    5aa6:	01 90       	ld	r0, Z+
    5aa8:	0d 92       	st	X+, r0
    5aaa:	00 20       	and	r0, r0
    5aac:	c9 f7       	brne	.-14     	; 0x5aa0 <strncpy+0x4>
    5aae:	01 c0       	rjmp	.+2      	; 0x5ab2 <strncpy+0x16>
    5ab0:	1d 92       	st	X+, r1
    5ab2:	41 50       	subi	r20, 0x01	; 1
    5ab4:	50 40       	sbci	r21, 0x00	; 0
    5ab6:	e0 f7       	brcc	.-8      	; 0x5ab0 <strncpy+0x14>
    5ab8:	08 95       	ret

00005aba <__mulhi_const_10>:
    5aba:	7a e0       	ldi	r23, 0x0A	; 10
    5abc:	97 9f       	mul	r25, r23
    5abe:	90 2d       	mov	r25, r0
    5ac0:	87 9f       	mul	r24, r23
    5ac2:	80 2d       	mov	r24, r0
    5ac4:	91 0d       	add	r25, r1
    5ac6:	11 24       	eor	r1, r1
    5ac8:	08 95       	ret

00005aca <_exit>:
    5aca:	f8 94       	cli

00005acc <__stop_program>:
    5acc:	ff cf       	rjmp	.-2      	; 0x5acc <__stop_program>
